{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\narut\\\\Documents\\\\Coding\\\\stock-calc\\\\src\\\\Component\\\\LightChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Chart from \"kaktana-react-lightweight-charts\";\nimport { createChart, LineStyle } from \"lightweight-charts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst LightChart = ({\n  quoteSpark,\n  setRangeChart,\n  quoteSummary\n}) => {\n  _s();\n\n  var _quoteSpark$close, _quoteSummary$incomeS, _quoteSummary$incomeS2;\n\n  const [chartData, setChartData] = useState([]);\n\n  const convertDate = value => {\n    const result = new Date(value * 1000);\n    let date = result.getDate();\n    let month = result.getMonth() + 1;\n    let year = result.getFullYear();\n\n    if (date < 10) {\n      date = \"0\" + date;\n    }\n\n    if (month < 10) {\n      month = \"0\" + month;\n    }\n\n    return `${year}-${month}-${date}`;\n  };\n\n  console.log(\"quoteSummary\", quoteSummary);\n\n  const convertNumberRound = value => {\n    return Math.round(value * 100) / 100;\n  };\n\n  const getStandardDeviation = dataArray => {\n    const n = dataArray === null || dataArray === void 0 ? void 0 : dataArray.length;\n    const mean = (dataArray === null || dataArray === void 0 ? void 0 : dataArray.reduce((a, b) => a + b)) / n;\n    return +Math.sqrt((dataArray === null || dataArray === void 0 ? void 0 : dataArray.map(x => Math.pow(x - mean, 2)).reduce((a, b) => a + b)) / n);\n  };\n\n  const getPrice = quoteSpark === null || quoteSpark === void 0 ? void 0 : (_quoteSpark$close = quoteSpark.close) === null || _quoteSpark$close === void 0 ? void 0 : _quoteSpark$close.map((item, index) => {\n    return {\n      price: item,\n      date: convertDate(quoteSpark.timestamp[index]),\n      year: new Date(quoteSpark.timestamp[index] * 1000).getFullYear()\n    };\n  });\n  const getEPS = quoteSummary === null || quoteSummary === void 0 ? void 0 : (_quoteSummary$incomeS = quoteSummary.incomeStatementHistory) === null || _quoteSummary$incomeS === void 0 ? void 0 : (_quoteSummary$incomeS2 = _quoteSummary$incomeS.incomeStatementHistory) === null || _quoteSummary$incomeS2 === void 0 ? void 0 : _quoteSummary$incomeS2.map((item, index) => {\n    return {\n      eps: item.netIncome.raw / (quoteSummary === null || quoteSummary === void 0 ? void 0 : quoteSummary.defaultKeyStatistics.sharesOutstanding.raw),\n      year: new Date(item.endDate.raw * 1000).getFullYear()\n    };\n  }).concat({\n    eps: quoteSummary === null || quoteSummary === void 0 ? void 0 : quoteSummary.defaultKeyStatistics.trailingEps.raw,\n    year: new Date().getFullYear()\n  }).sort((a, b) => a.year - b.year);\n  const getPE = getPrice === null || getPrice === void 0 ? void 0 : getPrice.map((item, index) => {\n    const resEps = getEPS === null || getEPS === void 0 ? void 0 : getEPS.find(data => data.year === item.year);\n    const resPe = resEps ? +item.price / +resEps.eps : null;\n    return { ...item,\n      eps: resEps ? resEps.eps : null,\n      pe: resPe ? convertNumberRound(resPe) : resPe\n    };\n  });\n  const purePE = getPE === null || getPE === void 0 ? void 0 : getPE.filter(item => item.pe);\n  const getSD = getPE === null || getPE === void 0 ? void 0 : getPE.map(item => {\n    var _purePE$map;\n\n    const n = purePE === null || purePE === void 0 ? void 0 : purePE.length;\n    const meanPE = (purePE === null || purePE === void 0 ? void 0 : (_purePE$map = purePE.map(item => item.pe)) === null || _purePE$map === void 0 ? void 0 : _purePE$map.reduce((a, b) => +a + +b)) / +n;\n    const pe = purePE.map(item => item.pe);\n    return { ...item,\n      sd: convertNumberRound(meanPE),\n      sd1p: convertNumberRound(meanPE + getStandardDeviation(pe)),\n      sd2p: convertNumberRound(meanPE + getStandardDeviation(pe) * 2),\n      sd1m: convertNumberRound(meanPE - getStandardDeviation(pe)),\n      sd2m: convertNumberRound(meanPE - getStandardDeviation(pe) * 2)\n    };\n  });\n\n  const generateChart = () => {\n    const datas = getSD.map(item => {\n      return {\n        time: item.date,\n        value: item.pe\n      };\n    });\n    setChartData([{\n      legend: \"P/E\",\n      data: datas,\n      priceLines: [{\n        title: \"+2SD\",\n        price: getSD[0].sd2p,\n        color: \"gray\",\n        lineWidth: 2,\n        lineStyle: LineStyle.Dotted,\n        axisLabelVisible: true\n      } // {\n      //   price: getSD[0].sd1p,\n      //   color: \"gray\",\n      //   lineWidth: 2,\n      //   lineStyle: LineStyle.Dotted,\n      //   axisLabelVisible: true,\n      //   title: \"+1SD\",\n      // },\n      // {\n      //   price: getSD[0].sd,\n      //   color: \"gray\",\n      //   lineWidth: 2,\n      //   lineStyle: LineStyle.Dotted,\n      //   axisLabelVisible: true,\n      //   title: \"Average\",\n      // },\n      // {\n      //   price: getSD[0].sd1m,\n      //   color: \"gray\",\n      //   lineWidth: 2,\n      //   lineStyle: LineStyle.Dotted,\n      //   axisLabelVisible: true,\n      //   title: \"-1SD\",\n      // },\n      // {\n      //   price: getSD[0].sd2m,\n      //   color: \"gray\",\n      //   lineWidth: 2,\n      //   lineStyle: LineStyle.Dotted,\n      //   axisLabelVisible: true,\n      //   title: \"-2SD\",\n      // },\n      ]\n    }]);\n  };\n\n  const options = {\n    alignLabels: true,\n    timeScale: {\n      rightOffset: 12,\n      barSpacing: 3,\n      fixLeftEdge: false,\n      lockVisibleTimeRangeOnResize: true,\n      rightBarStaysOnScroll: true,\n      borderVisible: false,\n      borderColor: \"#fff000\",\n      visible: true,\n      timeVisible: true,\n      secondsVisible: false\n    },\n    priceScale: {\n      autoScale: true\n    }\n  };\n  useEffect(() => {\n    generateChart();\n  }, [quoteSpark]);\n\n  const displayRange = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"d-flex justify-content-around align-items-center my-1\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: ev => setRangeChart(ev.target.value),\n        name: \"range-chart\",\n        type: \"radio\",\n        className: \"btn-check\",\n        id: \"range-1y\",\n        value: \"1y\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"btn btn-outline-primary btn-sm px-5\",\n        htmlFor: \"range-1y\",\n        children: \"1Y\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: ev => setRangeChart(ev.target.value),\n        name: \"range-chart\",\n        type: \"radio\",\n        className: \"btn-check\",\n        id: \"range-3y\",\n        value: \"3y\",\n        defaultChecked: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"btn btn-outline-primary btn-sm px-5\",\n        htmlFor: \"range-3y\",\n        children: \"3Y\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: ev => setRangeChart(ev.target.value),\n        name: \"range-chart\",\n        type: \"radio\",\n        className: \"btn-check\",\n        id: \"range-5y\",\n        value: \"5y\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"btn btn-outline-primary btn-sm px-5\",\n        htmlFor: \"range-5y\",\n        children: \"5Y\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: ev => setRangeChart(ev.target.value),\n        name: \"range-chart\",\n        type: \"radio\",\n        className: \"btn-check\",\n        id: \"range-max\",\n        value: \"max\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"btn btn-outline-primary btn-sm px-5\",\n        htmlFor: \"range-max\",\n        children: \"Max\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: quoteSpark ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [displayRange, /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"stock-chart\",\n        className: \"shadow my-1 px-4 py-2\",\n        children: /*#__PURE__*/_jsxDEV(Chart, {\n          options: options,\n          lineSeries: chartData,\n          autoWidth: true,\n          height: 300,\n          from: `${new Date().getFullYear() - 4}-01-01`,\n          to: convertDate(new Date())\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : \"\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 243,\n    columnNumber: 5\n  }, this);\n};\n\n_s(LightChart, \"Leo9Xk/Ki5G6SkYc3yZESo07mWw=\");\n\n_c = LightChart;\nexport default LightChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"LightChart\");","map":{"version":3,"sources":["C:/Users/narut/Documents/Coding/stock-calc/src/Component/LightChart.js"],"names":["React","useState","useEffect","Chart","createChart","LineStyle","LightChart","quoteSpark","setRangeChart","quoteSummary","chartData","setChartData","convertDate","value","result","Date","date","getDate","month","getMonth","year","getFullYear","console","log","convertNumberRound","Math","round","getStandardDeviation","dataArray","n","length","mean","reduce","a","b","sqrt","map","x","pow","getPrice","close","item","index","price","timestamp","getEPS","incomeStatementHistory","eps","netIncome","raw","defaultKeyStatistics","sharesOutstanding","endDate","concat","trailingEps","sort","getPE","resEps","find","data","resPe","pe","purePE","filter","getSD","meanPE","sd","sd1p","sd2p","sd1m","sd2m","generateChart","datas","time","legend","priceLines","title","color","lineWidth","lineStyle","Dotted","axisLabelVisible","options","alignLabels","timeScale","rightOffset","barSpacing","fixLeftEdge","lockVisibleTimeRangeOnResize","rightBarStaysOnScroll","borderVisible","borderColor","visible","timeVisible","secondsVisible","priceScale","autoScale","displayRange","ev","target"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Chart from \"kaktana-react-lightweight-charts\";\r\nimport { createChart, LineStyle } from \"lightweight-charts\";\r\n\r\nconst LightChart = ({ quoteSpark, setRangeChart, quoteSummary }) => {\r\n  const [chartData, setChartData] = useState([]);\r\n\r\n  const convertDate = (value) => {\r\n    const result = new Date(value * 1000);\r\n\r\n    let date = result.getDate();\r\n    let month = result.getMonth() + 1;\r\n    let year = result.getFullYear();\r\n\r\n    if (date < 10) {\r\n      date = \"0\" + date;\r\n    }\r\n    if (month < 10) {\r\n      month = \"0\" + month;\r\n    }\r\n\r\n    return `${year}-${month}-${date}`;\r\n  };\r\n\r\n  console.log(\"quoteSummary\", quoteSummary);\r\n\r\n  const convertNumberRound = (value) => {\r\n    return Math.round(value * 100) / 100;\r\n  };\r\n\r\n  const getStandardDeviation = (dataArray) => {\r\n    const n = dataArray?.length;\r\n    const mean = dataArray?.reduce((a, b) => a + b) / n;\r\n    return +Math.sqrt(\r\n      dataArray?.map((x) => Math.pow(x - mean, 2)).reduce((a, b) => a + b) / n\r\n    );\r\n  };\r\n\r\n  const getPrice = quoteSpark?.close?.map((item, index) => {\r\n    return {\r\n      price: item,\r\n      date: convertDate(quoteSpark.timestamp[index]),\r\n      year: new Date(quoteSpark.timestamp[index] * 1000).getFullYear(),\r\n    };\r\n  });\r\n\r\n  const getEPS = quoteSummary?.incomeStatementHistory?.incomeStatementHistory\r\n    ?.map((item, index) => {\r\n      return {\r\n        eps:\r\n          item.netIncome.raw /\r\n          quoteSummary?.defaultKeyStatistics.sharesOutstanding.raw,\r\n        year: new Date(item.endDate.raw * 1000).getFullYear(),\r\n      };\r\n    })\r\n    .concat({\r\n      eps: quoteSummary?.defaultKeyStatistics.trailingEps.raw,\r\n      year: new Date().getFullYear(),\r\n    })\r\n    .sort((a, b) => a.year - b.year);\r\n\r\n  const getPE = getPrice?.map((item, index) => {\r\n    const resEps = getEPS?.find((data) => data.year === item.year);\r\n    const resPe = resEps ? +item.price / +resEps.eps : null;\r\n\r\n    return {\r\n      ...item,\r\n      eps: resEps ? resEps.eps : null,\r\n      pe: resPe ? convertNumberRound(resPe) : resPe,\r\n    };\r\n  });\r\n\r\n  const purePE = getPE?.filter((item) => item.pe);\r\n\r\n  const getSD = getPE?.map((item) => {\r\n    const n = purePE?.length;\r\n    const meanPE =\r\n      purePE?.map((item) => item.pe)?.reduce((a, b) => +a + +b) / +n;\r\n\r\n    const pe = purePE.map((item) => item.pe);\r\n\r\n    return {\r\n      ...item,\r\n      sd: convertNumberRound(meanPE),\r\n      sd1p: convertNumberRound(meanPE + getStandardDeviation(pe)),\r\n      sd2p: convertNumberRound(meanPE + getStandardDeviation(pe) * 2),\r\n      sd1m: convertNumberRound(meanPE - getStandardDeviation(pe)),\r\n      sd2m: convertNumberRound(meanPE - getStandardDeviation(pe) * 2),\r\n    };\r\n  });\r\n\r\n  const generateChart = () => {\r\n    const datas = getSD.map((item) => {\r\n      return {\r\n        time: item.date,\r\n        value: item.pe,\r\n      };\r\n    });\r\n    setChartData([\r\n      {\r\n        legend: \"P/E\",\r\n        data: datas,\r\n        priceLines: [\r\n          {\r\n            title: \"+2SD\",\r\n            price: getSD[0].sd2p,\r\n            color: \"gray\",\r\n            lineWidth: 2,\r\n            lineStyle: LineStyle.Dotted,\r\n            axisLabelVisible: true,\r\n          },\r\n          // {\r\n          //   price: getSD[0].sd1p,\r\n          //   color: \"gray\",\r\n          //   lineWidth: 2,\r\n          //   lineStyle: LineStyle.Dotted,\r\n          //   axisLabelVisible: true,\r\n          //   title: \"+1SD\",\r\n          // },\r\n          // {\r\n          //   price: getSD[0].sd,\r\n          //   color: \"gray\",\r\n          //   lineWidth: 2,\r\n          //   lineStyle: LineStyle.Dotted,\r\n          //   axisLabelVisible: true,\r\n          //   title: \"Average\",\r\n          // },\r\n          // {\r\n          //   price: getSD[0].sd1m,\r\n          //   color: \"gray\",\r\n          //   lineWidth: 2,\r\n          //   lineStyle: LineStyle.Dotted,\r\n          //   axisLabelVisible: true,\r\n          //   title: \"-1SD\",\r\n          // },\r\n          // {\r\n          //   price: getSD[0].sd2m,\r\n          //   color: \"gray\",\r\n          //   lineWidth: 2,\r\n          //   lineStyle: LineStyle.Dotted,\r\n          //   axisLabelVisible: true,\r\n          //   title: \"-2SD\",\r\n          // },\r\n        ],\r\n      },\r\n    ]);\r\n  };\r\n\r\n  const options = {\r\n    alignLabels: true,\r\n    timeScale: {\r\n      rightOffset: 12,\r\n      barSpacing: 3,\r\n      fixLeftEdge: false,\r\n      lockVisibleTimeRangeOnResize: true,\r\n      rightBarStaysOnScroll: true,\r\n      borderVisible: false,\r\n      borderColor: \"#fff000\",\r\n      visible: true,\r\n      timeVisible: true,\r\n      secondsVisible: false,\r\n    },\r\n    priceScale: {\r\n      autoScale: true,\r\n    },\r\n  };\r\n\r\n  useEffect(() => {\r\n    generateChart();\r\n  }, [quoteSpark]);\r\n\r\n  const displayRange = (\r\n    <div className=\"d-flex justify-content-around align-items-center my-1\">\r\n      <div>\r\n        <input\r\n          onChange={(ev) => setRangeChart(ev.target.value)}\r\n          name=\"range-chart\"\r\n          type=\"radio\"\r\n          className=\"btn-check\"\r\n          id=\"range-1y\"\r\n          value=\"1y\"\r\n        />\r\n        <label\r\n          className=\"btn btn-outline-primary btn-sm px-5\"\r\n          htmlFor=\"range-1y\"\r\n        >\r\n          1Y\r\n        </label>\r\n      </div>\r\n      <div>\r\n        <input\r\n          onChange={(ev) => setRangeChart(ev.target.value)}\r\n          name=\"range-chart\"\r\n          type=\"radio\"\r\n          className=\"btn-check\"\r\n          id=\"range-3y\"\r\n          value=\"3y\"\r\n          defaultChecked\r\n        />\r\n        <label\r\n          className=\"btn btn-outline-primary btn-sm px-5\"\r\n          htmlFor=\"range-3y\"\r\n        >\r\n          3Y\r\n        </label>\r\n      </div>\r\n      <div>\r\n        <input\r\n          onChange={(ev) => setRangeChart(ev.target.value)}\r\n          name=\"range-chart\"\r\n          type=\"radio\"\r\n          className=\"btn-check\"\r\n          id=\"range-5y\"\r\n          value=\"5y\"\r\n        />\r\n        <label\r\n          className=\"btn btn-outline-primary btn-sm px-5\"\r\n          htmlFor=\"range-5y\"\r\n        >\r\n          5Y\r\n        </label>\r\n      </div>\r\n      <div>\r\n        <input\r\n          onChange={(ev) => setRangeChart(ev.target.value)}\r\n          name=\"range-chart\"\r\n          type=\"radio\"\r\n          className=\"btn-check\"\r\n          id=\"range-max\"\r\n          value=\"max\"\r\n        />\r\n        <label\r\n          className=\"btn btn-outline-primary btn-sm px-5\"\r\n          htmlFor=\"range-max\"\r\n        >\r\n          Max\r\n        </label>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {quoteSpark ? (\r\n        <>\r\n          {displayRange}\r\n          <div id=\"stock-chart\" className=\"shadow my-1 px-4 py-2\">\r\n            <Chart\r\n              options={options}\r\n              lineSeries={chartData}\r\n              autoWidth\r\n              height={300}\r\n              from={`${new Date().getFullYear() - 4}-01-01`}\r\n              to={convertDate(new Date())}\r\n            />\r\n          </div>\r\n        </>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LightChart;\r\n"]},"metadata":{},"sourceType":"module"}