{"ast":null,"code":"\"use strict\";\n\nvar req = require(\"cheerio-req\"),\n    typpy = require(\"typpy\"),\n    assured = require(\"assured\"),\n    scrapeHTML = require(\"scrape-it-core\");\n/**\r\n * scrapeIt\r\n * A scraping module for humans.\r\n *\r\n * @name scrapeIt\r\n * @function\r\n * @param {String|Object} url The page url or request options.\r\n * @param {Object} opts The options passed to `scrapeHTML` method.\r\n * @param {Function} cb The callback function.\r\n * @return {Promise} A promise object resolving with:\r\n *\r\n *   - `data` (Object): The scraped data.\r\n *   - `$` (Function): The Cheeerio function. This may be handy to do some other manipulation on the DOM, if needed.\r\n *   - `response` (Object): The response object.\r\n *   - `body` (String): The raw body as a string.\r\n *\r\n */\n\n\nfunction scrapeIt(url, opts, cb) {\n  cb = assured(cb);\n  req(url, function (err, $, res, body) {\n    if (err) {\n      return cb(err);\n    }\n\n    try {\n      var scrapedData = scrapeIt.scrapeHTML($, opts);\n      cb(null, {\n        data: scrapedData,\n        $: $,\n        response: res,\n        body: body\n      });\n    } catch (err) {\n      cb(err);\n    }\n  });\n  return cb._;\n}\n/**\r\n * scrapeIt.scrapeHTML\r\n * Scrapes the data in the provided element.\r\n *\r\n * For the format of the selector, please refer to the [Selectors section of the Cheerio library](https://github.com/cheeriojs/cheerio#-selector-context-root-)\r\n *\r\n * @name scrapeIt.scrapeHTML\r\n * @function\r\n * @param {Cheerio} $ The input element.\r\n * @param {Object} opts An object containing the scraping information.\r\n *\r\n *   If you want to scrape a list, you have to use the `listItem` selector:\r\n *\r\n *    - `listItem` (String): The list item selector.\r\n *    - `data` (Object): The fields to include in the list objects:\r\n *       - `<fieldName>` (Object|String): The selector or an object containing:\r\n *          - `selector` (String): The selector.\r\n *          - `convert` (Function): An optional function to change the value.\r\n *          - `how` (Function|String): A function or function name to access the\r\n *            value.\r\n *          - `attr` (String): If provided, the value will be taken based on\r\n *            the attribute name.\r\n *          - `trim` (Boolean): If `false`, the value will *not* be trimmed\r\n *            (default: `true`).\r\n *          - `closest` (String): If provided, returns the first ancestor of\r\n *            the given element.\r\n *          - `eq` (Number): If provided, it will select the *nth* element.\r\n *          - `texteq` (Number): If provided, it will select the *nth* direct text child.\r\n *            Deep text child selection is not possible yet.\r\n *            Overwrites the `how` key.\r\n *          - `listItem` (Object): An object, keeping the recursive schema of\r\n *            the `listItem` object. This can be used to create nested lists.\r\n *\r\n *   **Example**:\r\n *   ```js\r\n *   {\r\n *      articles: {\r\n *          listItem: \".article\"\r\n *        , data: {\r\n *              createdAt: {\r\n *                  selector: \".date\"\r\n *                , convert: x => new Date(x)\r\n *              }\r\n *            , title: \"a.article-title\"\r\n *            , tags: {\r\n *                  listItem: \".tags > span\"\r\n *              }\r\n *            , content: {\r\n *                  selector: \".article-content\"\r\n *                , how: \"html\"\r\n *              }\r\n *            , traverseOtherNode: {\r\n *                  selector: \".upperNode\"\r\n *                , closest: \"div\"\r\n *                , convert: x => x.length\r\n *              }\r\n *          }\r\n *      }\r\n *   }\r\n *   ```\r\n *\r\n *   If you want to collect specific data from the page, just use the same\r\n *   schema used for the `data` field.\r\n *\r\n *   **Example**:\r\n *   ```js\r\n *   {\r\n *        title: \".header h1\"\r\n *      , desc: \".header h2\"\r\n *      , avatar: {\r\n *            selector: \".header img\"\r\n *          , attr: \"src\"\r\n *        }\r\n *   }\r\n *   ```\r\n *\r\n * @returns {Object} The scraped data.\r\n */\n\n\nscrapeIt.scrapeHTML = scrapeHTML;\nmodule.exports = scrapeIt;","map":{"version":3,"sources":["C:/Users/narut/Documents/Coding/coindy/node_modules/scrape-it/lib/index.js"],"names":["req","require","typpy","assured","scrapeHTML","scrapeIt","url","opts","cb","err","$","res","body","scrapedData","data","response","_","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,GAAG,GAAGC,OAAO,CAAC,aAAD,CAAjB;AAAA,IACIC,KAAK,GAAGD,OAAO,CAAC,OAAD,CADnB;AAAA,IAEIE,OAAO,GAAGF,OAAO,CAAC,SAAD,CAFrB;AAAA,IAGIG,UAAU,GAAGH,OAAO,CAAC,gBAAD,CAHxB;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASI,QAAT,CAAkBC,GAAlB,EAAuBC,IAAvB,EAA6BC,EAA7B,EAAiC;AAC7BA,EAAAA,EAAE,GAAGL,OAAO,CAACK,EAAD,CAAZ;AACAR,EAAAA,GAAG,CAACM,GAAD,EAAM,UAAUG,GAAV,EAAeC,CAAf,EAAkBC,GAAlB,EAAuBC,IAAvB,EAA6B;AAClC,QAAIH,GAAJ,EAAS;AACL,aAAOD,EAAE,CAACC,GAAD,CAAT;AACH;;AACD,QAAI;AACA,UAAII,WAAW,GAAGR,QAAQ,CAACD,UAAT,CAAoBM,CAApB,EAAuBH,IAAvB,CAAlB;AACAC,MAAAA,EAAE,CAAC,IAAD,EAAO;AACLM,QAAAA,IAAI,EAAED,WADD;AAELH,QAAAA,CAAC,EAAEA,CAFE;AAGLK,QAAAA,QAAQ,EAAEJ,GAHL;AAILC,QAAAA,IAAI,EAAEA;AAJD,OAAP,CAAF;AAMH,KARD,CAQE,OAAOH,GAAP,EAAY;AACVD,MAAAA,EAAE,CAACC,GAAD,CAAF;AACH;AACJ,GAfE,CAAH;AAgBA,SAAOD,EAAE,CAACQ,CAAV;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAX,QAAQ,CAACD,UAAT,GAAsBA,UAAtB;AAEAa,MAAM,CAACC,OAAP,GAAiBb,QAAjB","sourcesContent":["\"use strict\";\r\n\r\nvar req = require(\"cheerio-req\"),\r\n    typpy = require(\"typpy\"),\r\n    assured = require(\"assured\"),\r\n    scrapeHTML = require(\"scrape-it-core\");\r\n\r\n/**\r\n * scrapeIt\r\n * A scraping module for humans.\r\n *\r\n * @name scrapeIt\r\n * @function\r\n * @param {String|Object} url The page url or request options.\r\n * @param {Object} opts The options passed to `scrapeHTML` method.\r\n * @param {Function} cb The callback function.\r\n * @return {Promise} A promise object resolving with:\r\n *\r\n *   - `data` (Object): The scraped data.\r\n *   - `$` (Function): The Cheeerio function. This may be handy to do some other manipulation on the DOM, if needed.\r\n *   - `response` (Object): The response object.\r\n *   - `body` (String): The raw body as a string.\r\n *\r\n */\r\nfunction scrapeIt(url, opts, cb) {\r\n    cb = assured(cb);\r\n    req(url, function (err, $, res, body) {\r\n        if (err) {\r\n            return cb(err);\r\n        }\r\n        try {\r\n            var scrapedData = scrapeIt.scrapeHTML($, opts);\r\n            cb(null, {\r\n                data: scrapedData,\r\n                $: $,\r\n                response: res,\r\n                body: body\r\n            });\r\n        } catch (err) {\r\n            cb(err);\r\n        }\r\n    });\r\n    return cb._;\r\n}\r\n\r\n/**\r\n * scrapeIt.scrapeHTML\r\n * Scrapes the data in the provided element.\r\n *\r\n * For the format of the selector, please refer to the [Selectors section of the Cheerio library](https://github.com/cheeriojs/cheerio#-selector-context-root-)\r\n *\r\n * @name scrapeIt.scrapeHTML\r\n * @function\r\n * @param {Cheerio} $ The input element.\r\n * @param {Object} opts An object containing the scraping information.\r\n *\r\n *   If you want to scrape a list, you have to use the `listItem` selector:\r\n *\r\n *    - `listItem` (String): The list item selector.\r\n *    - `data` (Object): The fields to include in the list objects:\r\n *       - `<fieldName>` (Object|String): The selector or an object containing:\r\n *          - `selector` (String): The selector.\r\n *          - `convert` (Function): An optional function to change the value.\r\n *          - `how` (Function|String): A function or function name to access the\r\n *            value.\r\n *          - `attr` (String): If provided, the value will be taken based on\r\n *            the attribute name.\r\n *          - `trim` (Boolean): If `false`, the value will *not* be trimmed\r\n *            (default: `true`).\r\n *          - `closest` (String): If provided, returns the first ancestor of\r\n *            the given element.\r\n *          - `eq` (Number): If provided, it will select the *nth* element.\r\n *          - `texteq` (Number): If provided, it will select the *nth* direct text child.\r\n *            Deep text child selection is not possible yet.\r\n *            Overwrites the `how` key.\r\n *          - `listItem` (Object): An object, keeping the recursive schema of\r\n *            the `listItem` object. This can be used to create nested lists.\r\n *\r\n *   **Example**:\r\n *   ```js\r\n *   {\r\n *      articles: {\r\n *          listItem: \".article\"\r\n *        , data: {\r\n *              createdAt: {\r\n *                  selector: \".date\"\r\n *                , convert: x => new Date(x)\r\n *              }\r\n *            , title: \"a.article-title\"\r\n *            , tags: {\r\n *                  listItem: \".tags > span\"\r\n *              }\r\n *            , content: {\r\n *                  selector: \".article-content\"\r\n *                , how: \"html\"\r\n *              }\r\n *            , traverseOtherNode: {\r\n *                  selector: \".upperNode\"\r\n *                , closest: \"div\"\r\n *                , convert: x => x.length\r\n *              }\r\n *          }\r\n *      }\r\n *   }\r\n *   ```\r\n *\r\n *   If you want to collect specific data from the page, just use the same\r\n *   schema used for the `data` field.\r\n *\r\n *   **Example**:\r\n *   ```js\r\n *   {\r\n *        title: \".header h1\"\r\n *      , desc: \".header h2\"\r\n *      , avatar: {\r\n *            selector: \".header img\"\r\n *          , attr: \"src\"\r\n *        }\r\n *   }\r\n *   ```\r\n *\r\n * @returns {Object} The scraped data.\r\n */\r\nscrapeIt.scrapeHTML = scrapeHTML;\r\n\r\nmodule.exports = scrapeIt;"]},"metadata":{},"sourceType":"script"}