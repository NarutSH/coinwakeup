{"ast":null,"code":"\"use strict\";\n\nvar noop = require(\"noop6\"),\n    sliced = require(\"sliced\");\n/**\n * assured\n * Proxies the callback function.\n *\n * @name assured\n * @function\n * @param {Function} fn The callback function to proxy.\n * @param {Promise} p A custom promise constructor (default: the built-in `Promise`).\n * @returns {Function} The proxied callback function extended with:\n *\n *  - `resolver` (Function): The promise resolver.\n *  - `assuredResolve` (Function): The resolve method.\n *  - `assuredReject` (Function): The reject method.\n *  - `_` (Promise): The promise object (used to `return` from your function).\n *\n */\n\n\nmodule.exports = function assured(fn, p) {\n  p = p || Promise;\n  fn = fn || noop;\n\n  var res = function res(err) {\n    fn.apply(res, arguments);\n\n    if (err) {\n      res.assuredReject(err);\n    } else {\n      res.assuredResolve.apply(res, sliced(arguments, 1));\n    }\n\n    return res._;\n  };\n\n  res.resolver = function (resolve, reject) {\n    res.assuredResolve = resolve;\n    res.assuredReject = reject;\n  };\n\n  res._ = new p(res.resolver);\n\n  res._.catch(noop);\n\n  return res;\n};","map":{"version":3,"sources":["C:/Users/narut/Documents/Coding/stock-calc/node_modules/assured/lib/index.js"],"names":["noop","require","sliced","module","exports","assured","fn","p","Promise","res","err","apply","arguments","assuredReject","assuredResolve","_","resolver","resolve","reject","catch"],"mappings":"AAAA;;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,OAAD,CAAlB;AAAA,IACIC,MAAM,GAAGD,OAAO,CAAC,QAAD,CADpB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAE,MAAM,CAACC,OAAP,GAAiB,SAASC,OAAT,CAAiBC,EAAjB,EAAqBC,CAArB,EAAwB;AACrCA,EAAAA,CAAC,GAAGA,CAAC,IAAIC,OAAT;AACAF,EAAAA,EAAE,GAAGA,EAAE,IAAIN,IAAX;;AAEA,MAAIS,GAAG,GAAG,SAASA,GAAT,CAAaC,GAAb,EAAkB;AACxBJ,IAAAA,EAAE,CAACK,KAAH,CAASF,GAAT,EAAcG,SAAd;;AACA,QAAIF,GAAJ,EAAS;AACLD,MAAAA,GAAG,CAACI,aAAJ,CAAkBH,GAAlB;AACH,KAFD,MAEO;AACHD,MAAAA,GAAG,CAACK,cAAJ,CAAmBH,KAAnB,CAAyBF,GAAzB,EAA8BP,MAAM,CAACU,SAAD,EAAY,CAAZ,CAApC;AACH;;AACD,WAAOH,GAAG,CAACM,CAAX;AACH,GARD;;AAUAN,EAAAA,GAAG,CAACO,QAAJ,GAAe,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AACtCT,IAAAA,GAAG,CAACK,cAAJ,GAAqBG,OAArB;AACAR,IAAAA,GAAG,CAACI,aAAJ,GAAoBK,MAApB;AACH,GAHD;;AAKAT,EAAAA,GAAG,CAACM,CAAJ,GAAQ,IAAIR,CAAJ,CAAME,GAAG,CAACO,QAAV,CAAR;;AACAP,EAAAA,GAAG,CAACM,CAAJ,CAAMI,KAAN,CAAYnB,IAAZ;;AACA,SAAOS,GAAP;AACH,CAtBD","sourcesContent":["\"use strict\";\n\nvar noop = require(\"noop6\"),\n    sliced = require(\"sliced\");\n\n/**\n * assured\n * Proxies the callback function.\n *\n * @name assured\n * @function\n * @param {Function} fn The callback function to proxy.\n * @param {Promise} p A custom promise constructor (default: the built-in `Promise`).\n * @returns {Function} The proxied callback function extended with:\n *\n *  - `resolver` (Function): The promise resolver.\n *  - `assuredResolve` (Function): The resolve method.\n *  - `assuredReject` (Function): The reject method.\n *  - `_` (Promise): The promise object (used to `return` from your function).\n *\n */\nmodule.exports = function assured(fn, p) {\n    p = p || Promise;\n    fn = fn || noop;\n\n    var res = function res(err) {\n        fn.apply(res, arguments);\n        if (err) {\n            res.assuredReject(err);\n        } else {\n            res.assuredResolve.apply(res, sliced(arguments, 1));\n        }\n        return res._;\n    };\n\n    res.resolver = function (resolve, reject) {\n        res.assuredResolve = resolve;\n        res.assuredReject = reject;\n    };\n\n    res._ = new p(res.resolver);\n    res._.catch(noop);\n    return res;\n};"]},"metadata":{},"sourceType":"script"}