{"ast":null,"code":"\"use strict\";\n\nvar regexEscape = require(\"regex-escape\"),\n    typpy = require(\"typpy\"),\n    iterateObject = require(\"iterate-object\");\n/**\r\n * barbe\r\n * Renders the input template including the data.\r\n *\r\n * @name barbe\r\n * @function\r\n * @param {String} text The template text.\r\n * @param {Array} arr An array of two elements: the first one being the start snippet (default: `\"{\"`) and the second one being the end snippet (default: `\"}\"`).\r\n * @param {Object} data The template data.\r\n * @return {String} The rendered template.\r\n */\n\n\nfunction barbe(text, arr, data) {\n  if (!Array.isArray(arr)) {\n    data = arr;\n    arr = [\"{\", \"}\"];\n  }\n\n  if (!data || data.constructor !== Object) {\n    return text;\n  }\n\n  arr = arr.map(regexEscape);\n\n  var deep = function deep(obj, path) {\n    iterateObject(obj, function (value, c) {\n      path.push(c);\n\n      if (typpy(value, Object)) {\n        deep(value, path);\n        path.pop();\n        return;\n      }\n\n      text = text.replace(new RegExp(arr[0] + path.join(\".\") + arr[1], \"gm\"), typpy(value, Function) ? value : String(value));\n      path.pop();\n    });\n  };\n\n  deep(data, []);\n  return text;\n}\n\nmodule.exports = barbe;","map":{"version":3,"sources":["C:/Users/narut/Documents/Coding/coindy/node_modules/barbe/lib/index.js"],"names":["regexEscape","require","typpy","iterateObject","barbe","text","arr","data","Array","isArray","constructor","Object","map","deep","obj","path","value","c","push","pop","replace","RegExp","join","Function","String","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,WAAW,GAAGC,OAAO,CAAC,cAAD,CAAzB;AAAA,IACIC,KAAK,GAAGD,OAAO,CAAC,OAAD,CADnB;AAAA,IAEIE,aAAa,GAAGF,OAAO,CAAC,gBAAD,CAF3B;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,KAAT,CAAeC,IAAf,EAAqBC,GAArB,EAA0BC,IAA1B,EAAgC;AAC5B,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcH,GAAd,CAAL,EAAyB;AACrBC,IAAAA,IAAI,GAAGD,GAAP;AACAA,IAAAA,GAAG,GAAG,CAAC,GAAD,EAAM,GAAN,CAAN;AACH;;AAED,MAAI,CAACC,IAAD,IAASA,IAAI,CAACG,WAAL,KAAqBC,MAAlC,EAA0C;AACtC,WAAON,IAAP;AACH;;AAEDC,EAAAA,GAAG,GAAGA,GAAG,CAACM,GAAJ,CAAQZ,WAAR,CAAN;;AAEA,MAAIa,IAAI,GAAG,SAASA,IAAT,CAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AAChCZ,IAAAA,aAAa,CAACW,GAAD,EAAM,UAAUE,KAAV,EAAiBC,CAAjB,EAAoB;AACnCF,MAAAA,IAAI,CAACG,IAAL,CAAUD,CAAV;;AACA,UAAIf,KAAK,CAACc,KAAD,EAAQL,MAAR,CAAT,EAA0B;AACtBE,QAAAA,IAAI,CAACG,KAAD,EAAQD,IAAR,CAAJ;AACAA,QAAAA,IAAI,CAACI,GAAL;AACA;AACH;;AACDd,MAAAA,IAAI,GAAGA,IAAI,CAACe,OAAL,CAAa,IAAIC,MAAJ,CAAWf,GAAG,CAAC,CAAD,CAAH,GAASS,IAAI,CAACO,IAAL,CAAU,GAAV,CAAT,GAA0BhB,GAAG,CAAC,CAAD,CAAxC,EAA6C,IAA7C,CAAb,EAAiEJ,KAAK,CAACc,KAAD,EAAQO,QAAR,CAAL,GAAyBP,KAAzB,GAAiCQ,MAAM,CAACR,KAAD,CAAxG,CAAP;AACAD,MAAAA,IAAI,CAACI,GAAL;AACH,KATY,CAAb;AAUH,GAXD;;AAaAN,EAAAA,IAAI,CAACN,IAAD,EAAO,EAAP,CAAJ;AAEA,SAAOF,IAAP;AACH;;AAEDoB,MAAM,CAACC,OAAP,GAAiBtB,KAAjB","sourcesContent":["\"use strict\";\r\n\r\nvar regexEscape = require(\"regex-escape\"),\r\n    typpy = require(\"typpy\"),\r\n    iterateObject = require(\"iterate-object\");\r\n\r\n/**\r\n * barbe\r\n * Renders the input template including the data.\r\n *\r\n * @name barbe\r\n * @function\r\n * @param {String} text The template text.\r\n * @param {Array} arr An array of two elements: the first one being the start snippet (default: `\"{\"`) and the second one being the end snippet (default: `\"}\"`).\r\n * @param {Object} data The template data.\r\n * @return {String} The rendered template.\r\n */\r\nfunction barbe(text, arr, data) {\r\n    if (!Array.isArray(arr)) {\r\n        data = arr;\r\n        arr = [\"{\", \"}\"];\r\n    }\r\n\r\n    if (!data || data.constructor !== Object) {\r\n        return text;\r\n    }\r\n\r\n    arr = arr.map(regexEscape);\r\n\r\n    var deep = function deep(obj, path) {\r\n        iterateObject(obj, function (value, c) {\r\n            path.push(c);\r\n            if (typpy(value, Object)) {\r\n                deep(value, path);\r\n                path.pop();\r\n                return;\r\n            }\r\n            text = text.replace(new RegExp(arr[0] + path.join(\".\") + arr[1], \"gm\"), typpy(value, Function) ? value : String(value));\r\n            path.pop();\r\n        });\r\n    };\r\n\r\n    deep(data, []);\r\n\r\n    return text;\r\n}\r\n\r\nmodule.exports = barbe;"]},"metadata":{},"sourceType":"script"}