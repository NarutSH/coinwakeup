{"ast":null,"code":"\"use strict\";\n\nrequire(\"function.name\");\n/**\r\n * Typpy\r\n * Gets the type of the input value or compares it\r\n * with a provided type.\r\n *\r\n * Usage:\r\n *\r\n * ```js\r\n * Typpy({}) // => \"object\"\r\n * Typpy(42, Number); // => true\r\n * Typpy.get([], \"array\"); => true\r\n * ```\r\n *\r\n * @name Typpy\r\n * @function\r\n * @param {Anything} input The input value.\r\n * @param {Constructor|String} target The target type.\r\n * It could be a string (e.g. `\"array\"`) or a\r\n * constructor (e.g. `Array`).\r\n * @return {String|Boolean} It returns `true` if the\r\n * input has the provided type `target` (if was provided),\r\n * `false` if the input type does *not* have the provided type\r\n * `target` or the stringified type of the input (always lowercase).\r\n */\n\n\nfunction Typpy(input, target) {\n  if (arguments.length === 2) {\n    return Typpy.is(input, target);\n  }\n\n  return Typpy.get(input, true);\n}\n/**\r\n * Typpy.is\r\n * Checks if the input value has a specified type.\r\n *\r\n * @name Typpy.is\r\n * @function\r\n * @param {Anything} input The input value.\r\n * @param {Constructor|String} target The target type.\r\n * It could be a string (e.g. `\"array\"`) or a\r\n * constructor (e.g. `Array`).\r\n * @return {Boolean} `true`, if the input has the same\r\n * type with the target or `false` otherwise.\r\n */\n\n\nTyppy.is = function (input, target) {\n  return Typpy.get(input, typeof target === \"string\") === target;\n};\n/**\r\n * Typpy.get\r\n * Gets the type of the input value. This is used internally.\r\n *\r\n * @name Typpy.get\r\n * @function\r\n * @param {Anything} input The input value.\r\n * @param {Boolean} str A flag to indicate if the return value\r\n * should be a string or not.\r\n * @return {Constructor|String} The input value constructor\r\n * (if any) or the stringified type (always lowercase).\r\n */\n\n\nTyppy.get = function (input, str) {\n  if (typeof input === \"string\") {\n    return str ? \"string\" : String;\n  }\n\n  if (null === input) {\n    return str ? \"null\" : null;\n  }\n\n  if (undefined === input) {\n    return str ? \"undefined\" : undefined;\n  }\n\n  if (input !== input) {\n    return str ? \"nan\" : NaN;\n  }\n\n  return str ? input.constructor.name.toLowerCase() : input.constructor;\n};\n\nmodule.exports = Typpy;","map":{"version":3,"sources":["C:/Users/narut/Documents/Coding/stock-valuate/node_modules/typpy/lib/index.js"],"names":["require","Typpy","input","target","arguments","length","is","get","str","String","undefined","NaN","constructor","name","toLowerCase","module","exports"],"mappings":"AAAA;;AAEAA,OAAO,CAAC,eAAD,CAAP;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,KAAT,CAAeC,KAAf,EAAsBC,MAAtB,EAA8B;AAC1B,MAAIC,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AACxB,WAAOJ,KAAK,CAACK,EAAN,CAASJ,KAAT,EAAgBC,MAAhB,CAAP;AACH;;AACD,SAAOF,KAAK,CAACM,GAAN,CAAUL,KAAV,EAAiB,IAAjB,CAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAD,KAAK,CAACK,EAAN,GAAW,UAAUJ,KAAV,EAAiBC,MAAjB,EAAyB;AAChC,SAAOF,KAAK,CAACM,GAAN,CAAUL,KAAV,EAAiB,OAAOC,MAAP,KAAkB,QAAnC,MAAiDA,MAAxD;AACH,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAF,KAAK,CAACM,GAAN,GAAY,UAAUL,KAAV,EAAiBM,GAAjB,EAAsB;AAE9B,MAAI,OAAON,KAAP,KAAiB,QAArB,EAA+B;AAC3B,WAAOM,GAAG,GAAG,QAAH,GAAcC,MAAxB;AACH;;AAED,MAAI,SAASP,KAAb,EAAoB;AAChB,WAAOM,GAAG,GAAG,MAAH,GAAY,IAAtB;AACH;;AAED,MAAIE,SAAS,KAAKR,KAAlB,EAAyB;AACrB,WAAOM,GAAG,GAAG,WAAH,GAAiBE,SAA3B;AACH;;AAED,MAAIR,KAAK,KAAKA,KAAd,EAAqB;AACjB,WAAOM,GAAG,GAAG,KAAH,GAAWG,GAArB;AACH;;AAED,SAAOH,GAAG,GAAGN,KAAK,CAACU,WAAN,CAAkBC,IAAlB,CAAuBC,WAAvB,EAAH,GAA0CZ,KAAK,CAACU,WAA1D;AACH,CAnBD;;AAqBAG,MAAM,CAACC,OAAP,GAAiBf,KAAjB","sourcesContent":["\"use strict\";\r\n\r\nrequire(\"function.name\");\r\n\r\n/**\r\n * Typpy\r\n * Gets the type of the input value or compares it\r\n * with a provided type.\r\n *\r\n * Usage:\r\n *\r\n * ```js\r\n * Typpy({}) // => \"object\"\r\n * Typpy(42, Number); // => true\r\n * Typpy.get([], \"array\"); => true\r\n * ```\r\n *\r\n * @name Typpy\r\n * @function\r\n * @param {Anything} input The input value.\r\n * @param {Constructor|String} target The target type.\r\n * It could be a string (e.g. `\"array\"`) or a\r\n * constructor (e.g. `Array`).\r\n * @return {String|Boolean} It returns `true` if the\r\n * input has the provided type `target` (if was provided),\r\n * `false` if the input type does *not* have the provided type\r\n * `target` or the stringified type of the input (always lowercase).\r\n */\r\nfunction Typpy(input, target) {\r\n    if (arguments.length === 2) {\r\n        return Typpy.is(input, target);\r\n    }\r\n    return Typpy.get(input, true);\r\n}\r\n\r\n/**\r\n * Typpy.is\r\n * Checks if the input value has a specified type.\r\n *\r\n * @name Typpy.is\r\n * @function\r\n * @param {Anything} input The input value.\r\n * @param {Constructor|String} target The target type.\r\n * It could be a string (e.g. `\"array\"`) or a\r\n * constructor (e.g. `Array`).\r\n * @return {Boolean} `true`, if the input has the same\r\n * type with the target or `false` otherwise.\r\n */\r\nTyppy.is = function (input, target) {\r\n    return Typpy.get(input, typeof target === \"string\") === target;\r\n};\r\n\r\n/**\r\n * Typpy.get\r\n * Gets the type of the input value. This is used internally.\r\n *\r\n * @name Typpy.get\r\n * @function\r\n * @param {Anything} input The input value.\r\n * @param {Boolean} str A flag to indicate if the return value\r\n * should be a string or not.\r\n * @return {Constructor|String} The input value constructor\r\n * (if any) or the stringified type (always lowercase).\r\n */\r\nTyppy.get = function (input, str) {\r\n\r\n    if (typeof input === \"string\") {\r\n        return str ? \"string\" : String;\r\n    }\r\n\r\n    if (null === input) {\r\n        return str ? \"null\" : null;\r\n    }\r\n\r\n    if (undefined === input) {\r\n        return str ? \"undefined\" : undefined;\r\n    }\r\n\r\n    if (input !== input) {\r\n        return str ? \"nan\" : NaN;\r\n    }\r\n\r\n    return str ? input.constructor.name.toLowerCase() : input.constructor;\r\n};\r\n\r\nmodule.exports = Typpy;"]},"metadata":{},"sourceType":"script"}