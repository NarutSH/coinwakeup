{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:/Users/narut/Documents/Coding/coindy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/narut/Documents/Coding/coindy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar doctype = require('parse5/lib/common/doctype');\n\nvar _require = require('parse5/lib/common/html'),\n    DOCUMENT_MODE = _require.DOCUMENT_MODE; //Conversion tables for DOM Level1 structure emulation\n\n\nvar nodeTypes = {\n  element: 1,\n  text: 3,\n  cdata: 4,\n  comment: 8\n};\nvar nodePropertyShorthands = {\n  tagName: 'name',\n  childNodes: 'children',\n  parentNode: 'parent',\n  previousSibling: 'prev',\n  nextSibling: 'next',\n  nodeValue: 'data'\n}; //Node\n\nvar Node = /*#__PURE__*/function () {\n  function Node(props) {\n    _classCallCheck(this, Node);\n\n    for (var _i = 0, _Object$keys = Object.keys(props); _i < _Object$keys.length; _i++) {\n      var key = _Object$keys[_i];\n      this[key] = props[key];\n    }\n  }\n\n  _createClass(Node, [{\n    key: \"firstChild\",\n    get: function get() {\n      var children = this.children;\n      return children && children[0] || null;\n    }\n  }, {\n    key: \"lastChild\",\n    get: function get() {\n      var children = this.children;\n      return children && children[children.length - 1] || null;\n    }\n  }, {\n    key: \"nodeType\",\n    get: function get() {\n      return nodeTypes[this.type] || nodeTypes.element;\n    }\n  }]);\n\n  return Node;\n}();\n\nObject.keys(nodePropertyShorthands).forEach(function (key) {\n  var shorthand = nodePropertyShorthands[key];\n  Object.defineProperty(Node.prototype, key, {\n    get: function get() {\n      return this[shorthand] || null;\n    },\n    set: function set(val) {\n      this[shorthand] = val;\n      return val;\n    }\n  });\n}); //Node construction\n\nexports.createDocument = function () {\n  return new Node({\n    type: 'root',\n    name: 'root',\n    parent: null,\n    prev: null,\n    next: null,\n    children: [],\n    'x-mode': DOCUMENT_MODE.NO_QUIRKS\n  });\n};\n\nexports.createDocumentFragment = function () {\n  return new Node({\n    type: 'root',\n    name: 'root',\n    parent: null,\n    prev: null,\n    next: null,\n    children: []\n  });\n};\n\nexports.createElement = function (tagName, namespaceURI, attrs) {\n  var attribs = Object.create(null);\n  var attribsNamespace = Object.create(null);\n  var attribsPrefix = Object.create(null);\n\n  for (var i = 0; i < attrs.length; i++) {\n    var attrName = attrs[i].name;\n    attribs[attrName] = attrs[i].value;\n    attribsNamespace[attrName] = attrs[i].namespace;\n    attribsPrefix[attrName] = attrs[i].prefix;\n  }\n\n  return new Node({\n    type: tagName === 'script' || tagName === 'style' ? tagName : 'tag',\n    name: tagName,\n    namespace: namespaceURI,\n    attribs: attribs,\n    'x-attribsNamespace': attribsNamespace,\n    'x-attribsPrefix': attribsPrefix,\n    children: [],\n    parent: null,\n    prev: null,\n    next: null\n  });\n};\n\nexports.createCommentNode = function (data) {\n  return new Node({\n    type: 'comment',\n    data: data,\n    parent: null,\n    prev: null,\n    next: null\n  });\n};\n\nvar createTextNode = function createTextNode(value) {\n  return new Node({\n    type: 'text',\n    data: value,\n    parent: null,\n    prev: null,\n    next: null\n  });\n}; //Tree mutation\n\n\nvar appendChild = exports.appendChild = function (parentNode, newNode) {\n  var prev = parentNode.children[parentNode.children.length - 1];\n\n  if (prev) {\n    prev.next = newNode;\n    newNode.prev = prev;\n  }\n\n  parentNode.children.push(newNode);\n  newNode.parent = parentNode;\n};\n\nvar insertBefore = exports.insertBefore = function (parentNode, newNode, referenceNode) {\n  var insertionIdx = parentNode.children.indexOf(referenceNode);\n  var prev = referenceNode.prev;\n\n  if (prev) {\n    prev.next = newNode;\n    newNode.prev = prev;\n  }\n\n  referenceNode.prev = newNode;\n  newNode.next = referenceNode;\n  parentNode.children.splice(insertionIdx, 0, newNode);\n  newNode.parent = parentNode;\n};\n\nexports.setTemplateContent = function (templateElement, contentElement) {\n  appendChild(templateElement, contentElement);\n};\n\nexports.getTemplateContent = function (templateElement) {\n  return templateElement.children[0];\n};\n\nexports.setDocumentType = function (document, name, publicId, systemId) {\n  var data = doctype.serializeContent(name, publicId, systemId);\n  var doctypeNode = null;\n\n  for (var i = 0; i < document.children.length; i++) {\n    if (document.children[i].type === 'directive' && document.children[i].name === '!doctype') {\n      doctypeNode = document.children[i];\n      break;\n    }\n  }\n\n  if (doctypeNode) {\n    doctypeNode.data = data;\n    doctypeNode['x-name'] = name;\n    doctypeNode['x-publicId'] = publicId;\n    doctypeNode['x-systemId'] = systemId;\n  } else {\n    appendChild(document, new Node({\n      type: 'directive',\n      name: '!doctype',\n      data: data,\n      'x-name': name,\n      'x-publicId': publicId,\n      'x-systemId': systemId\n    }));\n  }\n};\n\nexports.setDocumentMode = function (document, mode) {\n  document['x-mode'] = mode;\n};\n\nexports.getDocumentMode = function (document) {\n  return document['x-mode'];\n};\n\nexports.detachNode = function (node) {\n  if (node.parent) {\n    var idx = node.parent.children.indexOf(node);\n    var prev = node.prev;\n    var next = node.next;\n    node.prev = null;\n    node.next = null;\n\n    if (prev) {\n      prev.next = next;\n    }\n\n    if (next) {\n      next.prev = prev;\n    }\n\n    node.parent.children.splice(idx, 1);\n    node.parent = null;\n  }\n};\n\nexports.insertText = function (parentNode, text) {\n  var lastChild = parentNode.children[parentNode.children.length - 1];\n\n  if (lastChild && lastChild.type === 'text') {\n    lastChild.data += text;\n  } else {\n    appendChild(parentNode, createTextNode(text));\n  }\n};\n\nexports.insertTextBefore = function (parentNode, text, referenceNode) {\n  var prevNode = parentNode.children[parentNode.children.indexOf(referenceNode) - 1];\n\n  if (prevNode && prevNode.type === 'text') {\n    prevNode.data += text;\n  } else {\n    insertBefore(parentNode, createTextNode(text), referenceNode);\n  }\n};\n\nexports.adoptAttributes = function (recipient, attrs) {\n  for (var i = 0; i < attrs.length; i++) {\n    var attrName = attrs[i].name;\n\n    if (typeof recipient.attribs[attrName] === 'undefined') {\n      recipient.attribs[attrName] = attrs[i].value;\n      recipient['x-attribsNamespace'][attrName] = attrs[i].namespace;\n      recipient['x-attribsPrefix'][attrName] = attrs[i].prefix;\n    }\n  }\n}; //Tree traversing\n\n\nexports.getFirstChild = function (node) {\n  return node.children[0];\n};\n\nexports.getChildNodes = function (node) {\n  return node.children;\n};\n\nexports.getParentNode = function (node) {\n  return node.parent;\n};\n\nexports.getAttrList = function (element) {\n  var attrList = [];\n\n  for (var name in element.attribs) {\n    attrList.push({\n      name: name,\n      value: element.attribs[name],\n      namespace: element['x-attribsNamespace'][name],\n      prefix: element['x-attribsPrefix'][name]\n    });\n  }\n\n  return attrList;\n}; //Node data\n\n\nexports.getTagName = function (element) {\n  return element.name;\n};\n\nexports.getNamespaceURI = function (element) {\n  return element.namespace;\n};\n\nexports.getTextNodeContent = function (textNode) {\n  return textNode.data;\n};\n\nexports.getCommentNodeContent = function (commentNode) {\n  return commentNode.data;\n};\n\nexports.getDocumentTypeNodeName = function (doctypeNode) {\n  return doctypeNode['x-name'];\n};\n\nexports.getDocumentTypeNodePublicId = function (doctypeNode) {\n  return doctypeNode['x-publicId'];\n};\n\nexports.getDocumentTypeNodeSystemId = function (doctypeNode) {\n  return doctypeNode['x-systemId'];\n}; //Node types\n\n\nexports.isTextNode = function (node) {\n  return node.type === 'text';\n};\n\nexports.isCommentNode = function (node) {\n  return node.type === 'comment';\n};\n\nexports.isDocumentTypeNode = function (node) {\n  return node.type === 'directive' && node.name === '!doctype';\n};\n\nexports.isElementNode = function (node) {\n  return !!node.attribs;\n}; // Source code location\n\n\nexports.setNodeSourceCodeLocation = function (node, location) {\n  node.sourceCodeLocation = location;\n};\n\nexports.getNodeSourceCodeLocation = function (node) {\n  return node.sourceCodeLocation;\n};\n\nexports.updateNodeSourceCodeLocation = function (node, endLocation) {\n  node.sourceCodeLocation = Object.assign(node.sourceCodeLocation, endLocation);\n};","map":{"version":3,"sources":["C:/Users/narut/Documents/Coding/coindy/node_modules/parse5-htmlparser2-tree-adapter/lib/index.js"],"names":["doctype","require","DOCUMENT_MODE","nodeTypes","element","text","cdata","comment","nodePropertyShorthands","tagName","childNodes","parentNode","previousSibling","nextSibling","nodeValue","Node","props","Object","keys","key","children","length","type","forEach","shorthand","defineProperty","prototype","get","set","val","exports","createDocument","name","parent","prev","next","NO_QUIRKS","createDocumentFragment","createElement","namespaceURI","attrs","attribs","create","attribsNamespace","attribsPrefix","i","attrName","value","namespace","prefix","createCommentNode","data","createTextNode","appendChild","newNode","push","insertBefore","referenceNode","insertionIdx","indexOf","splice","setTemplateContent","templateElement","contentElement","getTemplateContent","setDocumentType","document","publicId","systemId","serializeContent","doctypeNode","setDocumentMode","mode","getDocumentMode","detachNode","node","idx","insertText","lastChild","insertTextBefore","prevNode","adoptAttributes","recipient","getFirstChild","getChildNodes","getParentNode","getAttrList","attrList","getTagName","getNamespaceURI","getTextNodeContent","textNode","getCommentNodeContent","commentNode","getDocumentTypeNodeName","getDocumentTypeNodePublicId","getDocumentTypeNodeSystemId","isTextNode","isCommentNode","isDocumentTypeNode","isElementNode","setNodeSourceCodeLocation","location","sourceCodeLocation","getNodeSourceCodeLocation","updateNodeSourceCodeLocation","endLocation","assign"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nconst doctype = require('parse5/lib/common/doctype');\r\nconst { DOCUMENT_MODE } = require('parse5/lib/common/html');\r\n\r\n//Conversion tables for DOM Level1 structure emulation\r\nconst nodeTypes = {\r\n    element: 1,\r\n    text: 3,\r\n    cdata: 4,\r\n    comment: 8\r\n};\r\n\r\nconst nodePropertyShorthands = {\r\n    tagName: 'name',\r\n    childNodes: 'children',\r\n    parentNode: 'parent',\r\n    previousSibling: 'prev',\r\n    nextSibling: 'next',\r\n    nodeValue: 'data'\r\n};\r\n\r\n//Node\r\nclass Node {\r\n    constructor(props) {\r\n        for (const key of Object.keys(props)) {\r\n            this[key] = props[key];\r\n        }\r\n    }\r\n\r\n    get firstChild() {\r\n        const children = this.children;\r\n\r\n        return (children && children[0]) || null;\r\n    }\r\n\r\n    get lastChild() {\r\n        const children = this.children;\r\n\r\n        return (children && children[children.length - 1]) || null;\r\n    }\r\n\r\n    get nodeType() {\r\n        return nodeTypes[this.type] || nodeTypes.element;\r\n    }\r\n}\r\n\r\nObject.keys(nodePropertyShorthands).forEach(key => {\r\n    const shorthand = nodePropertyShorthands[key];\r\n\r\n    Object.defineProperty(Node.prototype, key, {\r\n        get: function() {\r\n            return this[shorthand] || null;\r\n        },\r\n        set: function(val) {\r\n            this[shorthand] = val;\r\n            return val;\r\n        }\r\n    });\r\n});\r\n\r\n//Node construction\r\nexports.createDocument = function() {\r\n    return new Node({\r\n        type: 'root',\r\n        name: 'root',\r\n        parent: null,\r\n        prev: null,\r\n        next: null,\r\n        children: [],\r\n        'x-mode': DOCUMENT_MODE.NO_QUIRKS\r\n    });\r\n};\r\n\r\nexports.createDocumentFragment = function() {\r\n    return new Node({\r\n        type: 'root',\r\n        name: 'root',\r\n        parent: null,\r\n        prev: null,\r\n        next: null,\r\n        children: []\r\n    });\r\n};\r\n\r\nexports.createElement = function(tagName, namespaceURI, attrs) {\r\n    const attribs = Object.create(null);\r\n    const attribsNamespace = Object.create(null);\r\n    const attribsPrefix = Object.create(null);\r\n\r\n    for (let i = 0; i < attrs.length; i++) {\r\n        const attrName = attrs[i].name;\r\n\r\n        attribs[attrName] = attrs[i].value;\r\n        attribsNamespace[attrName] = attrs[i].namespace;\r\n        attribsPrefix[attrName] = attrs[i].prefix;\r\n    }\r\n\r\n    return new Node({\r\n        type: tagName === 'script' || tagName === 'style' ? tagName : 'tag',\r\n        name: tagName,\r\n        namespace: namespaceURI,\r\n        attribs: attribs,\r\n        'x-attribsNamespace': attribsNamespace,\r\n        'x-attribsPrefix': attribsPrefix,\r\n        children: [],\r\n        parent: null,\r\n        prev: null,\r\n        next: null\r\n    });\r\n};\r\n\r\nexports.createCommentNode = function(data) {\r\n    return new Node({\r\n        type: 'comment',\r\n        data: data,\r\n        parent: null,\r\n        prev: null,\r\n        next: null\r\n    });\r\n};\r\n\r\nconst createTextNode = function(value) {\r\n    return new Node({\r\n        type: 'text',\r\n        data: value,\r\n        parent: null,\r\n        prev: null,\r\n        next: null\r\n    });\r\n};\r\n\r\n//Tree mutation\r\nconst appendChild = (exports.appendChild = function(parentNode, newNode) {\r\n    const prev = parentNode.children[parentNode.children.length - 1];\r\n\r\n    if (prev) {\r\n        prev.next = newNode;\r\n        newNode.prev = prev;\r\n    }\r\n\r\n    parentNode.children.push(newNode);\r\n    newNode.parent = parentNode;\r\n});\r\n\r\nconst insertBefore = (exports.insertBefore = function(parentNode, newNode, referenceNode) {\r\n    const insertionIdx = parentNode.children.indexOf(referenceNode);\r\n    const prev = referenceNode.prev;\r\n\r\n    if (prev) {\r\n        prev.next = newNode;\r\n        newNode.prev = prev;\r\n    }\r\n\r\n    referenceNode.prev = newNode;\r\n    newNode.next = referenceNode;\r\n\r\n    parentNode.children.splice(insertionIdx, 0, newNode);\r\n    newNode.parent = parentNode;\r\n});\r\n\r\nexports.setTemplateContent = function(templateElement, contentElement) {\r\n    appendChild(templateElement, contentElement);\r\n};\r\n\r\nexports.getTemplateContent = function(templateElement) {\r\n    return templateElement.children[0];\r\n};\r\n\r\nexports.setDocumentType = function(document, name, publicId, systemId) {\r\n    const data = doctype.serializeContent(name, publicId, systemId);\r\n    let doctypeNode = null;\r\n\r\n    for (let i = 0; i < document.children.length; i++) {\r\n        if (document.children[i].type === 'directive' && document.children[i].name === '!doctype') {\r\n            doctypeNode = document.children[i];\r\n            break;\r\n        }\r\n    }\r\n\r\n    if (doctypeNode) {\r\n        doctypeNode.data = data;\r\n        doctypeNode['x-name'] = name;\r\n        doctypeNode['x-publicId'] = publicId;\r\n        doctypeNode['x-systemId'] = systemId;\r\n    } else {\r\n        appendChild(\r\n            document,\r\n            new Node({\r\n                type: 'directive',\r\n                name: '!doctype',\r\n                data: data,\r\n                'x-name': name,\r\n                'x-publicId': publicId,\r\n                'x-systemId': systemId\r\n            })\r\n        );\r\n    }\r\n};\r\n\r\nexports.setDocumentMode = function(document, mode) {\r\n    document['x-mode'] = mode;\r\n};\r\n\r\nexports.getDocumentMode = function(document) {\r\n    return document['x-mode'];\r\n};\r\n\r\nexports.detachNode = function(node) {\r\n    if (node.parent) {\r\n        const idx = node.parent.children.indexOf(node);\r\n        const prev = node.prev;\r\n        const next = node.next;\r\n\r\n        node.prev = null;\r\n        node.next = null;\r\n\r\n        if (prev) {\r\n            prev.next = next;\r\n        }\r\n\r\n        if (next) {\r\n            next.prev = prev;\r\n        }\r\n\r\n        node.parent.children.splice(idx, 1);\r\n        node.parent = null;\r\n    }\r\n};\r\n\r\nexports.insertText = function(parentNode, text) {\r\n    const lastChild = parentNode.children[parentNode.children.length - 1];\r\n\r\n    if (lastChild && lastChild.type === 'text') {\r\n        lastChild.data += text;\r\n    } else {\r\n        appendChild(parentNode, createTextNode(text));\r\n    }\r\n};\r\n\r\nexports.insertTextBefore = function(parentNode, text, referenceNode) {\r\n    const prevNode = parentNode.children[parentNode.children.indexOf(referenceNode) - 1];\r\n\r\n    if (prevNode && prevNode.type === 'text') {\r\n        prevNode.data += text;\r\n    } else {\r\n        insertBefore(parentNode, createTextNode(text), referenceNode);\r\n    }\r\n};\r\n\r\nexports.adoptAttributes = function(recipient, attrs) {\r\n    for (let i = 0; i < attrs.length; i++) {\r\n        const attrName = attrs[i].name;\r\n\r\n        if (typeof recipient.attribs[attrName] === 'undefined') {\r\n            recipient.attribs[attrName] = attrs[i].value;\r\n            recipient['x-attribsNamespace'][attrName] = attrs[i].namespace;\r\n            recipient['x-attribsPrefix'][attrName] = attrs[i].prefix;\r\n        }\r\n    }\r\n};\r\n\r\n//Tree traversing\r\nexports.getFirstChild = function(node) {\r\n    return node.children[0];\r\n};\r\n\r\nexports.getChildNodes = function(node) {\r\n    return node.children;\r\n};\r\n\r\nexports.getParentNode = function(node) {\r\n    return node.parent;\r\n};\r\n\r\nexports.getAttrList = function(element) {\r\n    const attrList = [];\r\n\r\n    for (const name in element.attribs) {\r\n        attrList.push({\r\n            name: name,\r\n            value: element.attribs[name],\r\n            namespace: element['x-attribsNamespace'][name],\r\n            prefix: element['x-attribsPrefix'][name]\r\n        });\r\n    }\r\n\r\n    return attrList;\r\n};\r\n\r\n//Node data\r\nexports.getTagName = function(element) {\r\n    return element.name;\r\n};\r\n\r\nexports.getNamespaceURI = function(element) {\r\n    return element.namespace;\r\n};\r\n\r\nexports.getTextNodeContent = function(textNode) {\r\n    return textNode.data;\r\n};\r\n\r\nexports.getCommentNodeContent = function(commentNode) {\r\n    return commentNode.data;\r\n};\r\n\r\nexports.getDocumentTypeNodeName = function(doctypeNode) {\r\n    return doctypeNode['x-name'];\r\n};\r\n\r\nexports.getDocumentTypeNodePublicId = function(doctypeNode) {\r\n    return doctypeNode['x-publicId'];\r\n};\r\n\r\nexports.getDocumentTypeNodeSystemId = function(doctypeNode) {\r\n    return doctypeNode['x-systemId'];\r\n};\r\n\r\n//Node types\r\nexports.isTextNode = function(node) {\r\n    return node.type === 'text';\r\n};\r\n\r\nexports.isCommentNode = function(node) {\r\n    return node.type === 'comment';\r\n};\r\n\r\nexports.isDocumentTypeNode = function(node) {\r\n    return node.type === 'directive' && node.name === '!doctype';\r\n};\r\n\r\nexports.isElementNode = function(node) {\r\n    return !!node.attribs;\r\n};\r\n\r\n// Source code location\r\nexports.setNodeSourceCodeLocation = function(node, location) {\r\n    node.sourceCodeLocation = location;\r\n};\r\n\r\nexports.getNodeSourceCodeLocation = function(node) {\r\n    return node.sourceCodeLocation;\r\n};\r\n\r\nexports.updateNodeSourceCodeLocation = function(node, endLocation) {\r\n    node.sourceCodeLocation = Object.assign(node.sourceCodeLocation, endLocation);\r\n};\r\n"]},"metadata":{},"sourceType":"script"}