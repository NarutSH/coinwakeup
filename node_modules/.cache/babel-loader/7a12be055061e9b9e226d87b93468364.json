{"ast":null,"code":"\"use strict\";\n\nvar http = require('follow-redirects').http,\n    https = require('follow-redirects').https,\n    ul = require(\"ul\"),\n    url = require(\"url\"),\n    queryString = require(\"querystring\"),\n    events = require(\"events\"),\n    EventEmitter = events.EventEmitter,\n    assured = require(\"assured\"),\n    noop = require(\"noop6\"),\n    zlib = require(\"zlib\");\n/**\r\n * tinyreq\r\n * Creates http(s) requests.\r\n *\r\n * @name tinyreq\r\n * @function\r\n * @param {String|Object} options A string being the request url or an object containing the following fields:\r\n *\r\n *  - `url` (String): The request url.\r\n *  - `method` (String): The request method.\r\n *  - `data` (Object): The request POST data.\r\n *  - `encoding` (String): The response encoding type.\r\n *  - `data_encoding` (String): The request encoding type.\r\n *\r\n * @param {Function} callback The callback function called (with `error` and `data` parameters).\r\n * @return {EventEmitter} An event emitter you can use for listening for the `data`, `error` and `end` events.\r\n */\n\n\nmodule.exports = function tinyreq(options, callback) {\n  // Handle options as string\n  if (typeof options === \"string\") {\n    options = {\n      url: options\n    };\n  } // Merge options\n\n\n  options = ul.deepMerge(options, ul.clone(url.parse(options.url)), {\n    method: options.method ? options.method : options.data ? \"POST\" : \"GET\",\n    headers: {},\n    encoding: \"utf8\"\n  });\n  var _done = false; // Unique callback\n\n  var opt_callback = assured(function (err, data, res) {\n    if (_done) {\n      return;\n    }\n\n    _done = true;\n\n    if (typeof callback !== \"function\") {\n      return;\n    }\n\n    callback(err, data, res);\n  }); // Handle post data\n\n  if (options.data && options.data.constructor === Object) {\n    options.data = queryString.stringify(options.data);\n  }\n\n  if (typeof options.data === \"string\") {\n    options.headers[\"Content-Length\"] = Buffer.byteLength(options.data);\n  }\n\n  var str = new EventEmitter(); // Create the request\n\n  var request = (options.protocol === \"http:\" ? http : https).request(options, function (res) {\n    var body = [],\n        bodyLength = 0;\n    var isGzipped = res.headers[\"content-encoding\"] === \"gzip\";\n    var resStream = res;\n\n    if (isGzipped) {\n      resStream = res.pipe(zlib.createGunzip());\n    } else {\n      options.encoding && res.setEncoding(options.encoding);\n    }\n\n    if (typeof callback === \"function\") {\n      resStream.on(\"data\", function (data) {\n        body.push(data);\n        bodyLength += data.length;\n      });\n    }\n\n    resStream.on(\"data\", function (data) {\n      str.emit(\"data\", data);\n    }).on(\"error\", function (e) {\n      str.emit(\"error\", e);\n      opt_callback(e, null, res);\n    }).on(\"end\", function () {\n      str.emit(\"end\");\n      body = options.encoding === null || options.encoding === \"buffer\" ? Buffer.concat(body, bodyLength) : body.join(\"\");\n      opt_callback(null, body, res);\n    });\n  }).on(\"error\", function (e) {\n    opt_callback(e, null, null);\n  }); // Handle post data\n\n  if (options.data) {\n    request.write(options.data, options.data_encoding);\n  }\n\n  request.end();\n\n  str.then = function (fn) {\n    callback = callback || noop;\n    return opt_callback._.then(fn);\n  };\n\n  str.catch = opt_callback._.catch.bind(opt_callback._);\n  return str;\n};","map":{"version":3,"sources":["C:/Users/narut/Documents/Coding/stock-valuate/node_modules/tinyreq/lib/index.js"],"names":["http","require","https","ul","url","queryString","events","EventEmitter","assured","noop","zlib","module","exports","tinyreq","options","callback","deepMerge","clone","parse","method","data","headers","encoding","_done","opt_callback","err","res","constructor","Object","stringify","Buffer","byteLength","str","request","protocol","body","bodyLength","isGzipped","resStream","pipe","createGunzip","setEncoding","on","push","length","emit","e","concat","join","write","data_encoding","end","then","fn","_","catch","bind"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nvar http = require('follow-redirects').http,\r\n    https = require('follow-redirects').https,\r\n    ul = require(\"ul\"),\r\n    url = require(\"url\"),\r\n    queryString = require(\"querystring\"),\r\n    events = require(\"events\"),\r\n    EventEmitter = events.EventEmitter,\r\n    assured = require(\"assured\"),\r\n    noop = require(\"noop6\"),\r\n    zlib = require(\"zlib\");\r\n\r\n/**\r\n * tinyreq\r\n * Creates http(s) requests.\r\n *\r\n * @name tinyreq\r\n * @function\r\n * @param {String|Object} options A string being the request url or an object containing the following fields:\r\n *\r\n *  - `url` (String): The request url.\r\n *  - `method` (String): The request method.\r\n *  - `data` (Object): The request POST data.\r\n *  - `encoding` (String): The response encoding type.\r\n *  - `data_encoding` (String): The request encoding type.\r\n *\r\n * @param {Function} callback The callback function called (with `error` and `data` parameters).\r\n * @return {EventEmitter} An event emitter you can use for listening for the `data`, `error` and `end` events.\r\n */\r\nmodule.exports = function tinyreq(options, callback) {\r\n\r\n    // Handle options as string\r\n    if (typeof options === \"string\") {\r\n        options = {\r\n            url: options\r\n        };\r\n    }\r\n\r\n    // Merge options\r\n    options = ul.deepMerge(options, ul.clone(url.parse(options.url)), {\r\n        method: options.method ? options.method : options.data ? \"POST\" : \"GET\",\r\n        headers: {},\r\n        encoding: \"utf8\"\r\n    });\r\n\r\n    var _done = false;\r\n\r\n    // Unique callback\r\n    var opt_callback = assured(function (err, data, res) {\r\n        if (_done) {\r\n            return;\r\n        }\r\n        _done = true;\r\n        if (typeof callback !== \"function\") {\r\n            return;\r\n        }\r\n        callback(err, data, res);\r\n    });\r\n\r\n    // Handle post data\r\n    if (options.data && options.data.constructor === Object) {\r\n        options.data = queryString.stringify(options.data);\r\n    }\r\n\r\n    if (typeof options.data === \"string\") {\r\n        options.headers[\"Content-Length\"] = Buffer.byteLength(options.data);\r\n    }\r\n\r\n    var str = new EventEmitter();\r\n\r\n    // Create the request\r\n    var request = (options.protocol === \"http:\" ? http : https).request(options, function (res) {\r\n        var body = [],\r\n            bodyLength = 0;\r\n\r\n        var isGzipped = res.headers[\"content-encoding\"] === \"gzip\";\r\n\r\n        var resStream = res;\r\n        if (isGzipped) {\r\n            resStream = res.pipe(zlib.createGunzip());\r\n        } else {\r\n            options.encoding && res.setEncoding(options.encoding);\r\n        }\r\n\r\n        if (typeof callback === \"function\") {\r\n            resStream.on(\"data\", function (data) {\r\n                body.push(data);\r\n                bodyLength += data.length;\r\n            });\r\n        }\r\n\r\n        resStream.on(\"data\", function (data) {\r\n            str.emit(\"data\", data);\r\n        }).on(\"error\", function (e) {\r\n            str.emit(\"error\", e);\r\n            opt_callback(e, null, res);\r\n        }).on(\"end\", function () {\r\n            str.emit(\"end\");\r\n            body = options.encoding === null || options.encoding === \"buffer\" ? Buffer.concat(body, bodyLength) : body.join(\"\");\r\n            opt_callback(null, body, res);\r\n        });\r\n    }).on(\"error\", function (e) {\r\n        opt_callback(e, null, null);\r\n    });\r\n\r\n    // Handle post data\r\n    if (options.data) {\r\n        request.write(options.data, options.data_encoding);\r\n    }\r\n\r\n    request.end();\r\n    str.then = function (fn) {\r\n        callback = callback || noop;\r\n        return opt_callback._.then(fn);\r\n    };\r\n    str.catch = opt_callback._.catch.bind(opt_callback._);\r\n    return str;\r\n};"]},"metadata":{},"sourceType":"script"}