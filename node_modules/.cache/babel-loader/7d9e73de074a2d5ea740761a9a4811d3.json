{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\narut\\\\Documents\\\\Coding\\\\stock-calc\\\\src\\\\Component\\\\Table.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useForm, useFieldArray, Controller, useWatch } from \"react-hook-form\";\nimport { FaTimesCircle } from \"react-icons/fa\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Table = ({\n  quoteSummary,\n  initQuoteSpark,\n  setFairValue\n}) => {\n  _s();\n\n  var _ref, _quoteSummary$incomeS, _ref2, _quoteSummary$balance, _quoteSummary$incomeS2, _quoteSummary$incomeS3, _quoteSummary$incomeS4, _quoteSummary$incomeS5, _initQuoteSpark$times;\n\n  const [growth, setGrowth] = useState(0);\n  const [npm, setNpm] = useState(0);\n  const [totalShares, setTotalShares] = useState(0);\n  const incomeStatementHistory = quoteSummary ? (_ref = [...(quoteSummary === null || quoteSummary === void 0 ? void 0 : (_quoteSummary$incomeS = quoteSummary.incomeStatementHistory) === null || _quoteSummary$incomeS === void 0 ? void 0 : _quoteSummary$incomeS.incomeStatementHistory)]) === null || _ref === void 0 ? void 0 : _ref.reverse() : [];\n  const balanceSheetStatements = quoteSummary ? (_ref2 = [...(quoteSummary === null || quoteSummary === void 0 ? void 0 : (_quoteSummary$balance = quoteSummary.balanceSheetHistory) === null || _quoteSummary$balance === void 0 ? void 0 : _quoteSummary$balance.balanceSheetStatements)]) === null || _ref2 === void 0 ? void 0 : _ref2.reverse() : [];\n  const revenue = (quoteSummary === null || quoteSummary === void 0 ? void 0 : (_quoteSummary$incomeS2 = quoteSummary.incomeStatementHistory) === null || _quoteSummary$incomeS2 === void 0 ? void 0 : (_quoteSummary$incomeS3 = _quoteSummary$incomeS2.incomeStatementHistory[0]) === null || _quoteSummary$incomeS3 === void 0 ? void 0 : _quoteSummary$incomeS3.totalRevenue.raw) + (quoteSummary === null || quoteSummary === void 0 ? void 0 : (_quoteSummary$incomeS4 = quoteSummary.incomeStatementHistory) === null || _quoteSummary$incomeS4 === void 0 ? void 0 : (_quoteSummary$incomeS5 = _quoteSummary$incomeS4.incomeStatementHistory[0]) === null || _quoteSummary$incomeS5 === void 0 ? void 0 : _quoteSummary$incomeS5.totalRevenue.raw) * (growth / 100);\n  const styles = {\n    tableHeader: {\n      backgroundColor: \"rgba(227, 242, 253, 1)\"\n    }\n  };\n  const defaultValues = {\n    predict: [{\n      revenueEl: revenue,\n      growthRevEl: 0,\n      pNpmEl: 0,\n      npmEl: 0,\n      totalSharesEl: 0,\n      epsEl: 0\n    }]\n  };\n  const {\n    register,\n    control,\n    handleSubmit,\n    reset,\n    watch,\n    setValue,\n    getValues\n  } = useForm();\n  const {\n    fields,\n    append,\n    prepend,\n    remove,\n    swap,\n    move,\n    insert,\n    replace\n  } = useFieldArray({\n    control,\n    name: \"predict\"\n  });\n  const lastRev = watch(`predict.${fields.length - 1}.revenueEl`);\n  const lastGrowth = watch(`predict.${fields.length - 1}.growthRevEl`);\n  const lastPNpm = watch(`predict.${fields.length - 1}.pNpmEl`);\n  const lastShares = watch(`predict.${fields.length - 1}.totalSharesEl`);\n  const lastPe = watch(`predict.${fields.length - 1}.peEl`);\n  const lastEps = formatNumber((lastRev + lastRev * (lastGrowth / 100)) * (lastPNpm / 100) / lastShares);\n  console.log(\"lastPrice\", lastPe * lastEps);\n\n  const convertDate = value => {\n    const result = new Date(value * 1000);\n    let date = result.getDate();\n    let month = result.getMonth() + 1;\n    let year = result.getFullYear();\n\n    if (date < 10) {\n      date = \"0\" + date;\n    }\n\n    if (month < 10) {\n      month = \"0\" + month;\n    }\n\n    return `${date}/${month}/${year}`;\n  };\n\n  const getYear = value => {\n    const result = new Date(value * 1000);\n    let year = result.getFullYear();\n    return year;\n  };\n\n  useEffect(() => {\n    if (quoteSummary) reset(defaultValues);\n  }, [quoteSummary]);\n\n  const formatNumber = data => {\n    return (Math.round(data / 1000000 * 100) / 100).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  };\n\n  const getPrice = initQuoteSpark === null || initQuoteSpark === void 0 ? void 0 : (_initQuoteSpark$times = initQuoteSpark.timestamp) === null || _initQuoteSpark$times === void 0 ? void 0 : _initQuoteSpark$times.map((item, index) => {\n    return {\n      date: convertDate(item),\n      year: getYear(item),\n      price: initQuoteSpark.close[index]\n    };\n  }).filter(item => item.date.startsWith(\"01/12\") && item.year >= new Date().getFullYear() - 4);\n\n  const displayTable2 = /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100%\",\n      overflowX: \"scroll\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table \",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        className: \"text-center\",\n        style: styles.tableHeader,\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }, this), quoteSummary ? incomeStatementHistory.map(item => {\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              children: new Date(item.endDate.raw * 1000).getFullYear()\n            }, item.endDate.raw, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 21\n            }, this);\n          }) : \"-\", fields.map((item, index) => {\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [new Date().getFullYear() + index, \" \", index !== 0 ? /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"float-end\",\n                style: {\n                  cursor: \"pointer\"\n                },\n                onClick: () => remove(index),\n                children: /*#__PURE__*/_jsxDEV(FaTimesCircle, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 140,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 21\n              }, this) : \"\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 17\n            }, this);\n          }), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              type: \"button\",\n              className: \"btn btn-outline-primary btn-sm\",\n              onClick: () => {\n                append({\n                  revenueEl: lastRev + lastRev * (lastGrowth / 100),\n                  growthRevEl: 0,\n                  pNpmEl: 0,\n                  npmEl: 0,\n                  totalSharesEl: 0,\n                  epsEl: 0\n                });\n              },\n              children: \"+\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: \"\\u0E23\\u0E32\\u0E22\\u0E44\\u0E14\\u0E49 (\\u0E25\\u0E1A.)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 13\n          }, this), quoteSummary ? incomeStatementHistory.map(item => {\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"text-center\",\n              children: formatNumber(item.totalRevenue.raw)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 21\n            }, this);\n          }) : \"\", fields.map((item, index) => {\n            const rev = watch(`predict.${index}.revenueEl`);\n            const growth = watch(`predict.${index}.growthRevEl`);\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"text-center\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                children: formatNumber(rev + rev * (growth / 100))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 187,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 17\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: \"\\u0E01\\u0E32\\u0E23\\u0E40\\u0E15\\u0E34\\u0E1A\\u0E42\\u0E15\\u0E02\\u0E2D\\u0E07\\u0E23\\u0E32\\u0E22\\u0E44\\u0E14\\u0E49 (%)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 13\n          }, this), quoteSummary ? incomeStatementHistory.map((item, index) => {\n            let revGrowth;\n\n            if (index !== 0) {\n              var _incomeStatementHisto;\n\n              revGrowth = `\n                        ${Math.round(((item === null || item === void 0 ? void 0 : item.totalRevenue.raw) / ((_incomeStatementHisto = incomeStatementHistory[index - 1]) === null || _incomeStatementHisto === void 0 ? void 0 : _incomeStatementHisto.totalRevenue.raw) - 1) * 100 * 100) / 100}`;\n            } else {\n              revGrowth = \"-\";\n            }\n\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"text-center\",\n              children: revGrowth\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 26\n            }, this);\n          }) : \"\", fields.map((item, index) => {\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"text-center\",\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                style: {\n                  width: \"100px\"\n                },\n                type: \"number\",\n                ...register(`predict.${index}.growthRevEl`),\n                className: \"text-center form-control m-auto\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 221,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 17\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: \"\\u0E2D\\u0E31\\u0E15\\u0E23\\u0E32\\u0E01\\u0E33\\u0E44\\u0E23\\u0E2A\\u0E38\\u0E17\\u0E18\\u0E34 (%)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 13\n          }, this), quoteSummary ? incomeStatementHistory.map(item => {\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"text-center\",\n              children: Math.round(item.netIncome.raw / item.totalRevenue.raw * 100 * 100) / 100\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 21\n            }, this);\n          }) : \"\", fields.map((item, index) => {\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"text-center\",\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                style: {\n                  width: \"100px\"\n                },\n                type: \"number\",\n                ...register(`predict.${index}.pNpmEl`),\n                className: \"text-center form-control m-auto\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 249,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 17\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: \"\\u0E01\\u0E33\\u0E44\\u0E23\\u0E2A\\u0E38\\u0E17\\u0E18\\u0E34 (\\u0E25\\u0E1A.)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 13\n          }, this), quoteSummary ? incomeStatementHistory.map(item => {\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"text-center\",\n              children: formatNumber(item.netIncome.raw)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 21\n            }, this);\n          }) : \"\", fields.map((item, index) => {\n            const rev = watch(`predict.${index}.revenueEl`);\n            const growth = watch(`predict.${index}.growthRevEl`);\n            const pNpm = watch(`predict.${index}.pNpmEl`);\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"text-center\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                children: pNpm ? formatNumber((rev + rev * (growth / 100)) * (pNpm / 100)) : \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 277,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 17\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"text-nowrap\",\n            children: \"\\u0E08\\u0E33\\u0E19\\u0E27\\u0E19\\u0E2B\\u0E38\\u0E49\\u0E19\\u0E17\\u0E35\\u0E48\\u0E08\\u0E14\\u0E17\\u0E30\\u0E40\\u0E1A\\u0E35\\u0E22\\u0E19 (\\u0E25\\u0E49\\u0E32\\u0E19\\u0E2B\\u0E38\\u0E49\\u0E19)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 13\n          }, this), quoteSummary ? incomeStatementHistory.map((item, index) => {\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"text-center\",\n              children: formatNumber(balanceSheetStatements[index].commonStock.raw)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 21\n            }, this);\n          }) : \"\", fields.map((item, index) => {\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"text-center\",\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                style: {\n                  width: \"100px\"\n                },\n                type: \"number\",\n                ...register(`predict.${index}.totalSharesEl`),\n                className: \"text-center form-control m-auto\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 305,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 304,\n              columnNumber: 17\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: \"\\u0E01\\u0E33\\u0E44\\u0E23\\u0E15\\u0E48\\u0E2D\\u0E2B\\u0E38\\u0E49\\u0E19 (\\u0E1A\\u0E32\\u0E17)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 13\n          }, this), quoteSummary ? incomeStatementHistory.map((item, index) => {\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"text-center\",\n              children: (+item.netIncome.raw / +balanceSheetStatements[index].commonStock.raw).toFixed(2)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 21\n            }, this);\n          }) : \"\", fields.map((item, index) => {\n            const rev = watch(`predict.${index}.revenueEl`);\n            const growth = watch(`predict.${index}.growthRevEl`);\n            const pNpm = watch(`predict.${index}.pNpmEl`);\n            const shares = watch(`predict.${index}.totalSharesEl`);\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"text-center\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                children: shares ? formatNumber((rev + rev * (growth / 100)) * (pNpm / 100) / shares) : \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 338,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 337,\n              columnNumber: 17\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: \"P/E\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 13\n          }, this), quoteSummary ? incomeStatementHistory.map((item, index) => {\n            var _getPrice$index;\n\n            const eps = +item.netIncome.raw / +balanceSheetStatements[index].commonStock.raw;\n            const price = getPrice ? (_getPrice$index = getPrice[index]) === null || _getPrice$index === void 0 ? void 0 : _getPrice$index.price : 0;\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"text-center\",\n              children: (price / eps).toFixed(2)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 360,\n              columnNumber: 21\n            }, this);\n          }) : \"\", fields.map((item, index) => {\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"text-center\",\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                style: {\n                  width: \"100px\"\n                },\n                type: \"number\",\n                ...register(`predict.${index}.peEl`),\n                className: \"text-center form-control m-auto\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 368,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 367,\n              columnNumber: 17\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: \"\\u0E23\\u0E32\\u0E04\\u0E32\\u0E2B\\u0E38\\u0E49\\u0E19 (\\u0E1A\\u0E32\\u0E17)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 379,\n            columnNumber: 13\n          }, this), initQuoteSpark ? getPrice.map((item, index) => {\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"text-center\",\n              children: item.price.toFixed(2)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 384,\n              columnNumber: 21\n            }, this);\n          }) : \"\", fields.map((item, index) => {\n            const rev = watch(`predict.${index}.revenueEl`);\n            const growth = watch(`predict.${index}.growthRevEl`);\n            const pNpm = watch(`predict.${index}.pNpmEl`);\n            const shares = watch(`predict.${index}.totalSharesEl`);\n            const pe = watch(`predict.${index}.peEl`);\n            const eps = formatNumber((rev + rev * (growth / 100)) * (pNpm / 100) / shares);\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"text-center\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                children: shares ? (pe * eps).toFixed(2) : \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 400,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 399,\n              columnNumber: 17\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid \",\n    children: quoteSummary ? displayTable2 : \"\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 411,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Table, \"w+e8vJSNXoIL07zcoEcV9tkEABA=\", false, function () {\n  return [useForm, useFieldArray];\n});\n\n_c = Table;\nexport default Table;\n\nvar _c;\n\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"sources":["C:/Users/narut/Documents/Coding/stock-calc/src/Component/Table.js"],"names":["React","useState","useEffect","useForm","useFieldArray","Controller","useWatch","FaTimesCircle","Table","quoteSummary","initQuoteSpark","setFairValue","growth","setGrowth","npm","setNpm","totalShares","setTotalShares","incomeStatementHistory","reverse","balanceSheetStatements","balanceSheetHistory","revenue","totalRevenue","raw","styles","tableHeader","backgroundColor","defaultValues","predict","revenueEl","growthRevEl","pNpmEl","npmEl","totalSharesEl","epsEl","register","control","handleSubmit","reset","watch","setValue","getValues","fields","append","prepend","remove","swap","move","insert","replace","name","lastRev","length","lastGrowth","lastPNpm","lastShares","lastPe","lastEps","formatNumber","console","log","convertDate","value","result","Date","date","getDate","month","getMonth","year","getFullYear","getYear","data","Math","round","toString","getPrice","timestamp","map","item","index","price","close","filter","startsWith","displayTable2","width","overflowX","endDate","cursor","rev","revGrowth","netIncome","pNpm","commonStock","toFixed","shares","eps","pe"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useForm, useFieldArray, Controller, useWatch } from \"react-hook-form\";\r\nimport { FaTimesCircle } from \"react-icons/fa\";\r\n\r\nconst Table = ({ quoteSummary, initQuoteSpark, setFairValue }) => {\r\n  const [growth, setGrowth] = useState(0);\r\n  const [npm, setNpm] = useState(0);\r\n  const [totalShares, setTotalShares] = useState(0);\r\n  const incomeStatementHistory = quoteSummary\r\n    ? [\r\n        ...quoteSummary?.incomeStatementHistory?.incomeStatementHistory,\r\n      ]?.reverse()\r\n    : [];\r\n\r\n  const balanceSheetStatements = quoteSummary\r\n    ? [...quoteSummary?.balanceSheetHistory?.balanceSheetStatements]?.reverse()\r\n    : [];\r\n\r\n  const revenue =\r\n    quoteSummary?.incomeStatementHistory?.incomeStatementHistory[0]\r\n      ?.totalRevenue.raw +\r\n    quoteSummary?.incomeStatementHistory?.incomeStatementHistory[0]\r\n      ?.totalRevenue.raw *\r\n      (growth / 100);\r\n\r\n  const styles = {\r\n    tableHeader: {\r\n      backgroundColor: \"rgba(227, 242, 253, 1)\",\r\n    },\r\n  };\r\n\r\n  const defaultValues = {\r\n    predict: [\r\n      {\r\n        revenueEl: revenue,\r\n        growthRevEl: 0,\r\n        pNpmEl: 0,\r\n        npmEl: 0,\r\n        totalSharesEl: 0,\r\n        epsEl: 0,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const { register, control, handleSubmit, reset, watch, setValue, getValues } =\r\n    useForm();\r\n\r\n  const { fields, append, prepend, remove, swap, move, insert, replace } =\r\n    useFieldArray({\r\n      control,\r\n      name: \"predict\",\r\n    });\r\n\r\n  const lastRev = watch(`predict.${fields.length - 1}.revenueEl`);\r\n  const lastGrowth = watch(`predict.${fields.length - 1}.growthRevEl`);\r\n  const lastPNpm = watch(`predict.${fields.length - 1}.pNpmEl`);\r\n  const lastShares = watch(`predict.${fields.length - 1}.totalSharesEl`);\r\n  const lastPe = watch(`predict.${fields.length - 1}.peEl`);\r\n  const lastEps = formatNumber(\r\n    ((lastRev + lastRev * (lastGrowth / 100)) * (lastPNpm / 100)) / lastShares\r\n  );\r\n\r\n  console.log(\"lastPrice\", lastPe * lastEps);\r\n\r\n  const convertDate = (value) => {\r\n    const result = new Date(value * 1000);\r\n\r\n    let date = result.getDate();\r\n    let month = result.getMonth() + 1;\r\n    let year = result.getFullYear();\r\n\r\n    if (date < 10) {\r\n      date = \"0\" + date;\r\n    }\r\n    if (month < 10) {\r\n      month = \"0\" + month;\r\n    }\r\n\r\n    return `${date}/${month}/${year}`;\r\n  };\r\n\r\n  const getYear = (value) => {\r\n    const result = new Date(value * 1000);\r\n\r\n    let year = result.getFullYear();\r\n\r\n    return year;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (quoteSummary) reset(defaultValues);\r\n  }, [quoteSummary]);\r\n\r\n  const formatNumber = (data) => {\r\n    return (Math.round((data / 1000000) * 100) / 100)\r\n      .toString()\r\n      .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n  };\r\n\r\n  const getPrice = initQuoteSpark?.timestamp\r\n    ?.map((item, index) => {\r\n      return {\r\n        date: convertDate(item),\r\n        year: getYear(item),\r\n        price: initQuoteSpark.close[index],\r\n      };\r\n    })\r\n    .filter(\r\n      (item) =>\r\n        item.date.startsWith(\"01/12\") &&\r\n        item.year >= new Date().getFullYear() - 4\r\n    );\r\n\r\n  const displayTable2 = (\r\n    <div style={{ width: \"100%\", overflowX: \"scroll\" }}>\r\n      <table className=\"table \">\r\n        <thead className=\"text-center\" style={styles.tableHeader}>\r\n          <tr>\r\n            <td></td>\r\n            {quoteSummary\r\n              ? incomeStatementHistory.map((item) => {\r\n                  return (\r\n                    <td key={item.endDate.raw}>\r\n                      {new Date(item.endDate.raw * 1000).getFullYear()}\r\n                    </td>\r\n                  );\r\n                })\r\n              : \"-\"}\r\n\r\n            {fields.map((item, index) => {\r\n              return (\r\n                <td>\r\n                  {new Date().getFullYear() + index}{\" \"}\r\n                  {index !== 0 ? (\r\n                    <span\r\n                      className=\"float-end\"\r\n                      style={{ cursor: \"pointer\" }}\r\n                      onClick={() => remove(index)}\r\n                    >\r\n                      <FaTimesCircle />\r\n                    </span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </td>\r\n              );\r\n            })}\r\n            <td>\r\n              <div\r\n                type=\"button\"\r\n                className=\"btn btn-outline-primary btn-sm\"\r\n                onClick={() => {\r\n                  append({\r\n                    revenueEl: lastRev + lastRev * (lastGrowth / 100),\r\n                    growthRevEl: 0,\r\n                    pNpmEl: 0,\r\n                    npmEl: 0,\r\n                    totalSharesEl: 0,\r\n                    epsEl: 0,\r\n                  });\r\n                }}\r\n              >\r\n                +\r\n              </div>\r\n            </td>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td>รายได้ (ลบ.)</td>\r\n            {quoteSummary\r\n              ? incomeStatementHistory.map((item) => {\r\n                  return (\r\n                    <td className=\"text-center\">\r\n                      {formatNumber(item.totalRevenue.raw)}\r\n                    </td>\r\n                  );\r\n                })\r\n              : \"\"}\r\n\r\n            {fields.map((item, index) => {\r\n              const rev = watch(`predict.${index}.revenueEl`);\r\n              const growth = watch(`predict.${index}.growthRevEl`);\r\n\r\n              return (\r\n                <td className=\"text-center\">\r\n                  <div>{formatNumber(rev + rev * (growth / 100))}</div>\r\n                </td>\r\n              );\r\n            })}\r\n          </tr>\r\n          <tr>\r\n            <td>การเติบโตของรายได้ (%)</td>\r\n\r\n            {quoteSummary\r\n              ? incomeStatementHistory.map((item, index) => {\r\n                  let revGrowth;\r\n                  if (index !== 0) {\r\n                    revGrowth = `\r\n                        ${\r\n                          Math.round(\r\n                            (item?.totalRevenue.raw /\r\n                              incomeStatementHistory[index - 1]?.totalRevenue\r\n                                .raw -\r\n                              1) *\r\n                              100 *\r\n                              100\r\n                          ) / 100\r\n                        }`;\r\n                  } else {\r\n                    revGrowth = \"-\";\r\n                  }\r\n\r\n                  return <td className=\"text-center\">{revGrowth}</td>;\r\n                })\r\n              : \"\"}\r\n\r\n            {fields.map((item, index) => {\r\n              return (\r\n                <td className=\"text-center\">\r\n                  <input\r\n                    style={{ width: \"100px\" }}\r\n                    type=\"number\"\r\n                    {...register(`predict.${index}.growthRevEl`)}\r\n                    className=\"text-center form-control m-auto\"\r\n                  />\r\n                </td>\r\n              );\r\n            })}\r\n          </tr>\r\n\r\n          <tr>\r\n            <td>อัตรากำไรสุทธิ (%)</td>\r\n            {quoteSummary\r\n              ? incomeStatementHistory.map((item) => {\r\n                  return (\r\n                    <td className=\"text-center\">\r\n                      {Math.round(\r\n                        (item.netIncome.raw / item.totalRevenue.raw) * 100 * 100\r\n                      ) / 100}\r\n                    </td>\r\n                  );\r\n                })\r\n              : \"\"}\r\n\r\n            {fields.map((item, index) => {\r\n              return (\r\n                <td className=\"text-center\">\r\n                  <input\r\n                    style={{ width: \"100px\" }}\r\n                    type=\"number\"\r\n                    {...register(`predict.${index}.pNpmEl`)}\r\n                    className=\"text-center form-control m-auto\"\r\n                  />\r\n                </td>\r\n              );\r\n            })}\r\n          </tr>\r\n          <tr>\r\n            <td>กำไรสุทธิ (ลบ.)</td>\r\n            {quoteSummary\r\n              ? incomeStatementHistory.map((item) => {\r\n                  return (\r\n                    <td className=\"text-center\">\r\n                      {formatNumber(item.netIncome.raw)}\r\n                    </td>\r\n                  );\r\n                })\r\n              : \"\"}\r\n\r\n            {fields.map((item, index) => {\r\n              const rev = watch(`predict.${index}.revenueEl`);\r\n              const growth = watch(`predict.${index}.growthRevEl`);\r\n              const pNpm = watch(`predict.${index}.pNpmEl`);\r\n              return (\r\n                <td className=\"text-center\">\r\n                  <div>\r\n                    {pNpm\r\n                      ? formatNumber(\r\n                          (rev + rev * (growth / 100)) * (pNpm / 100)\r\n                        )\r\n                      : \"\"}\r\n                  </div>\r\n                </td>\r\n              );\r\n            })}\r\n          </tr>\r\n          <tr>\r\n            <td className=\"text-nowrap\">จำนวนหุ้นที่จดทะเบียน (ล้านหุ้น)</td>\r\n            {quoteSummary\r\n              ? incomeStatementHistory.map((item, index) => {\r\n                  return (\r\n                    <td className=\"text-center\">\r\n                      {formatNumber(\r\n                        balanceSheetStatements[index].commonStock.raw\r\n                      )}\r\n                    </td>\r\n                  );\r\n                })\r\n              : \"\"}\r\n\r\n            {fields.map((item, index) => {\r\n              return (\r\n                <td className=\"text-center\">\r\n                  <input\r\n                    style={{ width: \"100px\" }}\r\n                    type=\"number\"\r\n                    {...register(`predict.${index}.totalSharesEl`)}\r\n                    className=\"text-center form-control m-auto\"\r\n                  />\r\n                </td>\r\n              );\r\n            })}\r\n          </tr>\r\n          <tr>\r\n            <td>กำไรต่อหุ้น (บาท)</td>\r\n\r\n            {quoteSummary\r\n              ? incomeStatementHistory.map((item, index) => {\r\n                  return (\r\n                    <td className=\"text-center\">\r\n                      {(\r\n                        +item.netIncome.raw /\r\n                        +balanceSheetStatements[index].commonStock.raw\r\n                      ).toFixed(2)}\r\n                    </td>\r\n                  );\r\n                })\r\n              : \"\"}\r\n\r\n            {fields.map((item, index) => {\r\n              const rev = watch(`predict.${index}.revenueEl`);\r\n              const growth = watch(`predict.${index}.growthRevEl`);\r\n              const pNpm = watch(`predict.${index}.pNpmEl`);\r\n              const shares = watch(`predict.${index}.totalSharesEl`);\r\n              return (\r\n                <td className=\"text-center\">\r\n                  <div>\r\n                    {shares\r\n                      ? formatNumber(\r\n                          ((rev + rev * (growth / 100)) * (pNpm / 100)) / shares\r\n                        )\r\n                      : \"\"}\r\n                  </div>\r\n                </td>\r\n              );\r\n            })}\r\n          </tr>\r\n          <tr>\r\n            <td>P/E</td>\r\n\r\n            {quoteSummary\r\n              ? incomeStatementHistory.map((item, index) => {\r\n                  const eps =\r\n                    +item.netIncome.raw /\r\n                    +balanceSheetStatements[index].commonStock.raw;\r\n\r\n                  const price = getPrice ? getPrice[index]?.price : 0;\r\n                  return (\r\n                    <td className=\"text-center\">{(price / eps).toFixed(2)}</td>\r\n                  );\r\n                })\r\n              : \"\"}\r\n\r\n            {fields.map((item, index) => {\r\n              return (\r\n                <td className=\"text-center\">\r\n                  <input\r\n                    style={{ width: \"100px\" }}\r\n                    type=\"number\"\r\n                    {...register(`predict.${index}.peEl`)}\r\n                    className=\"text-center form-control m-auto\"\r\n                  />\r\n                </td>\r\n              );\r\n            })}\r\n          </tr>\r\n          <tr>\r\n            <td>ราคาหุ้น (บาท)</td>\r\n\r\n            {initQuoteSpark\r\n              ? getPrice.map((item, index) => {\r\n                  return (\r\n                    <td className=\"text-center\">{item.price.toFixed(2)}</td>\r\n                  );\r\n                })\r\n              : \"\"}\r\n\r\n            {fields.map((item, index) => {\r\n              const rev = watch(`predict.${index}.revenueEl`);\r\n              const growth = watch(`predict.${index}.growthRevEl`);\r\n              const pNpm = watch(`predict.${index}.pNpmEl`);\r\n              const shares = watch(`predict.${index}.totalSharesEl`);\r\n              const pe = watch(`predict.${index}.peEl`);\r\n              const eps = formatNumber(\r\n                ((rev + rev * (growth / 100)) * (pNpm / 100)) / shares\r\n              );\r\n              return (\r\n                <td className=\"text-center\">\r\n                  <div>{shares ? (pe * eps).toFixed(2) : \"\"}</div>\r\n                </td>\r\n              );\r\n            })}\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"container-fluid \">{quoteSummary ? displayTable2 : \"\"}</div>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n"]},"metadata":{},"sourceType":"module"}