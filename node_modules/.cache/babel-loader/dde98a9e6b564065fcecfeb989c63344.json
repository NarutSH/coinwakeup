{"ast":null,"code":"var parse = require('./parse'),\n    render = require('dom-serializer');\n/**\r\n * HTML Tags\r\n */\n\n\nvar tags = {\n  tag: true,\n  script: true,\n  style: true\n};\n/**\r\n * Check if the DOM element is a tag\r\n *\r\n * isTag(type) includes <script> and <style> tags\r\n */\n\nexports.isTag = function (type) {\n  if (type.type) type = type.type;\n  return tags[type] || false;\n};\n/**\r\n * Convert a string to camel case notation.\r\n * @param  {String} str String to be converted.\r\n * @return {String}     String in camel case notation.\r\n */\n\n\nexports.camelCase = function (str) {\n  return str.replace(/[_.-](\\w|$)/g, function (_, x) {\n    return x.toUpperCase();\n  });\n};\n/**\r\n * Convert a string from camel case to \"CSS case\", where word boundaries are\r\n * described by hyphens (\"-\") and all characters are lower-case.\r\n * @param  {String} str String to be converted.\r\n * @return {string}     String in \"CSS case\".\r\n */\n\n\nexports.cssCase = function (str) {\n  return str.replace(/[A-Z]/g, '-$&').toLowerCase();\n};\n/**\r\n * Iterate over each DOM element without creating intermediary Cheerio instances.\r\n *\r\n * This is indented for use internally to avoid otherwise unnecessary memory pressure introduced\r\n * by _make.\r\n */\n\n\nexports.domEach = function (cheerio, fn) {\n  var i = 0,\n      len = cheerio.length;\n\n  while (i < len && fn.call(cheerio, i, cheerio[i]) !== false) ++i;\n\n  return cheerio;\n};\n/**\r\n * Create a deep copy of the given DOM structure by first rendering it to a\r\n * string and then parsing the resultant markup.\r\n *\r\n * @argument {Object} dom - The htmlparser2-compliant DOM structure\r\n * @argument {Object} options - The parsing/rendering options\r\n */\n\n\nexports.cloneDom = function (dom, options) {\n  return parse(render(dom, options), options).children;\n};\n/*\r\n * A simple way to check for HTML strings or ID strings\r\n */\n\n\nvar quickExpr = /^(?:[^#<]*(<[\\w\\W]+>)[^>]*$|#([\\w\\-]*)$)/;\n/*\r\n * Check if string is HTML\r\n */\n\nexports.isHtml = function (str) {\n  // Faster than running regex, if str starts with `<` and ends with `>`, assume it's HTML\n  if (str.charAt(0) === '<' && str.charAt(str.length - 1) === '>' && str.length >= 3) return true; // Run the regex\n\n  var match = quickExpr.exec(str);\n  return !!(match && match[1]);\n};","map":{"version":3,"sources":["C:/Users/narut/Documents/Coding/stock-valuate/node_modules/cheerio/lib/utils.js"],"names":["parse","require","render","tags","tag","script","style","exports","isTag","type","camelCase","str","replace","_","x","toUpperCase","cssCase","toLowerCase","domEach","cheerio","fn","i","len","length","call","cloneDom","dom","options","children","quickExpr","isHtml","charAt","match","exec"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,SAAD,CAAnB;AAAA,IACIC,MAAM,GAAGD,OAAO,CAAC,gBAAD,CADpB;AAGA;AACA;AACA;;;AAEA,IAAIE,IAAI,GAAG;AAAEC,EAAAA,GAAG,EAAE,IAAP;AAAaC,EAAAA,MAAM,EAAE,IAArB;AAA2BC,EAAAA,KAAK,EAAE;AAAlC,CAAX;AAEA;AACA;AACA;AACA;AACA;;AAEAC,OAAO,CAACC,KAAR,GAAgB,UAASC,IAAT,EAAe;AAC7B,MAAIA,IAAI,CAACA,IAAT,EAAeA,IAAI,GAAGA,IAAI,CAACA,IAAZ;AACf,SAAON,IAAI,CAACM,IAAD,CAAJ,IAAc,KAArB;AACD,CAHD;AAKA;AACA;AACA;AACA;AACA;;;AAEAF,OAAO,CAACG,SAAR,GAAoB,UAASC,GAAT,EAAc;AAChC,SAAOA,GAAG,CAACC,OAAJ,CAAY,cAAZ,EAA4B,UAASC,CAAT,EAAYC,CAAZ,EAAe;AAChD,WAAOA,CAAC,CAACC,WAAF,EAAP;AACD,GAFM,CAAP;AAGD,CAJD;AAMA;AACA;AACA;AACA;AACA;AACA;;;AACAR,OAAO,CAACS,OAAR,GAAkB,UAASL,GAAT,EAAc;AAC9B,SAAOA,GAAG,CAACC,OAAJ,CAAY,QAAZ,EAAsB,KAAtB,EAA6BK,WAA7B,EAAP;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;;;AAEAV,OAAO,CAACW,OAAR,GAAkB,UAASC,OAAT,EAAkBC,EAAlB,EAAsB;AACtC,MAAIC,CAAC,GAAG,CAAR;AAAA,MAAWC,GAAG,GAAGH,OAAO,CAACI,MAAzB;;AACA,SAAOF,CAAC,GAAGC,GAAJ,IAAWF,EAAE,CAACI,IAAH,CAAQL,OAAR,EAAiBE,CAAjB,EAAoBF,OAAO,CAACE,CAAD,CAA3B,MAAoC,KAAtD,EAA6D,EAAEA,CAAF;;AAC7D,SAAOF,OAAP;AACD,CAJD;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAZ,OAAO,CAACkB,QAAR,GAAmB,UAASC,GAAT,EAAcC,OAAd,EAAuB;AACxC,SAAO3B,KAAK,CAACE,MAAM,CAACwB,GAAD,EAAMC,OAAN,CAAP,EAAuBA,OAAvB,CAAL,CAAqCC,QAA5C;AACD,CAFD;AAIA;AACA;AACA;;;AAEA,IAAIC,SAAS,GAAG,0CAAhB;AAEA;AACA;AACA;;AACAtB,OAAO,CAACuB,MAAR,GAAiB,UAASnB,GAAT,EAAc;AAC7B;AACA,MAAIA,GAAG,CAACoB,MAAJ,CAAW,CAAX,MAAkB,GAAlB,IAAyBpB,GAAG,CAACoB,MAAJ,CAAWpB,GAAG,CAACY,MAAJ,GAAa,CAAxB,MAA+B,GAAxD,IAA+DZ,GAAG,CAACY,MAAJ,IAAc,CAAjF,EAAoF,OAAO,IAAP,CAFvD,CAI7B;;AACA,MAAIS,KAAK,GAAGH,SAAS,CAACI,IAAV,CAAetB,GAAf,CAAZ;AACA,SAAO,CAAC,EAAEqB,KAAK,IAAIA,KAAK,CAAC,CAAD,CAAhB,CAAR;AACD,CAPD","sourcesContent":["var parse = require('./parse'),\r\n    render = require('dom-serializer');\r\n\r\n/**\r\n * HTML Tags\r\n */\r\n\r\nvar tags = { tag: true, script: true, style: true };\r\n\r\n/**\r\n * Check if the DOM element is a tag\r\n *\r\n * isTag(type) includes <script> and <style> tags\r\n */\r\n\r\nexports.isTag = function(type) {\r\n  if (type.type) type = type.type;\r\n  return tags[type] || false;\r\n};\r\n\r\n/**\r\n * Convert a string to camel case notation.\r\n * @param  {String} str String to be converted.\r\n * @return {String}     String in camel case notation.\r\n */\r\n\r\nexports.camelCase = function(str) {\r\n  return str.replace(/[_.-](\\w|$)/g, function(_, x) {\r\n    return x.toUpperCase();\r\n  });\r\n};\r\n\r\n/**\r\n * Convert a string from camel case to \"CSS case\", where word boundaries are\r\n * described by hyphens (\"-\") and all characters are lower-case.\r\n * @param  {String} str String to be converted.\r\n * @return {string}     String in \"CSS case\".\r\n */\r\nexports.cssCase = function(str) {\r\n  return str.replace(/[A-Z]/g, '-$&').toLowerCase();\r\n};\r\n\r\n/**\r\n * Iterate over each DOM element without creating intermediary Cheerio instances.\r\n *\r\n * This is indented for use internally to avoid otherwise unnecessary memory pressure introduced\r\n * by _make.\r\n */\r\n\r\nexports.domEach = function(cheerio, fn) {\r\n  var i = 0, len = cheerio.length;\r\n  while (i < len && fn.call(cheerio, i, cheerio[i]) !== false) ++i;\r\n  return cheerio;\r\n};\r\n\r\n/**\r\n * Create a deep copy of the given DOM structure by first rendering it to a\r\n * string and then parsing the resultant markup.\r\n *\r\n * @argument {Object} dom - The htmlparser2-compliant DOM structure\r\n * @argument {Object} options - The parsing/rendering options\r\n */\r\nexports.cloneDom = function(dom, options) {\r\n  return parse(render(dom, options), options).children;\r\n};\r\n\r\n/*\r\n * A simple way to check for HTML strings or ID strings\r\n */\r\n\r\nvar quickExpr = /^(?:[^#<]*(<[\\w\\W]+>)[^>]*$|#([\\w\\-]*)$)/;\r\n\r\n/*\r\n * Check if string is HTML\r\n */\r\nexports.isHtml = function(str) {\r\n  // Faster than running regex, if str starts with `<` and ends with `>`, assume it's HTML\r\n  if (str.charAt(0) === '<' && str.charAt(str.length - 1) === '>' && str.length >= 3) return true;\r\n\r\n  // Run the regex\r\n  var match = quickExpr.exec(str);\r\n  return !!(match && match[1]);\r\n};\r\n"]},"metadata":{},"sourceType":"script"}