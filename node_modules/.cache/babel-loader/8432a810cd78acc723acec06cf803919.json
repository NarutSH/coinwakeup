{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\narut\\\\Documents\\\\Coding\\\\stock-calc\\\\src\\\\Component\\\\LightChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Chart from \"kaktana-react-lightweight-charts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LightChart = ({\n  quoteSpark,\n  setRangeChart,\n  quoteSummary\n}) => {\n  _s();\n\n  var _quoteSpark$close, _quoteSummary$incomeS, _quoteSummary$incomeS2;\n\n  const [chartData, setChartData] = useState([]);\n  console.log(\"quoteSpark\", quoteSpark);\n\n  const convertNumberRound = value => {\n    return Math.round(value * 100) / 100;\n  };\n\n  const getStandardDeviation = dataArray => {\n    const n = dataArray === null || dataArray === void 0 ? void 0 : dataArray.length;\n    const mean = (dataArray === null || dataArray === void 0 ? void 0 : dataArray.reduce((a, b) => a + b)) / n;\n    return +Math.sqrt((dataArray === null || dataArray === void 0 ? void 0 : dataArray.map(x => Math.pow(x - mean, 2)).reduce((a, b) => a + b)) / n);\n  };\n\n  const getPrice = quoteSpark === null || quoteSpark === void 0 ? void 0 : (_quoteSpark$close = quoteSpark.close) === null || _quoteSpark$close === void 0 ? void 0 : _quoteSpark$close.map((item, index) => {\n    return {\n      price: item,\n      year: new Date(quoteSpark.timestamp[index] * 1000).getFullYear()\n    };\n  });\n  const getEPS = quoteSummary === null || quoteSummary === void 0 ? void 0 : (_quoteSummary$incomeS = quoteSummary.incomeStatementHistory) === null || _quoteSummary$incomeS === void 0 ? void 0 : (_quoteSummary$incomeS2 = _quoteSummary$incomeS.incomeStatementHistory) === null || _quoteSummary$incomeS2 === void 0 ? void 0 : _quoteSummary$incomeS2.map((item, index) => {\n    return {\n      eps: item.netIncome.raw / (quoteSummary === null || quoteSummary === void 0 ? void 0 : quoteSummary.balanceSheetHistory.balanceSheetStatements[index].commonStock.raw),\n      year: new Date(item.endDate.raw * 1000).getFullYear()\n    };\n  });\n  const getPE = getPrice === null || getPrice === void 0 ? void 0 : getPrice.map((item, index) => {\n    const resEps = getEPS === null || getEPS === void 0 ? void 0 : getEPS.find(data => data.year === item.year);\n    const resPe = resEps ? +item.price / +resEps.eps : null;\n    return { ...item,\n      eps: resEps ? resEps.eps : null,\n      pe: resPe ? convertNumberRound(resPe) : resPe\n    };\n  });\n  const purePE = getPE === null || getPE === void 0 ? void 0 : getPE.filter(item => item.pe);\n  const getSD = getPE === null || getPE === void 0 ? void 0 : getPE.map(item => {\n    const n = purePE === null || purePE === void 0 ? void 0 : purePE.length;\n    const meanPE = (purePE === null || purePE === void 0 ? void 0 : purePE.map(item => item.pe).reduce((a, b) => +a + +b)) / +n;\n    const pe = purePE.map(item => item.pe);\n    return { ...item,\n      sd: convertNumberRound(meanPE),\n      sd1p: convertNumberRound(meanPE + getStandardDeviation(pe)),\n      sd2p: convertNumberRound(meanPE + getStandardDeviation(pe) * 2),\n      sd1m: convertNumberRound(meanPE - getStandardDeviation(pe)),\n      sd2m: convertNumberRound(meanPE - getStandardDeviation(pe) * 2)\n    };\n  });\n\n  const generateChart = () => {\n    setChartData([{\n      data: [{\n        time: \"2018-12-01\",\n        value: 32.51\n      }, {\n        time: \"2018-12-02\",\n        value: 31.11\n      }, {\n        time: \"2018-12-03\",\n        value: 27.02\n      }, {\n        time: \"2018-12-04\",\n        value: 27.32\n      }, {\n        time: \"2018-12-05\",\n        value: 25.17\n      }, {\n        time: \"2018-12-06\",\n        value: 28.89\n      }, {\n        time: \"2018-12-07\",\n        value: 25.46\n      }, {\n        time: \"2018-12-08\",\n        value: 23.92\n      }, {\n        time: \"2018-12-09\",\n        value: 22.68\n      }, {\n        time: \"2018-12-10\",\n        value: 22.67\n      }, {\n        time: \"2018-12-11\",\n        value: 27.57\n      }, {\n        time: \"2018-12-12\",\n        value: 24.11\n      }, {\n        time: \"2018-12-13\",\n        value: 30.74\n      }]\n    }]);\n  };\n\n  const options = {\n    alignLabels: true,\n    timeScale: {\n      rightOffset: 12,\n      barSpacing: 3,\n      fixLeftEdge: true,\n      lockVisibleTimeRangeOnResize: true,\n      rightBarStaysOnScroll: true,\n      borderVisible: false,\n      borderColor: \"#fff000\",\n      visible: true,\n      timeVisible: true,\n      secondsVisible: false\n    }\n  };\n  useEffect(() => {\n    generateChart();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Chart, {\n      options: options,\n      lineSeries: chartData,\n      autoWidth: true,\n      height: 320\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n};\n\n_s(LightChart, \"Leo9Xk/Ki5G6SkYc3yZESo07mWw=\");\n\n_c = LightChart;\nexport default LightChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"LightChart\");","map":{"version":3,"sources":["C:/Users/narut/Documents/Coding/stock-calc/src/Component/LightChart.js"],"names":["React","useState","useEffect","Chart","LightChart","quoteSpark","setRangeChart","quoteSummary","chartData","setChartData","console","log","convertNumberRound","value","Math","round","getStandardDeviation","dataArray","n","length","mean","reduce","a","b","sqrt","map","x","pow","getPrice","close","item","index","price","year","Date","timestamp","getFullYear","getEPS","incomeStatementHistory","eps","netIncome","raw","balanceSheetHistory","balanceSheetStatements","commonStock","endDate","getPE","resEps","find","data","resPe","pe","purePE","filter","getSD","meanPE","sd","sd1p","sd2p","sd1m","sd2m","generateChart","time","options","alignLabels","timeScale","rightOffset","barSpacing","fixLeftEdge","lockVisibleTimeRangeOnResize","rightBarStaysOnScroll","borderVisible","borderColor","visible","timeVisible","secondsVisible"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Chart from \"kaktana-react-lightweight-charts\";\r\n\r\nconst LightChart = ({ quoteSpark, setRangeChart, quoteSummary }) => {\r\n  const [chartData, setChartData] = useState([]);\r\n\r\n  console.log(\"quoteSpark\", quoteSpark);\r\n\r\n  const convertNumberRound = (value) => {\r\n    return Math.round(value * 100) / 100;\r\n  };\r\n\r\n  const getStandardDeviation = (dataArray) => {\r\n    const n = dataArray?.length;\r\n    const mean = dataArray?.reduce((a, b) => a + b) / n;\r\n    return +Math.sqrt(\r\n      dataArray?.map((x) => Math.pow(x - mean, 2)).reduce((a, b) => a + b) / n\r\n    );\r\n  };\r\n\r\n  const getPrice = quoteSpark?.close?.map((item, index) => {\r\n    return {\r\n      price: item,\r\n      year: new Date(quoteSpark.timestamp[index] * 1000).getFullYear(),\r\n    };\r\n  });\r\n\r\n  const getEPS =\r\n    quoteSummary?.incomeStatementHistory?.incomeStatementHistory?.map(\r\n      (item, index) => {\r\n        return {\r\n          eps:\r\n            item.netIncome.raw /\r\n            quoteSummary?.balanceSheetHistory.balanceSheetStatements[index]\r\n              .commonStock.raw,\r\n          year: new Date(item.endDate.raw * 1000).getFullYear(),\r\n        };\r\n      }\r\n    );\r\n\r\n  const getPE = getPrice?.map((item, index) => {\r\n    const resEps = getEPS?.find((data) => data.year === item.year);\r\n    const resPe = resEps ? +item.price / +resEps.eps : null;\r\n\r\n    return {\r\n      ...item,\r\n      eps: resEps ? resEps.eps : null,\r\n      pe: resPe ? convertNumberRound(resPe) : resPe,\r\n    };\r\n  });\r\n\r\n  const purePE = getPE?.filter((item) => item.pe);\r\n\r\n  const getSD = getPE?.map((item) => {\r\n    const n = purePE?.length;\r\n    const meanPE =\r\n      purePE?.map((item) => item.pe).reduce((a, b) => +a + +b) / +n;\r\n\r\n    const pe = purePE.map((item) => item.pe);\r\n\r\n    return {\r\n      ...item,\r\n      sd: convertNumberRound(meanPE),\r\n      sd1p: convertNumberRound(meanPE + getStandardDeviation(pe)),\r\n      sd2p: convertNumberRound(meanPE + getStandardDeviation(pe) * 2),\r\n      sd1m: convertNumberRound(meanPE - getStandardDeviation(pe)),\r\n      sd2m: convertNumberRound(meanPE - getStandardDeviation(pe) * 2),\r\n    };\r\n  });\r\n\r\n  const generateChart = () => {\r\n    setChartData([\r\n      {\r\n        data: [\r\n          { time: \"2018-12-01\", value: 32.51 },\r\n          { time: \"2018-12-02\", value: 31.11 },\r\n          { time: \"2018-12-03\", value: 27.02 },\r\n          { time: \"2018-12-04\", value: 27.32 },\r\n          { time: \"2018-12-05\", value: 25.17 },\r\n          { time: \"2018-12-06\", value: 28.89 },\r\n          { time: \"2018-12-07\", value: 25.46 },\r\n          { time: \"2018-12-08\", value: 23.92 },\r\n          { time: \"2018-12-09\", value: 22.68 },\r\n          { time: \"2018-12-10\", value: 22.67 },\r\n          { time: \"2018-12-11\", value: 27.57 },\r\n          { time: \"2018-12-12\", value: 24.11 },\r\n          { time: \"2018-12-13\", value: 30.74 },\r\n        ],\r\n      },\r\n    ]);\r\n  };\r\n\r\n  const options = {\r\n    alignLabels: true,\r\n    timeScale: {\r\n      rightOffset: 12,\r\n      barSpacing: 3,\r\n      fixLeftEdge: true,\r\n      lockVisibleTimeRangeOnResize: true,\r\n      rightBarStaysOnScroll: true,\r\n      borderVisible: false,\r\n      borderColor: \"#fff000\",\r\n      visible: true,\r\n      timeVisible: true,\r\n      secondsVisible: false,\r\n    },\r\n  };\r\n\r\n  useEffect(() => {\r\n    generateChart();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Chart options={options} lineSeries={chartData} autoWidth height={320} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LightChart;\r\n"]},"metadata":{},"sourceType":"module"}