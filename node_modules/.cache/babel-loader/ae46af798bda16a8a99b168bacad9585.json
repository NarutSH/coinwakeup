{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\narut\\\\Documents\\\\Coding\\\\stock-calc\\\\src\\\\Component\\\\Chart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Chart = ({\n  quoteSpark\n}) => {\n  _s();\n\n  const [chartData, setChartData] = useState(\"\");\n\n  const convertDate = value => {\n    const result = new Date(value * 1000);\n    let date = result.getDate();\n    let month = result.getMonth() + 1;\n    let year = result.getFullYear();\n\n    if (date < 10) {\n      date = \"0\" + date;\n    }\n\n    if (month < 10) {\n      month = \"0\" + month;\n    }\n\n    return `${date}/${month}/${year}`;\n  };\n\n  console.log(\"quoteSpark\", quoteSpark);\n\n  const chartGenerate = () => {\n    const labels = quoteSpark.timestamp.map(item => convertDate(item));\n    const datas = {\n      labels: labels,\n      datasets: [{\n        label: quoteSpark.symbol.replace(\".BK\", \"\"),\n        backgroundColor: \"rgb(255, 99, 132)\",\n        borderColor: \"rgb(255, 99, 132)\",\n        data: quoteSpark.close\n      }]\n    };\n    setChartData(datas);\n  };\n\n  let options = {\n    scales: {\n      x: {\n        ticks: {\n          maxTicksLimit: 10,\n          maxRotation: 90,\n          minRotation: 90\n        }\n      }\n    },\n    plugins: {\n      zoom: {\n        zoom: {\n          wheel: {\n            enabled: true\n          },\n          pinch: {\n            enabled: true\n          },\n          mode: \"xy\"\n        },\n        pan: {\n          enabled: true,\n          mode: \"xy\",\n          speed: 1,\n          threshold: 1\n        }\n      } //   annotation: {\n      //     annotations: {\n      //       line1: {\n      //         type: \"line\",\n      //         yMin: warningItem.war,\n      //         yMax: warningItem.war,\n      //         borderColor: \"rgb(255, 99, 132)\",\n      //         borderWidth: 2,\n      //       },\n      //       line2: {\n      //         type: \"line\",\n      //         xMin: transections[transections.length - 1].timeStamp,\n      //         xMax: transections[transections.length - 1].timeStamp,\n      //         borderColor: \"rgb(0, 0, 0)\",\n      //         borderWidth: 2,\n      //       },\n      //     },\n      //   },\n\n    }\n  };\n  useEffect(() => {\n    if (quoteSpark) chartGenerate();\n  }, [quoteSpark]);\n\n  const displayRange = /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        className: \"btn-check\",\n        id: \"range-1d\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"btn btn-outline-primary\",\n        htmlFor: \"range-1d\",\n        children: \"Single toggle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Chart, \"Ae8sf4yDsWBu4R0qxy8xeyLKStU=\");\n\n_c = Chart;\nexport default Chart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"sources":["C:/Users/narut/Documents/Coding/stock-calc/src/Component/Chart.js"],"names":["React","useState","useEffect","Line","Chart","quoteSpark","chartData","setChartData","convertDate","value","result","Date","date","getDate","month","getMonth","year","getFullYear","console","log","chartGenerate","labels","timestamp","map","item","datas","datasets","label","symbol","replace","backgroundColor","borderColor","data","close","options","scales","x","ticks","maxTicksLimit","maxRotation","minRotation","plugins","zoom","wheel","enabled","pinch","mode","pan","speed","threshold","displayRange"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\n\r\nconst Chart = ({ quoteSpark }) => {\r\n  const [chartData, setChartData] = useState(\"\");\r\n\r\n  const convertDate = (value) => {\r\n    const result = new Date(value * 1000);\r\n\r\n    let date = result.getDate();\r\n    let month = result.getMonth() + 1;\r\n    let year = result.getFullYear();\r\n\r\n    if (date < 10) {\r\n      date = \"0\" + date;\r\n    }\r\n    if (month < 10) {\r\n      month = \"0\" + month;\r\n    }\r\n\r\n    return `${date}/${month}/${year}`;\r\n  };\r\n\r\n  console.log(\"quoteSpark\", quoteSpark);\r\n\r\n  const chartGenerate = () => {\r\n    const labels = quoteSpark.timestamp.map((item) => convertDate(item));\r\n\r\n    const datas = {\r\n      labels: labels,\r\n      datasets: [\r\n        {\r\n          label: quoteSpark.symbol.replace(\".BK\", \"\"),\r\n          backgroundColor: \"rgb(255, 99, 132)\",\r\n          borderColor: \"rgb(255, 99, 132)\",\r\n          data: quoteSpark.close,\r\n        },\r\n      ],\r\n    };\r\n\r\n    setChartData(datas);\r\n  };\r\n\r\n  let options = {\r\n    scales: {\r\n      x: {\r\n        ticks: {\r\n          maxTicksLimit: 10,\r\n          maxRotation: 90,\r\n          minRotation: 90,\r\n        },\r\n      },\r\n    },\r\n    plugins: {\r\n      zoom: {\r\n        zoom: {\r\n          wheel: {\r\n            enabled: true,\r\n          },\r\n          pinch: {\r\n            enabled: true,\r\n          },\r\n          mode: \"xy\",\r\n        },\r\n        pan: {\r\n          enabled: true,\r\n          mode: \"xy\",\r\n          speed: 1,\r\n          threshold: 1,\r\n        },\r\n      },\r\n\r\n      //   annotation: {\r\n      //     annotations: {\r\n      //       line1: {\r\n      //         type: \"line\",\r\n      //         yMin: warningItem.war,\r\n      //         yMax: warningItem.war,\r\n      //         borderColor: \"rgb(255, 99, 132)\",\r\n      //         borderWidth: 2,\r\n      //       },\r\n      //       line2: {\r\n      //         type: \"line\",\r\n      //         xMin: transections[transections.length - 1].timeStamp,\r\n      //         xMax: transections[transections.length - 1].timeStamp,\r\n      //         borderColor: \"rgb(0, 0, 0)\",\r\n      //         borderWidth: 2,\r\n      //       },\r\n      //     },\r\n      //   },\r\n    },\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (quoteSpark) chartGenerate();\r\n  }, [quoteSpark]);\r\n\r\n  const displayRange = (\r\n    <>\r\n      <div>\r\n        <input type=\"checkbox\" className=\"btn-check\" id=\"range-1d\" />\r\n        <label className=\"btn btn-outline-primary\" htmlFor=\"range-1d\">\r\n          Single toggle\r\n        </label>\r\n      </div>\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <Line data={chartData} options={options} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n"]},"metadata":{},"sourceType":"module"}