{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\n\nfunction useKeyPress(targetKey) {\n  _s();\n\n  // State for keeping track of whether key is pressed\n  const [keyPressed, setKeyPressed] = useState < boolean > false; // If pressed key is our target key then set to true\n\n  function downHandler({\n    key\n  }) {\n    if (key === targetKey) {\n      setKeyPressed(true);\n    }\n  } // If released key is our target key then set to false\n\n\n  const upHandler = ({\n    key\n  }) => {\n    if (key === targetKey) {\n      setKeyPressed(false);\n    }\n  }; // Add event listeners\n\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", downHandler);\n    window.addEventListener(\"keyup\", upHandler); // Remove event listeners on cleanup\n\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return keyPressed;\n}\n\n_s(useKeyPress, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\nexport default useKeyPress;","map":{"version":3,"sources":["C:/Users/narut/Documents/Coding/stock-calc/src/Hooks/useKeyPress.js"],"names":["useState","useKeyPress","targetKey","keyPressed","setKeyPressed","boolean","downHandler","key","upHandler","useEffect","window","addEventListener","removeEventListener"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,SAASC,WAAT,CAAqBC,SAArB,EAAgC;AAAA;;AAC9B;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BJ,QAAQ,GAAGK,OAAX,GAAqB,KAAzD,CAF8B,CAG9B;;AACA,WAASC,WAAT,CAAqB;AAAEC,IAAAA;AAAF,GAArB,EAA8B;AAC5B,QAAIA,GAAG,KAAKL,SAAZ,EAAuB;AACrBE,MAAAA,aAAa,CAAC,IAAD,CAAb;AACD;AACF,GAR6B,CAS9B;;;AACA,QAAMI,SAAS,GAAG,CAAC;AAAED,IAAAA;AAAF,GAAD,KAAa;AAC7B,QAAIA,GAAG,KAAKL,SAAZ,EAAuB;AACrBE,MAAAA,aAAa,CAAC,KAAD,CAAb;AACD;AACF,GAJD,CAV8B,CAe9B;;;AACAK,EAAAA,SAAS,CAAC,MAAM;AACdC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCL,WAAnC;AACAI,IAAAA,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiCH,SAAjC,EAFc,CAGd;;AACA,WAAO,MAAM;AACXE,MAAAA,MAAM,CAACE,mBAAP,CAA2B,SAA3B,EAAsCN,WAAtC;AACAI,MAAAA,MAAM,CAACE,mBAAP,CAA2B,OAA3B,EAAoCJ,SAApC;AACD,KAHD;AAID,GARQ,EAQN,EARM,CAAT,CAhB8B,CAwBtB;;AACR,SAAOL,UAAP;AACD;;GA1BQF,W;;AA4BT,eAAeA,WAAf","sourcesContent":["import { useState } from \"react\";\r\n\r\nfunction useKeyPress(targetKey) {\r\n  // State for keeping track of whether key is pressed\r\n  const [keyPressed, setKeyPressed] = useState < boolean > false;\r\n  // If pressed key is our target key then set to true\r\n  function downHandler({ key }) {\r\n    if (key === targetKey) {\r\n      setKeyPressed(true);\r\n    }\r\n  }\r\n  // If released key is our target key then set to false\r\n  const upHandler = ({ key }) => {\r\n    if (key === targetKey) {\r\n      setKeyPressed(false);\r\n    }\r\n  };\r\n  // Add event listeners\r\n  useEffect(() => {\r\n    window.addEventListener(\"keydown\", downHandler);\r\n    window.addEventListener(\"keyup\", upHandler);\r\n    // Remove event listeners on cleanup\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", downHandler);\r\n      window.removeEventListener(\"keyup\", upHandler);\r\n    };\r\n  }, []); // Empty array ensures that effect is only run on mount and unmount\r\n  return keyPressed;\r\n}\r\n\r\nexport default useKeyPress;\r\n"]},"metadata":{},"sourceType":"module"}