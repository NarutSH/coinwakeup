{"ast":null,"code":"var url = require(\"url\");\n\nvar URL = url.URL;\n\nvar http = require(\"http\");\n\nvar https = require(\"https\");\n\nvar Writable = require(\"stream\").Writable;\n\nvar assert = require(\"assert\");\n\nvar debug = require(\"./debug\"); // Create handlers that pass events from native requests\n\n\nvar events = [\"abort\", \"aborted\", \"connect\", \"error\", \"socket\", \"timeout\"];\nvar eventHandlers = Object.create(null);\nevents.forEach(function (event) {\n  eventHandlers[event] = function (arg1, arg2, arg3) {\n    this._redirectable.emit(event, arg1, arg2, arg3);\n  };\n}); // Error types with codes\n\nvar RedirectionError = createErrorType(\"ERR_FR_REDIRECTION_FAILURE\", \"\");\nvar TooManyRedirectsError = createErrorType(\"ERR_FR_TOO_MANY_REDIRECTS\", \"Maximum number of redirects exceeded\");\nvar MaxBodyLengthExceededError = createErrorType(\"ERR_FR_MAX_BODY_LENGTH_EXCEEDED\", \"Request body larger than maxBodyLength limit\");\nvar WriteAfterEndError = createErrorType(\"ERR_STREAM_WRITE_AFTER_END\", \"write after end\"); // An HTTP(S) request that can be redirected\n\nfunction RedirectableRequest(options, responseCallback) {\n  // Initialize the request\n  Writable.call(this);\n\n  this._sanitizeOptions(options);\n\n  this._options = options;\n  this._ended = false;\n  this._ending = false;\n  this._redirectCount = 0;\n  this._redirects = [];\n  this._requestBodyLength = 0;\n  this._requestBodyBuffers = []; // Attach a callback if passed\n\n  if (responseCallback) {\n    this.on(\"response\", responseCallback);\n  } // React to responses of native requests\n\n\n  var self = this;\n\n  this._onNativeResponse = function (response) {\n    self._processResponse(response);\n  }; // Perform the first request\n\n\n  this._performRequest();\n}\n\nRedirectableRequest.prototype = Object.create(Writable.prototype);\n\nRedirectableRequest.prototype.abort = function () {\n  abortRequest(this._currentRequest);\n  this.emit(\"abort\");\n}; // Writes buffered data to the current native request\n\n\nRedirectableRequest.prototype.write = function (data, encoding, callback) {\n  // Writing is not allowed if end has been called\n  if (this._ending) {\n    throw new WriteAfterEndError();\n  } // Validate input and shift parameters if necessary\n\n\n  if (!(typeof data === \"string\" || typeof data === \"object\" && \"length\" in data)) {\n    throw new TypeError(\"data should be a string, Buffer or Uint8Array\");\n  }\n\n  if (typeof encoding === \"function\") {\n    callback = encoding;\n    encoding = null;\n  } // Ignore empty buffers, since writing them doesn't invoke the callback\n  // https://github.com/nodejs/node/issues/22066\n\n\n  if (data.length === 0) {\n    if (callback) {\n      callback();\n    }\n\n    return;\n  } // Only write when we don't exceed the maximum body length\n\n\n  if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {\n    this._requestBodyLength += data.length;\n\n    this._requestBodyBuffers.push({\n      data: data,\n      encoding: encoding\n    });\n\n    this._currentRequest.write(data, encoding, callback);\n  } // Error when we exceed the maximum body length\n  else {\n    this.emit(\"error\", new MaxBodyLengthExceededError());\n    this.abort();\n  }\n}; // Ends the current native request\n\n\nRedirectableRequest.prototype.end = function (data, encoding, callback) {\n  // Shift parameters if necessary\n  if (typeof data === \"function\") {\n    callback = data;\n    data = encoding = null;\n  } else if (typeof encoding === \"function\") {\n    callback = encoding;\n    encoding = null;\n  } // Write data if needed and end\n\n\n  if (!data) {\n    this._ended = this._ending = true;\n\n    this._currentRequest.end(null, null, callback);\n  } else {\n    var self = this;\n    var currentRequest = this._currentRequest;\n    this.write(data, encoding, function () {\n      self._ended = true;\n      currentRequest.end(null, null, callback);\n    });\n    this._ending = true;\n  }\n}; // Sets a header value on the current native request\n\n\nRedirectableRequest.prototype.setHeader = function (name, value) {\n  this._options.headers[name] = value;\n\n  this._currentRequest.setHeader(name, value);\n}; // Clears a header value on the current native request\n\n\nRedirectableRequest.prototype.removeHeader = function (name) {\n  delete this._options.headers[name];\n\n  this._currentRequest.removeHeader(name);\n}; // Global timeout for all underlying requests\n\n\nRedirectableRequest.prototype.setTimeout = function (msecs, callback) {\n  var self = this; // Destroys the socket on timeout\n\n  function destroyOnTimeout(socket) {\n    socket.setTimeout(msecs);\n    socket.removeListener(\"timeout\", socket.destroy);\n    socket.addListener(\"timeout\", socket.destroy);\n  } // Sets up a timer to trigger a timeout event\n\n\n  function startTimer(socket) {\n    if (self._timeout) {\n      clearTimeout(self._timeout);\n    }\n\n    self._timeout = setTimeout(function () {\n      self.emit(\"timeout\");\n      clearTimer();\n    }, msecs);\n    destroyOnTimeout(socket);\n  } // Stops a timeout from triggering\n\n\n  function clearTimer() {\n    if (self._timeout) {\n      clearTimeout(self._timeout);\n      self._timeout = null;\n    }\n\n    if (callback) {\n      self.removeListener(\"timeout\", callback);\n    }\n\n    if (!self.socket) {\n      self._currentRequest.removeListener(\"socket\", startTimer);\n    }\n  } // Attach callback if passed\n\n\n  if (callback) {\n    this.on(\"timeout\", callback);\n  } // Start the timer if or when the socket is opened\n\n\n  if (this.socket) {\n    startTimer(this.socket);\n  } else {\n    this._currentRequest.once(\"socket\", startTimer);\n  } // Clean up on events\n\n\n  this.on(\"socket\", destroyOnTimeout);\n  this.once(\"response\", clearTimer);\n  this.once(\"error\", clearTimer);\n  return this;\n}; // Proxy all other public ClientRequest methods\n\n\n[\"flushHeaders\", \"getHeader\", \"setNoDelay\", \"setSocketKeepAlive\"].forEach(function (method) {\n  RedirectableRequest.prototype[method] = function (a, b) {\n    return this._currentRequest[method](a, b);\n  };\n}); // Proxy all public ClientRequest properties\n\n[\"aborted\", \"connection\", \"socket\"].forEach(function (property) {\n  Object.defineProperty(RedirectableRequest.prototype, property, {\n    get: function () {\n      return this._currentRequest[property];\n    }\n  });\n});\n\nRedirectableRequest.prototype._sanitizeOptions = function (options) {\n  // Ensure headers are always present\n  if (!options.headers) {\n    options.headers = {};\n  } // Since http.request treats host as an alias of hostname,\n  // but the url module interprets host as hostname plus port,\n  // eliminate the host property to avoid confusion.\n\n\n  if (options.host) {\n    // Use hostname if set, because it has precedence\n    if (!options.hostname) {\n      options.hostname = options.host;\n    }\n\n    delete options.host;\n  } // Complete the URL object when necessary\n\n\n  if (!options.pathname && options.path) {\n    var searchPos = options.path.indexOf(\"?\");\n\n    if (searchPos < 0) {\n      options.pathname = options.path;\n    } else {\n      options.pathname = options.path.substring(0, searchPos);\n      options.search = options.path.substring(searchPos);\n    }\n  }\n}; // Executes the next native request (initial or redirect)\n\n\nRedirectableRequest.prototype._performRequest = function () {\n  // Load the native protocol\n  var protocol = this._options.protocol;\n  var nativeProtocol = this._options.nativeProtocols[protocol];\n\n  if (!nativeProtocol) {\n    this.emit(\"error\", new TypeError(\"Unsupported protocol \" + protocol));\n    return;\n  } // If specified, use the agent corresponding to the protocol\n  // (HTTP and HTTPS use different types of agents)\n\n\n  if (this._options.agents) {\n    var scheme = protocol.substr(0, protocol.length - 1);\n    this._options.agent = this._options.agents[scheme];\n  } // Create the native request\n\n\n  var request = this._currentRequest = nativeProtocol.request(this._options, this._onNativeResponse);\n  this._currentUrl = url.format(this._options); // Set up event handlers\n\n  request._redirectable = this;\n\n  for (var e = 0; e < events.length; e++) {\n    request.on(events[e], eventHandlers[events[e]]);\n  } // End a redirected request\n  // (The first request must be ended explicitly with RedirectableRequest#end)\n\n\n  if (this._isRedirect) {\n    // Write the request entity and end.\n    var i = 0;\n    var self = this;\n    var buffers = this._requestBodyBuffers;\n\n    (function writeNext(error) {\n      // Only write if this request has not been redirected yet\n\n      /* istanbul ignore else */\n      if (request === self._currentRequest) {\n        // Report any write errors\n\n        /* istanbul ignore if */\n        if (error) {\n          self.emit(\"error\", error);\n        } // Write the next buffer if there are still left\n        else if (i < buffers.length) {\n          var buffer = buffers[i++];\n          /* istanbul ignore else */\n\n          if (!request.finished) {\n            request.write(buffer.data, buffer.encoding, writeNext);\n          }\n        } // End the request if `end` has been called on us\n        else if (self._ended) {\n          request.end();\n        }\n      }\n    })();\n  }\n}; // Processes a response from the current native request\n\n\nRedirectableRequest.prototype._processResponse = function (response) {\n  // Store the redirected response\n  var statusCode = response.statusCode;\n\n  if (this._options.trackRedirects) {\n    this._redirects.push({\n      url: this._currentUrl,\n      headers: response.headers,\n      statusCode: statusCode\n    });\n  } // RFC7231ยง6.4: The 3xx (Redirection) class of status code indicates\n  // that further action needs to be taken by the user agent in order to\n  // fulfill the request. If a Location header field is provided,\n  // the user agent MAY automatically redirect its request to the URI\n  // referenced by the Location field value,\n  // even if the specific status code is not understood.\n\n\n  var location = response.headers.location;\n\n  if (location && this._options.followRedirects !== false && statusCode >= 300 && statusCode < 400) {\n    // Abort the current request\n    abortRequest(this._currentRequest); // Discard the remainder of the response to avoid waiting for data\n\n    response.destroy(); // RFC7231ยง6.4: A client SHOULD detect and intervene\n    // in cyclical redirections (i.e., \"infinite\" redirection loops).\n\n    if (++this._redirectCount > this._options.maxRedirects) {\n      this.emit(\"error\", new TooManyRedirectsError());\n      return;\n    } // RFC7231ยง6.4: Automatic redirection needs to done with\n    // care for methods not known to be safe, [โฆ]\n    // RFC7231ยง6.4.2โ3: For historical reasons, a user agent MAY change\n    // the request method from POST to GET for the subsequent request.\n\n\n    if ((statusCode === 301 || statusCode === 302) && this._options.method === \"POST\" || // RFC7231ยง6.4.4: The 303 (See Other) status code indicates that\n    // the server is redirecting the user agent to a different resource [โฆ]\n    // A user agent can perform a retrieval request targeting that URI\n    // (a GET or HEAD request if using HTTP) [โฆ]\n    statusCode === 303 && !/^(?:GET|HEAD)$/.test(this._options.method)) {\n      this._options.method = \"GET\"; // Drop a possible entity and headers related to it\n\n      this._requestBodyBuffers = [];\n      removeMatchingHeaders(/^content-/i, this._options.headers);\n    } // Drop the Host header, as the redirect might lead to a different host\n\n\n    var previousHostName = removeMatchingHeaders(/^host$/i, this._options.headers) || url.parse(this._currentUrl).hostname; // Create the redirected request\n\n    var redirectUrl = url.resolve(this._currentUrl, location);\n    debug(\"redirecting to\", redirectUrl);\n    this._isRedirect = true;\n    var redirectUrlParts = url.parse(redirectUrl);\n    Object.assign(this._options, redirectUrlParts); // Drop the Authorization header if redirecting to another host\n\n    if (redirectUrlParts.hostname !== previousHostName) {\n      removeMatchingHeaders(/^authorization$/i, this._options.headers);\n    } // Evaluate the beforeRedirect callback\n\n\n    if (typeof this._options.beforeRedirect === \"function\") {\n      var responseDetails = {\n        headers: response.headers\n      };\n\n      try {\n        this._options.beforeRedirect.call(null, this._options, responseDetails);\n      } catch (err) {\n        this.emit(\"error\", err);\n        return;\n      }\n\n      this._sanitizeOptions(this._options);\n    } // Perform the redirected request\n\n\n    try {\n      this._performRequest();\n    } catch (cause) {\n      var error = new RedirectionError(\"Redirected request failed: \" + cause.message);\n      error.cause = cause;\n      this.emit(\"error\", error);\n    }\n  } else {\n    // The response is not a redirect; return it as-is\n    response.responseUrl = this._currentUrl;\n    response.redirects = this._redirects;\n    this.emit(\"response\", response); // Clean up\n\n    this._requestBodyBuffers = [];\n  }\n}; // Wraps the key/value object of protocols with redirect functionality\n\n\nfunction wrap(protocols) {\n  // Default settings\n  var exports = {\n    maxRedirects: 21,\n    maxBodyLength: 10 * 1024 * 1024\n  }; // Wrap each protocol\n\n  var nativeProtocols = {};\n  Object.keys(protocols).forEach(function (scheme) {\n    var protocol = scheme + \":\";\n    var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];\n    var wrappedProtocol = exports[scheme] = Object.create(nativeProtocol); // Executes a request, following redirects\n\n    function request(input, options, callback) {\n      // Parse parameters\n      if (typeof input === \"string\") {\n        var urlStr = input;\n\n        try {\n          input = urlToOptions(new URL(urlStr));\n        } catch (err) {\n          /* istanbul ignore next */\n          input = url.parse(urlStr);\n        }\n      } else if (URL && input instanceof URL) {\n        input = urlToOptions(input);\n      } else {\n        callback = options;\n        options = input;\n        input = {\n          protocol: protocol\n        };\n      }\n\n      if (typeof options === \"function\") {\n        callback = options;\n        options = null;\n      } // Set defaults\n\n\n      options = Object.assign({\n        maxRedirects: exports.maxRedirects,\n        maxBodyLength: exports.maxBodyLength\n      }, input, options);\n      options.nativeProtocols = nativeProtocols;\n      assert.equal(options.protocol, protocol, \"protocol mismatch\");\n      debug(\"options\", options);\n      return new RedirectableRequest(options, callback);\n    } // Executes a GET request, following redirects\n\n\n    function get(input, options, callback) {\n      var wrappedRequest = wrappedProtocol.request(input, options, callback);\n      wrappedRequest.end();\n      return wrappedRequest;\n    } // Expose the properties on the wrapped protocol\n\n\n    Object.defineProperties(wrappedProtocol, {\n      request: {\n        value: request,\n        configurable: true,\n        enumerable: true,\n        writable: true\n      },\n      get: {\n        value: get,\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }\n    });\n  });\n  return exports;\n}\n/* istanbul ignore next */\n\n\nfunction noop() {\n  /* empty */\n} // from https://github.com/nodejs/node/blob/master/lib/internal/url.js\n\n\nfunction urlToOptions(urlObject) {\n  var options = {\n    protocol: urlObject.protocol,\n    hostname: urlObject.hostname.startsWith(\"[\") ?\n    /* istanbul ignore next */\n    urlObject.hostname.slice(1, -1) : urlObject.hostname,\n    hash: urlObject.hash,\n    search: urlObject.search,\n    pathname: urlObject.pathname,\n    path: urlObject.pathname + urlObject.search,\n    href: urlObject.href\n  };\n\n  if (urlObject.port !== \"\") {\n    options.port = Number(urlObject.port);\n  }\n\n  return options;\n}\n\nfunction removeMatchingHeaders(regex, headers) {\n  var lastValue;\n\n  for (var header in headers) {\n    if (regex.test(header)) {\n      lastValue = headers[header];\n      delete headers[header];\n    }\n  }\n\n  return lastValue;\n}\n\nfunction createErrorType(code, defaultMessage) {\n  function CustomError(message) {\n    Error.captureStackTrace(this, this.constructor);\n    this.message = message || defaultMessage;\n  }\n\n  CustomError.prototype = new Error();\n  CustomError.prototype.constructor = CustomError;\n  CustomError.prototype.name = \"Error [\" + code + \"]\";\n  CustomError.prototype.code = code;\n  return CustomError;\n}\n\nfunction abortRequest(request) {\n  for (var e = 0; e < events.length; e++) {\n    request.removeListener(events[e], eventHandlers[events[e]]);\n  }\n\n  request.on(\"error\", noop);\n  request.abort();\n} // Exports\n\n\nmodule.exports = wrap({\n  http: http,\n  https: https\n});\nmodule.exports.wrap = wrap;","map":{"version":3,"sources":["C:/Users/narut/Documents/Coding/stock-valuate/node_modules/follow-redirects/index.js"],"names":["url","require","URL","http","https","Writable","assert","debug","events","eventHandlers","Object","create","forEach","event","arg1","arg2","arg3","_redirectable","emit","RedirectionError","createErrorType","TooManyRedirectsError","MaxBodyLengthExceededError","WriteAfterEndError","RedirectableRequest","options","responseCallback","call","_sanitizeOptions","_options","_ended","_ending","_redirectCount","_redirects","_requestBodyLength","_requestBodyBuffers","on","self","_onNativeResponse","response","_processResponse","_performRequest","prototype","abort","abortRequest","_currentRequest","write","data","encoding","callback","TypeError","length","maxBodyLength","push","end","currentRequest","setHeader","name","value","headers","removeHeader","setTimeout","msecs","destroyOnTimeout","socket","removeListener","destroy","addListener","startTimer","_timeout","clearTimeout","clearTimer","once","method","a","b","property","defineProperty","get","host","hostname","pathname","path","searchPos","indexOf","substring","search","protocol","nativeProtocol","nativeProtocols","agents","scheme","substr","agent","request","_currentUrl","format","e","_isRedirect","i","buffers","writeNext","error","buffer","finished","statusCode","trackRedirects","location","followRedirects","maxRedirects","test","removeMatchingHeaders","previousHostName","parse","redirectUrl","resolve","redirectUrlParts","assign","beforeRedirect","responseDetails","err","cause","message","responseUrl","redirects","wrap","protocols","exports","keys","wrappedProtocol","input","urlStr","urlToOptions","equal","wrappedRequest","defineProperties","configurable","enumerable","writable","noop","urlObject","startsWith","slice","hash","href","port","Number","regex","lastValue","header","code","defaultMessage","CustomError","Error","captureStackTrace","constructor","module"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAjB;;AACA,IAAIC,GAAG,GAAGF,GAAG,CAACE,GAAd;;AACA,IAAIC,IAAI,GAAGF,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIG,KAAK,GAAGH,OAAO,CAAC,OAAD,CAAnB;;AACA,IAAII,QAAQ,GAAGJ,OAAO,CAAC,QAAD,CAAP,CAAkBI,QAAjC;;AACA,IAAIC,MAAM,GAAGL,OAAO,CAAC,QAAD,CAApB;;AACA,IAAIM,KAAK,GAAGN,OAAO,CAAC,SAAD,CAAnB,C,CAEA;;;AACA,IAAIO,MAAM,GAAG,CAAC,OAAD,EAAU,SAAV,EAAqB,SAArB,EAAgC,OAAhC,EAAyC,QAAzC,EAAmD,SAAnD,CAAb;AACA,IAAIC,aAAa,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAApB;AACAH,MAAM,CAACI,OAAP,CAAe,UAAUC,KAAV,EAAiB;AAC9BJ,EAAAA,aAAa,CAACI,KAAD,CAAb,GAAuB,UAAUC,IAAV,EAAgBC,IAAhB,EAAsBC,IAAtB,EAA4B;AACjD,SAAKC,aAAL,CAAmBC,IAAnB,CAAwBL,KAAxB,EAA+BC,IAA/B,EAAqCC,IAArC,EAA2CC,IAA3C;AACD,GAFD;AAGD,CAJD,E,CAMA;;AACA,IAAIG,gBAAgB,GAAGC,eAAe,CACpC,4BADoC,EAEpC,EAFoC,CAAtC;AAIA,IAAIC,qBAAqB,GAAGD,eAAe,CACzC,2BADyC,EAEzC,sCAFyC,CAA3C;AAIA,IAAIE,0BAA0B,GAAGF,eAAe,CAC9C,iCAD8C,EAE9C,8CAF8C,CAAhD;AAIA,IAAIG,kBAAkB,GAAGH,eAAe,CACtC,4BADsC,EAEtC,iBAFsC,CAAxC,C,CAKA;;AACA,SAASI,mBAAT,CAA6BC,OAA7B,EAAsCC,gBAAtC,EAAwD;AACtD;AACArB,EAAAA,QAAQ,CAACsB,IAAT,CAAc,IAAd;;AACA,OAAKC,gBAAL,CAAsBH,OAAtB;;AACA,OAAKI,QAAL,GAAgBJ,OAAhB;AACA,OAAKK,MAAL,GAAc,KAAd;AACA,OAAKC,OAAL,GAAe,KAAf;AACA,OAAKC,cAAL,GAAsB,CAAtB;AACA,OAAKC,UAAL,GAAkB,EAAlB;AACA,OAAKC,kBAAL,GAA0B,CAA1B;AACA,OAAKC,mBAAL,GAA2B,EAA3B,CAVsD,CAYtD;;AACA,MAAIT,gBAAJ,EAAsB;AACpB,SAAKU,EAAL,CAAQ,UAAR,EAAoBV,gBAApB;AACD,GAfqD,CAiBtD;;;AACA,MAAIW,IAAI,GAAG,IAAX;;AACA,OAAKC,iBAAL,GAAyB,UAAUC,QAAV,EAAoB;AAC3CF,IAAAA,IAAI,CAACG,gBAAL,CAAsBD,QAAtB;AACD,GAFD,CAnBsD,CAuBtD;;;AACA,OAAKE,eAAL;AACD;;AACDjB,mBAAmB,CAACkB,SAApB,GAAgChC,MAAM,CAACC,MAAP,CAAcN,QAAQ,CAACqC,SAAvB,CAAhC;;AAEAlB,mBAAmB,CAACkB,SAApB,CAA8BC,KAA9B,GAAsC,YAAY;AAChDC,EAAAA,YAAY,CAAC,KAAKC,eAAN,CAAZ;AACA,OAAK3B,IAAL,CAAU,OAAV;AACD,CAHD,C,CAKA;;;AACAM,mBAAmB,CAACkB,SAApB,CAA8BI,KAA9B,GAAsC,UAAUC,IAAV,EAAgBC,QAAhB,EAA0BC,QAA1B,EAAoC;AACxE;AACA,MAAI,KAAKlB,OAAT,EAAkB;AAChB,UAAM,IAAIR,kBAAJ,EAAN;AACD,GAJuE,CAMxE;;;AACA,MAAI,EAAE,OAAOwB,IAAP,KAAgB,QAAhB,IAA4B,OAAOA,IAAP,KAAgB,QAAhB,IAA6B,YAAYA,IAAvE,CAAJ,EAAmF;AACjF,UAAM,IAAIG,SAAJ,CAAc,+CAAd,CAAN;AACD;;AACD,MAAI,OAAOF,QAAP,KAAoB,UAAxB,EAAoC;AAClCC,IAAAA,QAAQ,GAAGD,QAAX;AACAA,IAAAA,QAAQ,GAAG,IAAX;AACD,GAbuE,CAexE;AACA;;;AACA,MAAID,IAAI,CAACI,MAAL,KAAgB,CAApB,EAAuB;AACrB,QAAIF,QAAJ,EAAc;AACZA,MAAAA,QAAQ;AACT;;AACD;AACD,GAtBuE,CAuBxE;;;AACA,MAAI,KAAKf,kBAAL,GAA0Ba,IAAI,CAACI,MAA/B,IAAyC,KAAKtB,QAAL,CAAcuB,aAA3D,EAA0E;AACxE,SAAKlB,kBAAL,IAA2Ba,IAAI,CAACI,MAAhC;;AACA,SAAKhB,mBAAL,CAAyBkB,IAAzB,CAA8B;AAAEN,MAAAA,IAAI,EAAEA,IAAR;AAAcC,MAAAA,QAAQ,EAAEA;AAAxB,KAA9B;;AACA,SAAKH,eAAL,CAAqBC,KAArB,CAA2BC,IAA3B,EAAiCC,QAAjC,EAA2CC,QAA3C;AACD,GAJD,CAKA;AALA,OAMK;AACH,SAAK/B,IAAL,CAAU,OAAV,EAAmB,IAAII,0BAAJ,EAAnB;AACA,SAAKqB,KAAL;AACD;AACF,CAlCD,C,CAoCA;;;AACAnB,mBAAmB,CAACkB,SAApB,CAA8BY,GAA9B,GAAoC,UAAUP,IAAV,EAAgBC,QAAhB,EAA0BC,QAA1B,EAAoC;AACtE;AACA,MAAI,OAAOF,IAAP,KAAgB,UAApB,EAAgC;AAC9BE,IAAAA,QAAQ,GAAGF,IAAX;AACAA,IAAAA,IAAI,GAAGC,QAAQ,GAAG,IAAlB;AACD,GAHD,MAIK,IAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AACvCC,IAAAA,QAAQ,GAAGD,QAAX;AACAA,IAAAA,QAAQ,GAAG,IAAX;AACD,GATqE,CAWtE;;;AACA,MAAI,CAACD,IAAL,EAAW;AACT,SAAKjB,MAAL,GAAc,KAAKC,OAAL,GAAe,IAA7B;;AACA,SAAKc,eAAL,CAAqBS,GAArB,CAAyB,IAAzB,EAA+B,IAA/B,EAAqCL,QAArC;AACD,GAHD,MAIK;AACH,QAAIZ,IAAI,GAAG,IAAX;AACA,QAAIkB,cAAc,GAAG,KAAKV,eAA1B;AACA,SAAKC,KAAL,CAAWC,IAAX,EAAiBC,QAAjB,EAA2B,YAAY;AACrCX,MAAAA,IAAI,CAACP,MAAL,GAAc,IAAd;AACAyB,MAAAA,cAAc,CAACD,GAAf,CAAmB,IAAnB,EAAyB,IAAzB,EAA+BL,QAA/B;AACD,KAHD;AAIA,SAAKlB,OAAL,GAAe,IAAf;AACD;AACF,CAzBD,C,CA2BA;;;AACAP,mBAAmB,CAACkB,SAApB,CAA8Bc,SAA9B,GAA0C,UAAUC,IAAV,EAAgBC,KAAhB,EAAuB;AAC/D,OAAK7B,QAAL,CAAc8B,OAAd,CAAsBF,IAAtB,IAA8BC,KAA9B;;AACA,OAAKb,eAAL,CAAqBW,SAArB,CAA+BC,IAA/B,EAAqCC,KAArC;AACD,CAHD,C,CAKA;;;AACAlC,mBAAmB,CAACkB,SAApB,CAA8BkB,YAA9B,GAA6C,UAAUH,IAAV,EAAgB;AAC3D,SAAO,KAAK5B,QAAL,CAAc8B,OAAd,CAAsBF,IAAtB,CAAP;;AACA,OAAKZ,eAAL,CAAqBe,YAArB,CAAkCH,IAAlC;AACD,CAHD,C,CAKA;;;AACAjC,mBAAmB,CAACkB,SAApB,CAA8BmB,UAA9B,GAA2C,UAAUC,KAAV,EAAiBb,QAAjB,EAA2B;AACpE,MAAIZ,IAAI,GAAG,IAAX,CADoE,CAGpE;;AACA,WAAS0B,gBAAT,CAA0BC,MAA1B,EAAkC;AAChCA,IAAAA,MAAM,CAACH,UAAP,CAAkBC,KAAlB;AACAE,IAAAA,MAAM,CAACC,cAAP,CAAsB,SAAtB,EAAiCD,MAAM,CAACE,OAAxC;AACAF,IAAAA,MAAM,CAACG,WAAP,CAAmB,SAAnB,EAA8BH,MAAM,CAACE,OAArC;AACD,GARmE,CAUpE;;;AACA,WAASE,UAAT,CAAoBJ,MAApB,EAA4B;AAC1B,QAAI3B,IAAI,CAACgC,QAAT,EAAmB;AACjBC,MAAAA,YAAY,CAACjC,IAAI,CAACgC,QAAN,CAAZ;AACD;;AACDhC,IAAAA,IAAI,CAACgC,QAAL,GAAgBR,UAAU,CAAC,YAAY;AACrCxB,MAAAA,IAAI,CAACnB,IAAL,CAAU,SAAV;AACAqD,MAAAA,UAAU;AACX,KAHyB,EAGvBT,KAHuB,CAA1B;AAIAC,IAAAA,gBAAgB,CAACC,MAAD,CAAhB;AACD,GApBmE,CAsBpE;;;AACA,WAASO,UAAT,GAAsB;AACpB,QAAIlC,IAAI,CAACgC,QAAT,EAAmB;AACjBC,MAAAA,YAAY,CAACjC,IAAI,CAACgC,QAAN,CAAZ;AACAhC,MAAAA,IAAI,CAACgC,QAAL,GAAgB,IAAhB;AACD;;AACD,QAAIpB,QAAJ,EAAc;AACZZ,MAAAA,IAAI,CAAC4B,cAAL,CAAoB,SAApB,EAA+BhB,QAA/B;AACD;;AACD,QAAI,CAACZ,IAAI,CAAC2B,MAAV,EAAkB;AAChB3B,MAAAA,IAAI,CAACQ,eAAL,CAAqBoB,cAArB,CAAoC,QAApC,EAA8CG,UAA9C;AACD;AACF,GAlCmE,CAoCpE;;;AACA,MAAInB,QAAJ,EAAc;AACZ,SAAKb,EAAL,CAAQ,SAAR,EAAmBa,QAAnB;AACD,GAvCmE,CAyCpE;;;AACA,MAAI,KAAKe,MAAT,EAAiB;AACfI,IAAAA,UAAU,CAAC,KAAKJ,MAAN,CAAV;AACD,GAFD,MAGK;AACH,SAAKnB,eAAL,CAAqB2B,IAArB,CAA0B,QAA1B,EAAoCJ,UAApC;AACD,GA/CmE,CAiDpE;;;AACA,OAAKhC,EAAL,CAAQ,QAAR,EAAkB2B,gBAAlB;AACA,OAAKS,IAAL,CAAU,UAAV,EAAsBD,UAAtB;AACA,OAAKC,IAAL,CAAU,OAAV,EAAmBD,UAAnB;AAEA,SAAO,IAAP;AACD,CAvDD,C,CAyDA;;;AACA,CACE,cADF,EACkB,WADlB,EAEE,YAFF,EAEgB,oBAFhB,EAGE3D,OAHF,CAGU,UAAU6D,MAAV,EAAkB;AAC1BjD,EAAAA,mBAAmB,CAACkB,SAApB,CAA8B+B,MAA9B,IAAwC,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AACtD,WAAO,KAAK9B,eAAL,CAAqB4B,MAArB,EAA6BC,CAA7B,EAAgCC,CAAhC,CAAP;AACD,GAFD;AAGD,CAPD,E,CASA;;AACA,CAAC,SAAD,EAAY,YAAZ,EAA0B,QAA1B,EAAoC/D,OAApC,CAA4C,UAAUgE,QAAV,EAAoB;AAC9DlE,EAAAA,MAAM,CAACmE,cAAP,CAAsBrD,mBAAmB,CAACkB,SAA1C,EAAqDkC,QAArD,EAA+D;AAC7DE,IAAAA,GAAG,EAAE,YAAY;AAAE,aAAO,KAAKjC,eAAL,CAAqB+B,QAArB,CAAP;AAAwC;AADE,GAA/D;AAGD,CAJD;;AAMApD,mBAAmB,CAACkB,SAApB,CAA8Bd,gBAA9B,GAAiD,UAAUH,OAAV,EAAmB;AAClE;AACA,MAAI,CAACA,OAAO,CAACkC,OAAb,EAAsB;AACpBlC,IAAAA,OAAO,CAACkC,OAAR,GAAkB,EAAlB;AACD,GAJiE,CAMlE;AACA;AACA;;;AACA,MAAIlC,OAAO,CAACsD,IAAZ,EAAkB;AAChB;AACA,QAAI,CAACtD,OAAO,CAACuD,QAAb,EAAuB;AACrBvD,MAAAA,OAAO,CAACuD,QAAR,GAAmBvD,OAAO,CAACsD,IAA3B;AACD;;AACD,WAAOtD,OAAO,CAACsD,IAAf;AACD,GAfiE,CAiBlE;;;AACA,MAAI,CAACtD,OAAO,CAACwD,QAAT,IAAqBxD,OAAO,CAACyD,IAAjC,EAAuC;AACrC,QAAIC,SAAS,GAAG1D,OAAO,CAACyD,IAAR,CAAaE,OAAb,CAAqB,GAArB,CAAhB;;AACA,QAAID,SAAS,GAAG,CAAhB,EAAmB;AACjB1D,MAAAA,OAAO,CAACwD,QAAR,GAAmBxD,OAAO,CAACyD,IAA3B;AACD,KAFD,MAGK;AACHzD,MAAAA,OAAO,CAACwD,QAAR,GAAmBxD,OAAO,CAACyD,IAAR,CAAaG,SAAb,CAAuB,CAAvB,EAA0BF,SAA1B,CAAnB;AACA1D,MAAAA,OAAO,CAAC6D,MAAR,GAAiB7D,OAAO,CAACyD,IAAR,CAAaG,SAAb,CAAuBF,SAAvB,CAAjB;AACD;AACF;AACF,CA5BD,C,CA+BA;;;AACA3D,mBAAmB,CAACkB,SAApB,CAA8BD,eAA9B,GAAgD,YAAY;AAC1D;AACA,MAAI8C,QAAQ,GAAG,KAAK1D,QAAL,CAAc0D,QAA7B;AACA,MAAIC,cAAc,GAAG,KAAK3D,QAAL,CAAc4D,eAAd,CAA8BF,QAA9B,CAArB;;AACA,MAAI,CAACC,cAAL,EAAqB;AACnB,SAAKtE,IAAL,CAAU,OAAV,EAAmB,IAAIgC,SAAJ,CAAc,0BAA0BqC,QAAxC,CAAnB;AACA;AACD,GAPyD,CAS1D;AACA;;;AACA,MAAI,KAAK1D,QAAL,CAAc6D,MAAlB,EAA0B;AACxB,QAAIC,MAAM,GAAGJ,QAAQ,CAACK,MAAT,CAAgB,CAAhB,EAAmBL,QAAQ,CAACpC,MAAT,GAAkB,CAArC,CAAb;AACA,SAAKtB,QAAL,CAAcgE,KAAd,GAAsB,KAAKhE,QAAL,CAAc6D,MAAd,CAAqBC,MAArB,CAAtB;AACD,GAdyD,CAgB1D;;;AACA,MAAIG,OAAO,GAAG,KAAKjD,eAAL,GACR2C,cAAc,CAACM,OAAf,CAAuB,KAAKjE,QAA5B,EAAsC,KAAKS,iBAA3C,CADN;AAEA,OAAKyD,WAAL,GAAmB/F,GAAG,CAACgG,MAAJ,CAAW,KAAKnE,QAAhB,CAAnB,CAnB0D,CAqB1D;;AACAiE,EAAAA,OAAO,CAAC7E,aAAR,GAAwB,IAAxB;;AACA,OAAK,IAAIgF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGzF,MAAM,CAAC2C,MAA3B,EAAmC8C,CAAC,EAApC,EAAwC;AACtCH,IAAAA,OAAO,CAAC1D,EAAR,CAAW5B,MAAM,CAACyF,CAAD,CAAjB,EAAsBxF,aAAa,CAACD,MAAM,CAACyF,CAAD,CAAP,CAAnC;AACD,GAzByD,CA2B1D;AACA;;;AACA,MAAI,KAAKC,WAAT,EAAsB;AACpB;AACA,QAAIC,CAAC,GAAG,CAAR;AACA,QAAI9D,IAAI,GAAG,IAAX;AACA,QAAI+D,OAAO,GAAG,KAAKjE,mBAAnB;;AACC,cAASkE,SAAT,CAAmBC,KAAnB,EAA0B;AACzB;;AACA;AACA,UAAIR,OAAO,KAAKzD,IAAI,CAACQ,eAArB,EAAsC;AACpC;;AACA;AACA,YAAIyD,KAAJ,EAAW;AACTjE,UAAAA,IAAI,CAACnB,IAAL,CAAU,OAAV,EAAmBoF,KAAnB;AACD,SAFD,CAGA;AAHA,aAIK,IAAIH,CAAC,GAAGC,OAAO,CAACjD,MAAhB,EAAwB;AAC3B,cAAIoD,MAAM,GAAGH,OAAO,CAACD,CAAC,EAAF,CAApB;AACA;;AACA,cAAI,CAACL,OAAO,CAACU,QAAb,EAAuB;AACrBV,YAAAA,OAAO,CAAChD,KAAR,CAAcyD,MAAM,CAACxD,IAArB,EAA2BwD,MAAM,CAACvD,QAAlC,EAA4CqD,SAA5C;AACD;AACF,SANI,CAOL;AAPK,aAQA,IAAIhE,IAAI,CAACP,MAAT,EAAiB;AACpBgE,UAAAA,OAAO,CAACxC,GAAR;AACD;AACF;AACF,KAtBA,GAAD;AAuBD;AACF,CA1DD,C,CA4DA;;;AACA9B,mBAAmB,CAACkB,SAApB,CAA8BF,gBAA9B,GAAiD,UAAUD,QAAV,EAAoB;AACnE;AACA,MAAIkE,UAAU,GAAGlE,QAAQ,CAACkE,UAA1B;;AACA,MAAI,KAAK5E,QAAL,CAAc6E,cAAlB,EAAkC;AAChC,SAAKzE,UAAL,CAAgBoB,IAAhB,CAAqB;AACnBrD,MAAAA,GAAG,EAAE,KAAK+F,WADS;AAEnBpC,MAAAA,OAAO,EAAEpB,QAAQ,CAACoB,OAFC;AAGnB8C,MAAAA,UAAU,EAAEA;AAHO,KAArB;AAKD,GATkE,CAWnE;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAIE,QAAQ,GAAGpE,QAAQ,CAACoB,OAAT,CAAiBgD,QAAhC;;AACA,MAAIA,QAAQ,IAAI,KAAK9E,QAAL,CAAc+E,eAAd,KAAkC,KAA9C,IACAH,UAAU,IAAI,GADd,IACqBA,UAAU,GAAG,GADtC,EAC2C;AACzC;AACA7D,IAAAA,YAAY,CAAC,KAAKC,eAAN,CAAZ,CAFyC,CAGzC;;AACAN,IAAAA,QAAQ,CAAC2B,OAAT,GAJyC,CAMzC;AACA;;AACA,QAAI,EAAE,KAAKlC,cAAP,GAAwB,KAAKH,QAAL,CAAcgF,YAA1C,EAAwD;AACtD,WAAK3F,IAAL,CAAU,OAAV,EAAmB,IAAIG,qBAAJ,EAAnB;AACA;AACD,KAXwC,CAazC;AACA;AACA;AACA;;;AACA,QAAI,CAACoF,UAAU,KAAK,GAAf,IAAsBA,UAAU,KAAK,GAAtC,KAA8C,KAAK5E,QAAL,CAAc4C,MAAd,KAAyB,MAAvE,IACA;AACA;AACA;AACA;AACCgC,IAAAA,UAAU,KAAK,GAAhB,IAAwB,CAAC,iBAAiBK,IAAjB,CAAsB,KAAKjF,QAAL,CAAc4C,MAApC,CAL7B,EAK0E;AACxE,WAAK5C,QAAL,CAAc4C,MAAd,GAAuB,KAAvB,CADwE,CAExE;;AACA,WAAKtC,mBAAL,GAA2B,EAA3B;AACA4E,MAAAA,qBAAqB,CAAC,YAAD,EAAe,KAAKlF,QAAL,CAAc8B,OAA7B,CAArB;AACD,KA3BwC,CA6BzC;;;AACA,QAAIqD,gBAAgB,GAAGD,qBAAqB,CAAC,SAAD,EAAY,KAAKlF,QAAL,CAAc8B,OAA1B,CAArB,IACrB3D,GAAG,CAACiH,KAAJ,CAAU,KAAKlB,WAAf,EAA4Bf,QAD9B,CA9ByC,CAiCzC;;AACA,QAAIkC,WAAW,GAAGlH,GAAG,CAACmH,OAAJ,CAAY,KAAKpB,WAAjB,EAA8BY,QAA9B,CAAlB;AACApG,IAAAA,KAAK,CAAC,gBAAD,EAAmB2G,WAAnB,CAAL;AACA,SAAKhB,WAAL,GAAmB,IAAnB;AACA,QAAIkB,gBAAgB,GAAGpH,GAAG,CAACiH,KAAJ,CAAUC,WAAV,CAAvB;AACAxG,IAAAA,MAAM,CAAC2G,MAAP,CAAc,KAAKxF,QAAnB,EAA6BuF,gBAA7B,EAtCyC,CAwCzC;;AACA,QAAIA,gBAAgB,CAACpC,QAAjB,KAA8BgC,gBAAlC,EAAoD;AAClDD,MAAAA,qBAAqB,CAAC,kBAAD,EAAqB,KAAKlF,QAAL,CAAc8B,OAAnC,CAArB;AACD,KA3CwC,CA6CzC;;;AACA,QAAI,OAAO,KAAK9B,QAAL,CAAcyF,cAArB,KAAwC,UAA5C,EAAwD;AACtD,UAAIC,eAAe,GAAG;AAAE5D,QAAAA,OAAO,EAAEpB,QAAQ,CAACoB;AAApB,OAAtB;;AACA,UAAI;AACF,aAAK9B,QAAL,CAAcyF,cAAd,CAA6B3F,IAA7B,CAAkC,IAAlC,EAAwC,KAAKE,QAA7C,EAAuD0F,eAAvD;AACD,OAFD,CAGA,OAAOC,GAAP,EAAY;AACV,aAAKtG,IAAL,CAAU,OAAV,EAAmBsG,GAAnB;AACA;AACD;;AACD,WAAK5F,gBAAL,CAAsB,KAAKC,QAA3B;AACD,KAxDwC,CA0DzC;;;AACA,QAAI;AACF,WAAKY,eAAL;AACD,KAFD,CAGA,OAAOgF,KAAP,EAAc;AACZ,UAAInB,KAAK,GAAG,IAAInF,gBAAJ,CAAqB,gCAAgCsG,KAAK,CAACC,OAA3D,CAAZ;AACApB,MAAAA,KAAK,CAACmB,KAAN,GAAcA,KAAd;AACA,WAAKvG,IAAL,CAAU,OAAV,EAAmBoF,KAAnB;AACD;AACF,GApED,MAqEK;AACH;AACA/D,IAAAA,QAAQ,CAACoF,WAAT,GAAuB,KAAK5B,WAA5B;AACAxD,IAAAA,QAAQ,CAACqF,SAAT,GAAqB,KAAK3F,UAA1B;AACA,SAAKf,IAAL,CAAU,UAAV,EAAsBqB,QAAtB,EAJG,CAMH;;AACA,SAAKJ,mBAAL,GAA2B,EAA3B;AACD;AACF,CAhGD,C,CAkGA;;;AACA,SAAS0F,IAAT,CAAcC,SAAd,EAAyB;AACvB;AACA,MAAIC,OAAO,GAAG;AACZlB,IAAAA,YAAY,EAAE,EADF;AAEZzD,IAAAA,aAAa,EAAE,KAAK,IAAL,GAAY;AAFf,GAAd,CAFuB,CAOvB;;AACA,MAAIqC,eAAe,GAAG,EAAtB;AACA/E,EAAAA,MAAM,CAACsH,IAAP,CAAYF,SAAZ,EAAuBlH,OAAvB,CAA+B,UAAU+E,MAAV,EAAkB;AAC/C,QAAIJ,QAAQ,GAAGI,MAAM,GAAG,GAAxB;AACA,QAAIH,cAAc,GAAGC,eAAe,CAACF,QAAD,CAAf,GAA4BuC,SAAS,CAACnC,MAAD,CAA1D;AACA,QAAIsC,eAAe,GAAGF,OAAO,CAACpC,MAAD,CAAP,GAAkBjF,MAAM,CAACC,MAAP,CAAc6E,cAAd,CAAxC,CAH+C,CAK/C;;AACA,aAASM,OAAT,CAAiBoC,KAAjB,EAAwBzG,OAAxB,EAAiCwB,QAAjC,EAA2C;AACzC;AACA,UAAI,OAAOiF,KAAP,KAAiB,QAArB,EAA+B;AAC7B,YAAIC,MAAM,GAAGD,KAAb;;AACA,YAAI;AACFA,UAAAA,KAAK,GAAGE,YAAY,CAAC,IAAIlI,GAAJ,CAAQiI,MAAR,CAAD,CAApB;AACD,SAFD,CAGA,OAAOX,GAAP,EAAY;AACV;AACAU,UAAAA,KAAK,GAAGlI,GAAG,CAACiH,KAAJ,CAAUkB,MAAV,CAAR;AACD;AACF,OATD,MAUK,IAAIjI,GAAG,IAAKgI,KAAK,YAAYhI,GAA7B,EAAmC;AACtCgI,QAAAA,KAAK,GAAGE,YAAY,CAACF,KAAD,CAApB;AACD,OAFI,MAGA;AACHjF,QAAAA,QAAQ,GAAGxB,OAAX;AACAA,QAAAA,OAAO,GAAGyG,KAAV;AACAA,QAAAA,KAAK,GAAG;AAAE3C,UAAAA,QAAQ,EAAEA;AAAZ,SAAR;AACD;;AACD,UAAI,OAAO9D,OAAP,KAAmB,UAAvB,EAAmC;AACjCwB,QAAAA,QAAQ,GAAGxB,OAAX;AACAA,QAAAA,OAAO,GAAG,IAAV;AACD,OAvBwC,CAyBzC;;;AACAA,MAAAA,OAAO,GAAGf,MAAM,CAAC2G,MAAP,CAAc;AACtBR,QAAAA,YAAY,EAAEkB,OAAO,CAAClB,YADA;AAEtBzD,QAAAA,aAAa,EAAE2E,OAAO,CAAC3E;AAFD,OAAd,EAGP8E,KAHO,EAGAzG,OAHA,CAAV;AAIAA,MAAAA,OAAO,CAACgE,eAAR,GAA0BA,eAA1B;AAEAnF,MAAAA,MAAM,CAAC+H,KAAP,CAAa5G,OAAO,CAAC8D,QAArB,EAA+BA,QAA/B,EAAyC,mBAAzC;AACAhF,MAAAA,KAAK,CAAC,SAAD,EAAYkB,OAAZ,CAAL;AACA,aAAO,IAAID,mBAAJ,CAAwBC,OAAxB,EAAiCwB,QAAjC,CAAP;AACD,KAzC8C,CA2C/C;;;AACA,aAAS6B,GAAT,CAAaoD,KAAb,EAAoBzG,OAApB,EAA6BwB,QAA7B,EAAuC;AACrC,UAAIqF,cAAc,GAAGL,eAAe,CAACnC,OAAhB,CAAwBoC,KAAxB,EAA+BzG,OAA/B,EAAwCwB,QAAxC,CAArB;AACAqF,MAAAA,cAAc,CAAChF,GAAf;AACA,aAAOgF,cAAP;AACD,KAhD8C,CAkD/C;;;AACA5H,IAAAA,MAAM,CAAC6H,gBAAP,CAAwBN,eAAxB,EAAyC;AACvCnC,MAAAA,OAAO,EAAE;AAAEpC,QAAAA,KAAK,EAAEoC,OAAT;AAAkB0C,QAAAA,YAAY,EAAE,IAAhC;AAAsCC,QAAAA,UAAU,EAAE,IAAlD;AAAwDC,QAAAA,QAAQ,EAAE;AAAlE,OAD8B;AAEvC5D,MAAAA,GAAG,EAAE;AAAEpB,QAAAA,KAAK,EAAEoB,GAAT;AAAc0D,QAAAA,YAAY,EAAE,IAA5B;AAAkCC,QAAAA,UAAU,EAAE,IAA9C;AAAoDC,QAAAA,QAAQ,EAAE;AAA9D;AAFkC,KAAzC;AAID,GAvDD;AAwDA,SAAOX,OAAP;AACD;AAED;;;AACA,SAASY,IAAT,GAAgB;AAAE;AAAa,C,CAE/B;;;AACA,SAASP,YAAT,CAAsBQ,SAAtB,EAAiC;AAC/B,MAAInH,OAAO,GAAG;AACZ8D,IAAAA,QAAQ,EAAEqD,SAAS,CAACrD,QADR;AAEZP,IAAAA,QAAQ,EAAE4D,SAAS,CAAC5D,QAAV,CAAmB6D,UAAnB,CAA8B,GAA9B;AACR;AACAD,IAAAA,SAAS,CAAC5D,QAAV,CAAmB8D,KAAnB,CAAyB,CAAzB,EAA4B,CAAC,CAA7B,CAFQ,GAGRF,SAAS,CAAC5D,QALA;AAMZ+D,IAAAA,IAAI,EAAEH,SAAS,CAACG,IANJ;AAOZzD,IAAAA,MAAM,EAAEsD,SAAS,CAACtD,MAPN;AAQZL,IAAAA,QAAQ,EAAE2D,SAAS,CAAC3D,QARR;AASZC,IAAAA,IAAI,EAAE0D,SAAS,CAAC3D,QAAV,GAAqB2D,SAAS,CAACtD,MATzB;AAUZ0D,IAAAA,IAAI,EAAEJ,SAAS,CAACI;AAVJ,GAAd;;AAYA,MAAIJ,SAAS,CAACK,IAAV,KAAmB,EAAvB,EAA2B;AACzBxH,IAAAA,OAAO,CAACwH,IAAR,GAAeC,MAAM,CAACN,SAAS,CAACK,IAAX,CAArB;AACD;;AACD,SAAOxH,OAAP;AACD;;AAED,SAASsF,qBAAT,CAA+BoC,KAA/B,EAAsCxF,OAAtC,EAA+C;AAC7C,MAAIyF,SAAJ;;AACA,OAAK,IAAIC,MAAT,IAAmB1F,OAAnB,EAA4B;AAC1B,QAAIwF,KAAK,CAACrC,IAAN,CAAWuC,MAAX,CAAJ,EAAwB;AACtBD,MAAAA,SAAS,GAAGzF,OAAO,CAAC0F,MAAD,CAAnB;AACA,aAAO1F,OAAO,CAAC0F,MAAD,CAAd;AACD;AACF;;AACD,SAAOD,SAAP;AACD;;AAED,SAAShI,eAAT,CAAyBkI,IAAzB,EAA+BC,cAA/B,EAA+C;AAC7C,WAASC,WAAT,CAAqB9B,OAArB,EAA8B;AAC5B+B,IAAAA,KAAK,CAACC,iBAAN,CAAwB,IAAxB,EAA8B,KAAKC,WAAnC;AACA,SAAKjC,OAAL,GAAeA,OAAO,IAAI6B,cAA1B;AACD;;AACDC,EAAAA,WAAW,CAAC9G,SAAZ,GAAwB,IAAI+G,KAAJ,EAAxB;AACAD,EAAAA,WAAW,CAAC9G,SAAZ,CAAsBiH,WAAtB,GAAoCH,WAApC;AACAA,EAAAA,WAAW,CAAC9G,SAAZ,CAAsBe,IAAtB,GAA6B,YAAY6F,IAAZ,GAAmB,GAAhD;AACAE,EAAAA,WAAW,CAAC9G,SAAZ,CAAsB4G,IAAtB,GAA6BA,IAA7B;AACA,SAAOE,WAAP;AACD;;AAED,SAAS5G,YAAT,CAAsBkD,OAAtB,EAA+B;AAC7B,OAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGzF,MAAM,CAAC2C,MAA3B,EAAmC8C,CAAC,EAApC,EAAwC;AACtCH,IAAAA,OAAO,CAAC7B,cAAR,CAAuBzD,MAAM,CAACyF,CAAD,CAA7B,EAAkCxF,aAAa,CAACD,MAAM,CAACyF,CAAD,CAAP,CAA/C;AACD;;AACDH,EAAAA,OAAO,CAAC1D,EAAR,CAAW,OAAX,EAAoBuG,IAApB;AACA7C,EAAAA,OAAO,CAACnD,KAAR;AACD,C,CAED;;;AACAiH,MAAM,CAAC7B,OAAP,GAAiBF,IAAI,CAAC;AAAE1H,EAAAA,IAAI,EAAEA,IAAR;AAAcC,EAAAA,KAAK,EAAEA;AAArB,CAAD,CAArB;AACAwJ,MAAM,CAAC7B,OAAP,CAAeF,IAAf,GAAsBA,IAAtB","sourcesContent":["var url = require(\"url\");\r\nvar URL = url.URL;\r\nvar http = require(\"http\");\r\nvar https = require(\"https\");\r\nvar Writable = require(\"stream\").Writable;\r\nvar assert = require(\"assert\");\r\nvar debug = require(\"./debug\");\r\n\r\n// Create handlers that pass events from native requests\r\nvar events = [\"abort\", \"aborted\", \"connect\", \"error\", \"socket\", \"timeout\"];\r\nvar eventHandlers = Object.create(null);\r\nevents.forEach(function (event) {\r\n  eventHandlers[event] = function (arg1, arg2, arg3) {\r\n    this._redirectable.emit(event, arg1, arg2, arg3);\r\n  };\r\n});\r\n\r\n// Error types with codes\r\nvar RedirectionError = createErrorType(\r\n  \"ERR_FR_REDIRECTION_FAILURE\",\r\n  \"\"\r\n);\r\nvar TooManyRedirectsError = createErrorType(\r\n  \"ERR_FR_TOO_MANY_REDIRECTS\",\r\n  \"Maximum number of redirects exceeded\"\r\n);\r\nvar MaxBodyLengthExceededError = createErrorType(\r\n  \"ERR_FR_MAX_BODY_LENGTH_EXCEEDED\",\r\n  \"Request body larger than maxBodyLength limit\"\r\n);\r\nvar WriteAfterEndError = createErrorType(\r\n  \"ERR_STREAM_WRITE_AFTER_END\",\r\n  \"write after end\"\r\n);\r\n\r\n// An HTTP(S) request that can be redirected\r\nfunction RedirectableRequest(options, responseCallback) {\r\n  // Initialize the request\r\n  Writable.call(this);\r\n  this._sanitizeOptions(options);\r\n  this._options = options;\r\n  this._ended = false;\r\n  this._ending = false;\r\n  this._redirectCount = 0;\r\n  this._redirects = [];\r\n  this._requestBodyLength = 0;\r\n  this._requestBodyBuffers = [];\r\n\r\n  // Attach a callback if passed\r\n  if (responseCallback) {\r\n    this.on(\"response\", responseCallback);\r\n  }\r\n\r\n  // React to responses of native requests\r\n  var self = this;\r\n  this._onNativeResponse = function (response) {\r\n    self._processResponse(response);\r\n  };\r\n\r\n  // Perform the first request\r\n  this._performRequest();\r\n}\r\nRedirectableRequest.prototype = Object.create(Writable.prototype);\r\n\r\nRedirectableRequest.prototype.abort = function () {\r\n  abortRequest(this._currentRequest);\r\n  this.emit(\"abort\");\r\n};\r\n\r\n// Writes buffered data to the current native request\r\nRedirectableRequest.prototype.write = function (data, encoding, callback) {\r\n  // Writing is not allowed if end has been called\r\n  if (this._ending) {\r\n    throw new WriteAfterEndError();\r\n  }\r\n\r\n  // Validate input and shift parameters if necessary\r\n  if (!(typeof data === \"string\" || typeof data === \"object\" && (\"length\" in data))) {\r\n    throw new TypeError(\"data should be a string, Buffer or Uint8Array\");\r\n  }\r\n  if (typeof encoding === \"function\") {\r\n    callback = encoding;\r\n    encoding = null;\r\n  }\r\n\r\n  // Ignore empty buffers, since writing them doesn't invoke the callback\r\n  // https://github.com/nodejs/node/issues/22066\r\n  if (data.length === 0) {\r\n    if (callback) {\r\n      callback();\r\n    }\r\n    return;\r\n  }\r\n  // Only write when we don't exceed the maximum body length\r\n  if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {\r\n    this._requestBodyLength += data.length;\r\n    this._requestBodyBuffers.push({ data: data, encoding: encoding });\r\n    this._currentRequest.write(data, encoding, callback);\r\n  }\r\n  // Error when we exceed the maximum body length\r\n  else {\r\n    this.emit(\"error\", new MaxBodyLengthExceededError());\r\n    this.abort();\r\n  }\r\n};\r\n\r\n// Ends the current native request\r\nRedirectableRequest.prototype.end = function (data, encoding, callback) {\r\n  // Shift parameters if necessary\r\n  if (typeof data === \"function\") {\r\n    callback = data;\r\n    data = encoding = null;\r\n  }\r\n  else if (typeof encoding === \"function\") {\r\n    callback = encoding;\r\n    encoding = null;\r\n  }\r\n\r\n  // Write data if needed and end\r\n  if (!data) {\r\n    this._ended = this._ending = true;\r\n    this._currentRequest.end(null, null, callback);\r\n  }\r\n  else {\r\n    var self = this;\r\n    var currentRequest = this._currentRequest;\r\n    this.write(data, encoding, function () {\r\n      self._ended = true;\r\n      currentRequest.end(null, null, callback);\r\n    });\r\n    this._ending = true;\r\n  }\r\n};\r\n\r\n// Sets a header value on the current native request\r\nRedirectableRequest.prototype.setHeader = function (name, value) {\r\n  this._options.headers[name] = value;\r\n  this._currentRequest.setHeader(name, value);\r\n};\r\n\r\n// Clears a header value on the current native request\r\nRedirectableRequest.prototype.removeHeader = function (name) {\r\n  delete this._options.headers[name];\r\n  this._currentRequest.removeHeader(name);\r\n};\r\n\r\n// Global timeout for all underlying requests\r\nRedirectableRequest.prototype.setTimeout = function (msecs, callback) {\r\n  var self = this;\r\n\r\n  // Destroys the socket on timeout\r\n  function destroyOnTimeout(socket) {\r\n    socket.setTimeout(msecs);\r\n    socket.removeListener(\"timeout\", socket.destroy);\r\n    socket.addListener(\"timeout\", socket.destroy);\r\n  }\r\n\r\n  // Sets up a timer to trigger a timeout event\r\n  function startTimer(socket) {\r\n    if (self._timeout) {\r\n      clearTimeout(self._timeout);\r\n    }\r\n    self._timeout = setTimeout(function () {\r\n      self.emit(\"timeout\");\r\n      clearTimer();\r\n    }, msecs);\r\n    destroyOnTimeout(socket);\r\n  }\r\n\r\n  // Stops a timeout from triggering\r\n  function clearTimer() {\r\n    if (self._timeout) {\r\n      clearTimeout(self._timeout);\r\n      self._timeout = null;\r\n    }\r\n    if (callback) {\r\n      self.removeListener(\"timeout\", callback);\r\n    }\r\n    if (!self.socket) {\r\n      self._currentRequest.removeListener(\"socket\", startTimer);\r\n    }\r\n  }\r\n\r\n  // Attach callback if passed\r\n  if (callback) {\r\n    this.on(\"timeout\", callback);\r\n  }\r\n\r\n  // Start the timer if or when the socket is opened\r\n  if (this.socket) {\r\n    startTimer(this.socket);\r\n  }\r\n  else {\r\n    this._currentRequest.once(\"socket\", startTimer);\r\n  }\r\n\r\n  // Clean up on events\r\n  this.on(\"socket\", destroyOnTimeout);\r\n  this.once(\"response\", clearTimer);\r\n  this.once(\"error\", clearTimer);\r\n\r\n  return this;\r\n};\r\n\r\n// Proxy all other public ClientRequest methods\r\n[\r\n  \"flushHeaders\", \"getHeader\",\r\n  \"setNoDelay\", \"setSocketKeepAlive\",\r\n].forEach(function (method) {\r\n  RedirectableRequest.prototype[method] = function (a, b) {\r\n    return this._currentRequest[method](a, b);\r\n  };\r\n});\r\n\r\n// Proxy all public ClientRequest properties\r\n[\"aborted\", \"connection\", \"socket\"].forEach(function (property) {\r\n  Object.defineProperty(RedirectableRequest.prototype, property, {\r\n    get: function () { return this._currentRequest[property]; },\r\n  });\r\n});\r\n\r\nRedirectableRequest.prototype._sanitizeOptions = function (options) {\r\n  // Ensure headers are always present\r\n  if (!options.headers) {\r\n    options.headers = {};\r\n  }\r\n\r\n  // Since http.request treats host as an alias of hostname,\r\n  // but the url module interprets host as hostname plus port,\r\n  // eliminate the host property to avoid confusion.\r\n  if (options.host) {\r\n    // Use hostname if set, because it has precedence\r\n    if (!options.hostname) {\r\n      options.hostname = options.host;\r\n    }\r\n    delete options.host;\r\n  }\r\n\r\n  // Complete the URL object when necessary\r\n  if (!options.pathname && options.path) {\r\n    var searchPos = options.path.indexOf(\"?\");\r\n    if (searchPos < 0) {\r\n      options.pathname = options.path;\r\n    }\r\n    else {\r\n      options.pathname = options.path.substring(0, searchPos);\r\n      options.search = options.path.substring(searchPos);\r\n    }\r\n  }\r\n};\r\n\r\n\r\n// Executes the next native request (initial or redirect)\r\nRedirectableRequest.prototype._performRequest = function () {\r\n  // Load the native protocol\r\n  var protocol = this._options.protocol;\r\n  var nativeProtocol = this._options.nativeProtocols[protocol];\r\n  if (!nativeProtocol) {\r\n    this.emit(\"error\", new TypeError(\"Unsupported protocol \" + protocol));\r\n    return;\r\n  }\r\n\r\n  // If specified, use the agent corresponding to the protocol\r\n  // (HTTP and HTTPS use different types of agents)\r\n  if (this._options.agents) {\r\n    var scheme = protocol.substr(0, protocol.length - 1);\r\n    this._options.agent = this._options.agents[scheme];\r\n  }\r\n\r\n  // Create the native request\r\n  var request = this._currentRequest =\r\n        nativeProtocol.request(this._options, this._onNativeResponse);\r\n  this._currentUrl = url.format(this._options);\r\n\r\n  // Set up event handlers\r\n  request._redirectable = this;\r\n  for (var e = 0; e < events.length; e++) {\r\n    request.on(events[e], eventHandlers[events[e]]);\r\n  }\r\n\r\n  // End a redirected request\r\n  // (The first request must be ended explicitly with RedirectableRequest#end)\r\n  if (this._isRedirect) {\r\n    // Write the request entity and end.\r\n    var i = 0;\r\n    var self = this;\r\n    var buffers = this._requestBodyBuffers;\r\n    (function writeNext(error) {\r\n      // Only write if this request has not been redirected yet\r\n      /* istanbul ignore else */\r\n      if (request === self._currentRequest) {\r\n        // Report any write errors\r\n        /* istanbul ignore if */\r\n        if (error) {\r\n          self.emit(\"error\", error);\r\n        }\r\n        // Write the next buffer if there are still left\r\n        else if (i < buffers.length) {\r\n          var buffer = buffers[i++];\r\n          /* istanbul ignore else */\r\n          if (!request.finished) {\r\n            request.write(buffer.data, buffer.encoding, writeNext);\r\n          }\r\n        }\r\n        // End the request if `end` has been called on us\r\n        else if (self._ended) {\r\n          request.end();\r\n        }\r\n      }\r\n    }());\r\n  }\r\n};\r\n\r\n// Processes a response from the current native request\r\nRedirectableRequest.prototype._processResponse = function (response) {\r\n  // Store the redirected response\r\n  var statusCode = response.statusCode;\r\n  if (this._options.trackRedirects) {\r\n    this._redirects.push({\r\n      url: this._currentUrl,\r\n      headers: response.headers,\r\n      statusCode: statusCode,\r\n    });\r\n  }\r\n\r\n  // RFC7231ยง6.4: The 3xx (Redirection) class of status code indicates\r\n  // that further action needs to be taken by the user agent in order to\r\n  // fulfill the request. If a Location header field is provided,\r\n  // the user agent MAY automatically redirect its request to the URI\r\n  // referenced by the Location field value,\r\n  // even if the specific status code is not understood.\r\n  var location = response.headers.location;\r\n  if (location && this._options.followRedirects !== false &&\r\n      statusCode >= 300 && statusCode < 400) {\r\n    // Abort the current request\r\n    abortRequest(this._currentRequest);\r\n    // Discard the remainder of the response to avoid waiting for data\r\n    response.destroy();\r\n\r\n    // RFC7231ยง6.4: A client SHOULD detect and intervene\r\n    // in cyclical redirections (i.e., \"infinite\" redirection loops).\r\n    if (++this._redirectCount > this._options.maxRedirects) {\r\n      this.emit(\"error\", new TooManyRedirectsError());\r\n      return;\r\n    }\r\n\r\n    // RFC7231ยง6.4: Automatic redirection needs to done with\r\n    // care for methods not known to be safe, [โฆ]\r\n    // RFC7231ยง6.4.2โ3: For historical reasons, a user agent MAY change\r\n    // the request method from POST to GET for the subsequent request.\r\n    if ((statusCode === 301 || statusCode === 302) && this._options.method === \"POST\" ||\r\n        // RFC7231ยง6.4.4: The 303 (See Other) status code indicates that\r\n        // the server is redirecting the user agent to a different resource [โฆ]\r\n        // A user agent can perform a retrieval request targeting that URI\r\n        // (a GET or HEAD request if using HTTP) [โฆ]\r\n        (statusCode === 303) && !/^(?:GET|HEAD)$/.test(this._options.method)) {\r\n      this._options.method = \"GET\";\r\n      // Drop a possible entity and headers related to it\r\n      this._requestBodyBuffers = [];\r\n      removeMatchingHeaders(/^content-/i, this._options.headers);\r\n    }\r\n\r\n    // Drop the Host header, as the redirect might lead to a different host\r\n    var previousHostName = removeMatchingHeaders(/^host$/i, this._options.headers) ||\r\n      url.parse(this._currentUrl).hostname;\r\n\r\n    // Create the redirected request\r\n    var redirectUrl = url.resolve(this._currentUrl, location);\r\n    debug(\"redirecting to\", redirectUrl);\r\n    this._isRedirect = true;\r\n    var redirectUrlParts = url.parse(redirectUrl);\r\n    Object.assign(this._options, redirectUrlParts);\r\n\r\n    // Drop the Authorization header if redirecting to another host\r\n    if (redirectUrlParts.hostname !== previousHostName) {\r\n      removeMatchingHeaders(/^authorization$/i, this._options.headers);\r\n    }\r\n\r\n    // Evaluate the beforeRedirect callback\r\n    if (typeof this._options.beforeRedirect === \"function\") {\r\n      var responseDetails = { headers: response.headers };\r\n      try {\r\n        this._options.beforeRedirect.call(null, this._options, responseDetails);\r\n      }\r\n      catch (err) {\r\n        this.emit(\"error\", err);\r\n        return;\r\n      }\r\n      this._sanitizeOptions(this._options);\r\n    }\r\n\r\n    // Perform the redirected request\r\n    try {\r\n      this._performRequest();\r\n    }\r\n    catch (cause) {\r\n      var error = new RedirectionError(\"Redirected request failed: \" + cause.message);\r\n      error.cause = cause;\r\n      this.emit(\"error\", error);\r\n    }\r\n  }\r\n  else {\r\n    // The response is not a redirect; return it as-is\r\n    response.responseUrl = this._currentUrl;\r\n    response.redirects = this._redirects;\r\n    this.emit(\"response\", response);\r\n\r\n    // Clean up\r\n    this._requestBodyBuffers = [];\r\n  }\r\n};\r\n\r\n// Wraps the key/value object of protocols with redirect functionality\r\nfunction wrap(protocols) {\r\n  // Default settings\r\n  var exports = {\r\n    maxRedirects: 21,\r\n    maxBodyLength: 10 * 1024 * 1024,\r\n  };\r\n\r\n  // Wrap each protocol\r\n  var nativeProtocols = {};\r\n  Object.keys(protocols).forEach(function (scheme) {\r\n    var protocol = scheme + \":\";\r\n    var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];\r\n    var wrappedProtocol = exports[scheme] = Object.create(nativeProtocol);\r\n\r\n    // Executes a request, following redirects\r\n    function request(input, options, callback) {\r\n      // Parse parameters\r\n      if (typeof input === \"string\") {\r\n        var urlStr = input;\r\n        try {\r\n          input = urlToOptions(new URL(urlStr));\r\n        }\r\n        catch (err) {\r\n          /* istanbul ignore next */\r\n          input = url.parse(urlStr);\r\n        }\r\n      }\r\n      else if (URL && (input instanceof URL)) {\r\n        input = urlToOptions(input);\r\n      }\r\n      else {\r\n        callback = options;\r\n        options = input;\r\n        input = { protocol: protocol };\r\n      }\r\n      if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = null;\r\n      }\r\n\r\n      // Set defaults\r\n      options = Object.assign({\r\n        maxRedirects: exports.maxRedirects,\r\n        maxBodyLength: exports.maxBodyLength,\r\n      }, input, options);\r\n      options.nativeProtocols = nativeProtocols;\r\n\r\n      assert.equal(options.protocol, protocol, \"protocol mismatch\");\r\n      debug(\"options\", options);\r\n      return new RedirectableRequest(options, callback);\r\n    }\r\n\r\n    // Executes a GET request, following redirects\r\n    function get(input, options, callback) {\r\n      var wrappedRequest = wrappedProtocol.request(input, options, callback);\r\n      wrappedRequest.end();\r\n      return wrappedRequest;\r\n    }\r\n\r\n    // Expose the properties on the wrapped protocol\r\n    Object.defineProperties(wrappedProtocol, {\r\n      request: { value: request, configurable: true, enumerable: true, writable: true },\r\n      get: { value: get, configurable: true, enumerable: true, writable: true },\r\n    });\r\n  });\r\n  return exports;\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() { /* empty */ }\r\n\r\n// from https://github.com/nodejs/node/blob/master/lib/internal/url.js\r\nfunction urlToOptions(urlObject) {\r\n  var options = {\r\n    protocol: urlObject.protocol,\r\n    hostname: urlObject.hostname.startsWith(\"[\") ?\r\n      /* istanbul ignore next */\r\n      urlObject.hostname.slice(1, -1) :\r\n      urlObject.hostname,\r\n    hash: urlObject.hash,\r\n    search: urlObject.search,\r\n    pathname: urlObject.pathname,\r\n    path: urlObject.pathname + urlObject.search,\r\n    href: urlObject.href,\r\n  };\r\n  if (urlObject.port !== \"\") {\r\n    options.port = Number(urlObject.port);\r\n  }\r\n  return options;\r\n}\r\n\r\nfunction removeMatchingHeaders(regex, headers) {\r\n  var lastValue;\r\n  for (var header in headers) {\r\n    if (regex.test(header)) {\r\n      lastValue = headers[header];\r\n      delete headers[header];\r\n    }\r\n  }\r\n  return lastValue;\r\n}\r\n\r\nfunction createErrorType(code, defaultMessage) {\r\n  function CustomError(message) {\r\n    Error.captureStackTrace(this, this.constructor);\r\n    this.message = message || defaultMessage;\r\n  }\r\n  CustomError.prototype = new Error();\r\n  CustomError.prototype.constructor = CustomError;\r\n  CustomError.prototype.name = \"Error [\" + code + \"]\";\r\n  CustomError.prototype.code = code;\r\n  return CustomError;\r\n}\r\n\r\nfunction abortRequest(request) {\r\n  for (var e = 0; e < events.length; e++) {\r\n    request.removeListener(events[e], eventHandlers[events[e]]);\r\n  }\r\n  request.on(\"error\", noop);\r\n  request.abort();\r\n}\r\n\r\n// Exports\r\nmodule.exports = wrap({ http: http, https: https });\r\nmodule.exports.wrap = wrap;\r\n"]},"metadata":{},"sourceType":"script"}