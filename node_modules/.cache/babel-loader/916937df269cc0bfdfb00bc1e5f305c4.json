{"ast":null,"code":"\"use strict\";\n\nvar typpy = require(\"typpy\"),\n    iterateObj = require(\"iterate-object\"),\n    Err = require(\"err\"),\n    objDef = require(\"obj-def\"),\n    emptyObj = require(\"is-empty-obj\"),\n    cheerio = require(\"cheerio\");\n/**\r\n * scrapeItCore\r\n * The core scraping functionality of `scrape-it`.\r\n *\r\n * Scrapes the data in the provided element.\r\n *\r\n * For the format of the selector, please refer to the [Selectors section of the Cheerio library](https://github.com/cheeriojs/cheerio#-selector-context-root-)\r\n *\r\n * @name scrapeIt.scrapeHTML\r\n * @function\r\n * @param {Cheerio|String} $ The input element or the HTML as a string.\r\n * @param {Object} opts An object containing the scraping information.\r\n *\r\n *   If you want to scrape a list, you have to use the `listItem` selector:\r\n *\r\n *    - `listItem` (String): The list item selector.\r\n *    - `data` (Object): The fields to include in the list objects:\r\n *       - `<fieldName>` (Object|String): The selector or an object containing:\r\n *          - `selector` (String): The selector.\r\n *          - `convert` (Function): An optional function to change the value.\r\n *          - `how` (Function|String): A function or function name to access the\r\n *            value.\r\n *          - `attr` (String): If provided, the value will be taken based on\r\n *            the attribute name.\r\n *          - `trim` (Boolean): If `false`, the value will *not* be trimmed\r\n *            (default: `true`).\r\n *          - `closest` (String): If provided, returns the first ancestor of\r\n *            the given element.\r\n *          - `eq` (Number): If provided, it will select the *nth* element.\r\n *          - `texteq` (Number): If provided, it will select the *nth* direct text child.\r\n *            Deep text child selection is not possible yet.\r\n *            Overwrites the `how` key.\r\n *          - `listItem` (Object): An object, keeping the recursive schema of\r\n *            the `listItem` object. This can be used to create nested lists.\r\n *\r\n *   **Example**:\r\n *   ```js\r\n *   {\r\n *      articles: {\r\n *          listItem: \".article\"\r\n *        , data: {\r\n *              createdAt: {\r\n *                  selector: \".date\"\r\n *                , convert: x => new Date(x)\r\n *              }\r\n *            , title: \"a.article-title\"\r\n *            , tags: {\r\n *                  listItem: \".tags > span\"\r\n *              }\r\n *            , content: {\r\n *                  selector: \".article-content\"\r\n *                , how: \"html\"\r\n *              }\r\n *            , traverseOtherNode: {\r\n *                  selector: \".upperNode\"\r\n *                , closest: \"div\"\r\n *                , convert: x => x.length\r\n *              }\r\n *          }\r\n *      }\r\n *   }\r\n *   ```\r\n *\r\n *   If you want to collect specific data from the page, just use the same\r\n *   schema used for the `data` field.\r\n *\r\n *   **Example**:\r\n *   ```js\r\n *   {\r\n *        title: \".header h1\"\r\n *      , desc: \".header h2\"\r\n *      , avatar: {\r\n *            selector: \".header img\"\r\n *          , attr: \"src\"\r\n *        }\r\n *   }\r\n *   ```\r\n *\r\n *\r\n * @name scrapeItCore\r\n * @function\r\n * @returns {Object} The scraped data.\r\n */\n\n\nmodule.exports = function ($, opts) {\n  if (typeof $ === \"string\") {\n    $ = cheerio.load($);\n  } // Normalizes the option\n\n\n  var normalizeOpt = function normalizeOpt(v) {\n    if (typpy(v, String)) {\n      v = {\n        selector: v\n      };\n    }\n\n    objDef(v, \"data\", {});\n    objDef(v, \"how\", \"text\", true);\n\n    if (v.attr) {\n      v.how = function ($elm) {\n        return $elm.attr(v.attr);\n      };\n    }\n\n    objDef(v, \"trimValue\", true);\n    objDef(v, \"closest\", \"\");\n    return v;\n  }; // Recursively handles the data\n\n\n  var handleDataObj = function handleDataObj(data, $context) {\n    var pageData = {};\n    iterateObj(data, function (cOpt, optName) {\n      cOpt = normalizeOpt(cOpt);\n      cOpt.name = optName;\n      var $cContext = $context === $ ? undefined : $context;\n\n      if (!$cContext && !cOpt.selector && !cOpt.listItem) {\n        throw new Err(\"There is no element selected for the '<option.name>' field. Please provide a selector, list item or use nested object structure.\", {\n          option: cOpt,\n          code: \"NO_ELEMENT_SELECTED\"\n        });\n      }\n\n      var $elm = cOpt.selector ? $(cOpt.selector, $cContext) : $cContext; // Handle lists\n\n      if (cOpt.listItem) {\n        var docs = pageData[cOpt.name] = [],\n            $items = $(cOpt.listItem, $cContext),\n            isEmpty = emptyObj(cOpt.data);\n\n        if (isEmpty) {\n          cOpt.data.___raw = {};\n        }\n\n        for (var i = 0; i < $items.length; ++i) {\n          var cDoc = handleDataObj(cOpt.data, $items.eq(i));\n\n          var convert = cOpt.convert || function (x) {\n            return x;\n          };\n\n          docs.push(convert(cDoc.___raw || cDoc));\n        }\n      } else {\n        if (typpy(cOpt.eq, Number)) {\n          $elm = $elm.eq(cOpt.eq);\n        }\n\n        if (typpy(cOpt.texteq, Number)) {\n          var children = $elm.contents(),\n              textCounter = 0,\n              found = false;\n\n          for (var _i = 0, child; child = children[_i]; _i++) {\n            if (child.type === \"text\") {\n              if (textCounter == cOpt.texteq) {\n                $elm = child;\n                found = true;\n                break;\n              }\n\n              textCounter++;\n            }\n          }\n\n          if (!found) {\n            $elm = cheerio.load(\"\");\n          }\n\n          cOpt.how = function (elm) {\n            return elm.data;\n          };\n        } // Handle closest\n\n\n        if (cOpt.closest) {\n          $elm = $elm.closest(cOpt.closest);\n        }\n\n        if (!emptyObj(cOpt.data)) {\n          pageData[cOpt.name] = handleDataObj(cOpt.data, $elm);\n          return pageData;\n        }\n\n        var value = typpy(cOpt.how, Function) ? cOpt.how($elm) : $elm[cOpt.how]();\n        value = value === undefined ? \"\" : value;\n\n        if (cOpt.trimValue && typpy(value, String)) {\n          value = value.trim();\n        }\n\n        if (cOpt.convert) {\n          value = cOpt.convert(value, $elm);\n        }\n\n        pageData[cOpt.name] = value;\n      }\n    });\n    return pageData;\n  };\n\n  return handleDataObj(opts);\n};","map":{"version":3,"sources":["C:/Users/narut/Documents/Coding/stock-valuate/node_modules/scrape-it-core/lib/index.js"],"names":["typpy","require","iterateObj","Err","objDef","emptyObj","cheerio","module","exports","$","opts","load","normalizeOpt","v","String","selector","attr","how","$elm","handleDataObj","data","$context","pageData","cOpt","optName","name","$cContext","undefined","listItem","option","code","docs","$items","isEmpty","___raw","i","length","cDoc","eq","convert","x","push","Number","texteq","children","contents","textCounter","found","_i","child","type","elm","closest","value","Function","trimValue","trim"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nvar typpy = require(\"typpy\"),\r\n    iterateObj = require(\"iterate-object\"),\r\n    Err = require(\"err\"),\r\n    objDef = require(\"obj-def\"),\r\n    emptyObj = require(\"is-empty-obj\"),\r\n    cheerio = require(\"cheerio\");\r\n\r\n/**\r\n * scrapeItCore\r\n * The core scraping functionality of `scrape-it`.\r\n *\r\n * Scrapes the data in the provided element.\r\n *\r\n * For the format of the selector, please refer to the [Selectors section of the Cheerio library](https://github.com/cheeriojs/cheerio#-selector-context-root-)\r\n *\r\n * @name scrapeIt.scrapeHTML\r\n * @function\r\n * @param {Cheerio|String} $ The input element or the HTML as a string.\r\n * @param {Object} opts An object containing the scraping information.\r\n *\r\n *   If you want to scrape a list, you have to use the `listItem` selector:\r\n *\r\n *    - `listItem` (String): The list item selector.\r\n *    - `data` (Object): The fields to include in the list objects:\r\n *       - `<fieldName>` (Object|String): The selector or an object containing:\r\n *          - `selector` (String): The selector.\r\n *          - `convert` (Function): An optional function to change the value.\r\n *          - `how` (Function|String): A function or function name to access the\r\n *            value.\r\n *          - `attr` (String): If provided, the value will be taken based on\r\n *            the attribute name.\r\n *          - `trim` (Boolean): If `false`, the value will *not* be trimmed\r\n *            (default: `true`).\r\n *          - `closest` (String): If provided, returns the first ancestor of\r\n *            the given element.\r\n *          - `eq` (Number): If provided, it will select the *nth* element.\r\n *          - `texteq` (Number): If provided, it will select the *nth* direct text child.\r\n *            Deep text child selection is not possible yet.\r\n *            Overwrites the `how` key.\r\n *          - `listItem` (Object): An object, keeping the recursive schema of\r\n *            the `listItem` object. This can be used to create nested lists.\r\n *\r\n *   **Example**:\r\n *   ```js\r\n *   {\r\n *      articles: {\r\n *          listItem: \".article\"\r\n *        , data: {\r\n *              createdAt: {\r\n *                  selector: \".date\"\r\n *                , convert: x => new Date(x)\r\n *              }\r\n *            , title: \"a.article-title\"\r\n *            , tags: {\r\n *                  listItem: \".tags > span\"\r\n *              }\r\n *            , content: {\r\n *                  selector: \".article-content\"\r\n *                , how: \"html\"\r\n *              }\r\n *            , traverseOtherNode: {\r\n *                  selector: \".upperNode\"\r\n *                , closest: \"div\"\r\n *                , convert: x => x.length\r\n *              }\r\n *          }\r\n *      }\r\n *   }\r\n *   ```\r\n *\r\n *   If you want to collect specific data from the page, just use the same\r\n *   schema used for the `data` field.\r\n *\r\n *   **Example**:\r\n *   ```js\r\n *   {\r\n *        title: \".header h1\"\r\n *      , desc: \".header h2\"\r\n *      , avatar: {\r\n *            selector: \".header img\"\r\n *          , attr: \"src\"\r\n *        }\r\n *   }\r\n *   ```\r\n *\r\n *\r\n * @name scrapeItCore\r\n * @function\r\n * @returns {Object} The scraped data.\r\n */\r\nmodule.exports = function ($, opts) {\r\n\r\n    if (typeof $ === \"string\") {\r\n        $ = cheerio.load($);\r\n    }\r\n\r\n    // Normalizes the option\r\n    var normalizeOpt = function normalizeOpt(v) {\r\n        if (typpy(v, String)) {\r\n            v = { selector: v };\r\n        }\r\n        objDef(v, \"data\", {});\r\n        objDef(v, \"how\", \"text\", true);\r\n        if (v.attr) {\r\n            v.how = function ($elm) {\r\n                return $elm.attr(v.attr);\r\n            };\r\n        }\r\n        objDef(v, \"trimValue\", true);\r\n        objDef(v, \"closest\", \"\");\r\n        return v;\r\n    };\r\n\r\n    // Recursively handles the data\r\n    var handleDataObj = function handleDataObj(data, $context) {\r\n        var pageData = {};\r\n        iterateObj(data, function (cOpt, optName) {\r\n\r\n            cOpt = normalizeOpt(cOpt);\r\n            cOpt.name = optName;\r\n\r\n            var $cContext = $context === $ ? undefined : $context;\r\n            if (!$cContext && !cOpt.selector && !cOpt.listItem) {\r\n                throw new Err(\"There is no element selected for the '<option.name>' field. Please provide a selector, list item or use nested object structure.\", {\r\n                    option: cOpt,\r\n                    code: \"NO_ELEMENT_SELECTED\"\r\n                });\r\n            }\r\n\r\n            var $elm = cOpt.selector ? $(cOpt.selector, $cContext) : $cContext;\r\n\r\n            // Handle lists\r\n            if (cOpt.listItem) {\r\n                var docs = pageData[cOpt.name] = [],\r\n                    $items = $(cOpt.listItem, $cContext),\r\n                    isEmpty = emptyObj(cOpt.data);\r\n\r\n                if (isEmpty) {\r\n                    cOpt.data.___raw = {};\r\n                }\r\n\r\n                for (var i = 0; i < $items.length; ++i) {\r\n                    var cDoc = handleDataObj(cOpt.data, $items.eq(i));\r\n                    var convert = cOpt.convert || function (x) {\r\n                        return x;\r\n                    };\r\n                    docs.push(convert(cDoc.___raw || cDoc));\r\n                }\r\n            } else {\r\n\r\n                if (typpy(cOpt.eq, Number)) {\r\n                    $elm = $elm.eq(cOpt.eq);\r\n                }\r\n\r\n                if (typpy(cOpt.texteq, Number)) {\r\n                    var children = $elm.contents(),\r\n                        textCounter = 0,\r\n                        found = false;\r\n\r\n                    for (var _i = 0, child; child = children[_i]; _i++) {\r\n                        if (child.type === \"text\") {\r\n                            if (textCounter == cOpt.texteq) {\r\n                                $elm = child;\r\n                                found = true;\r\n                                break;\r\n                            }\r\n                            textCounter++;\r\n                        }\r\n                    }\r\n\r\n                    if (!found) {\r\n                        $elm = cheerio.load(\"\");\r\n                    }\r\n\r\n                    cOpt.how = function (elm) {\r\n                        return elm.data;\r\n                    };\r\n                }\r\n\r\n                // Handle closest\r\n                if (cOpt.closest) {\r\n                    $elm = $elm.closest(cOpt.closest);\r\n                }\r\n\r\n                if (!emptyObj(cOpt.data)) {\r\n                    pageData[cOpt.name] = handleDataObj(cOpt.data, $elm);\r\n                    return pageData;\r\n                }\r\n\r\n                var value = typpy(cOpt.how, Function) ? cOpt.how($elm) : $elm[cOpt.how]();\r\n                value = value === undefined ? \"\" : value;\r\n                if (cOpt.trimValue && typpy(value, String)) {\r\n                    value = value.trim();\r\n                }\r\n\r\n                if (cOpt.convert) {\r\n                    value = cOpt.convert(value, $elm);\r\n                }\r\n\r\n                pageData[cOpt.name] = value;\r\n            }\r\n        });\r\n        return pageData;\r\n    };\r\n\r\n    return handleDataObj(opts);\r\n};"]},"metadata":{},"sourceType":"script"}