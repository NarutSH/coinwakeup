{"ast":null,"code":"/*\r\n  Module Dependencies\r\n*/\nvar htmlparser = require('htmlparser2');\n/*\r\n  Parser\r\n*/\n\n\nexports = module.exports = function (content, options) {\n  var dom = exports.evaluate(content, options),\n      // Generic root element\n  root = exports.evaluate('<root></root>', options)[0];\n  root.type = 'root'; // Update the dom using the root\n\n  exports.update(dom, root);\n  return root;\n};\n\nexports.evaluate = function (content, options) {\n  // options = options || $.fn.options;\n  var dom;\n\n  if (typeof content === 'string' || Buffer.isBuffer(content)) {\n    dom = htmlparser.parseDOM(content, options);\n  } else {\n    dom = content;\n  }\n\n  return dom;\n};\n/*\r\n  Update the dom structure, for one changed layer\r\n*/\n\n\nexports.update = function (arr, parent) {\n  // normalize\n  if (!Array.isArray(arr)) arr = [arr]; // Update parent\n\n  if (parent) {\n    parent.children = arr;\n  } else {\n    parent = null;\n  } // Update neighbors\n\n\n  for (var i = 0; i < arr.length; i++) {\n    var node = arr[i]; // Cleanly remove existing nodes from their previous structures.\n\n    var oldParent = node.parent || node.root,\n        oldSiblings = oldParent && oldParent.children;\n\n    if (oldSiblings && oldSiblings !== arr) {\n      oldSiblings.splice(oldSiblings.indexOf(node), 1);\n\n      if (node.prev) {\n        node.prev.next = node.next;\n      }\n\n      if (node.next) {\n        node.next.prev = node.prev;\n      }\n    }\n\n    if (parent) {\n      node.prev = arr[i - 1] || null;\n      node.next = arr[i + 1] || null;\n    } else {\n      node.prev = node.next = null;\n    }\n\n    if (parent && parent.type === 'root') {\n      node.root = parent;\n      node.parent = null;\n    } else {\n      node.root = null;\n      node.parent = parent;\n    }\n  }\n\n  return parent;\n}; // module.exports = $.extend(exports);","map":{"version":3,"sources":["C:/Users/narut/Documents/Coding/coindy/node_modules/cheerio/lib/parse.js"],"names":["htmlparser","require","exports","module","content","options","dom","evaluate","root","type","update","Buffer","isBuffer","parseDOM","arr","parent","Array","isArray","children","i","length","node","oldParent","oldSiblings","splice","indexOf","prev","next"],"mappings":"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","sourcesContent":["/*\r\n  Module Dependencies\r\n*/\r\nvar htmlparser = require('htmlparser2');\r\n\r\n/*\r\n  Parser\r\n*/\r\nexports = module.exports = function(content, options) {\r\n  var dom = exports.evaluate(content, options),\r\n      // Generic root element\r\n      root = exports.evaluate('<root></root>', options)[0];\r\n\r\n  root.type = 'root';\r\n\r\n  // Update the dom using the root\r\n  exports.update(dom, root);\r\n\r\n  return root;\r\n};\r\n\r\nexports.evaluate = function(content, options) {\r\n  // options = options || $.fn.options;\r\n\r\n  var dom;\r\n\r\n  if (typeof content === 'string' || Buffer.isBuffer(content)) {\r\n    dom = htmlparser.parseDOM(content, options);\r\n  } else {\r\n    dom = content;\r\n  }\r\n\r\n  return dom;\r\n};\r\n\r\n/*\r\n  Update the dom structure, for one changed layer\r\n*/\r\nexports.update = function(arr, parent) {\r\n  // normalize\r\n  if (!Array.isArray(arr)) arr = [arr];\r\n\r\n  // Update parent\r\n  if (parent) {\r\n    parent.children = arr;\r\n  } else {\r\n    parent = null;\r\n  }\r\n\r\n  // Update neighbors\r\n  for (var i = 0; i < arr.length; i++) {\r\n    var node = arr[i];\r\n\r\n    // Cleanly remove existing nodes from their previous structures.\r\n    var oldParent = node.parent || node.root,\r\n        oldSiblings = oldParent && oldParent.children;\r\n    if (oldSiblings && oldSiblings !== arr) {\r\n      oldSiblings.splice(oldSiblings.indexOf(node), 1);\r\n      if (node.prev) {\r\n        node.prev.next = node.next;\r\n      }\r\n      if (node.next) {\r\n        node.next.prev = node.prev;\r\n      }\r\n    }\r\n\r\n    if (parent) {\r\n      node.prev = arr[i - 1] || null;\r\n      node.next = arr[i + 1] || null;\r\n    } else {\r\n      node.prev = node.next = null;\r\n    }\r\n\r\n    if (parent && parent.type === 'root') {\r\n      node.root = parent;\r\n      node.parent = null;\r\n    } else {\r\n      node.root = null;\r\n      node.parent = parent;\r\n    }\r\n  }\r\n\r\n  return parent;\r\n};\r\n\r\n// module.exports = $.extend(exports);\r\n"]},"metadata":{},"sourceType":"script"}