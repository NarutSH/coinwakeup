[{"C:\\Users\\narut\\Documents\\Coding\\stock-calc\\src\\index.js":"1","C:\\Users\\narut\\Documents\\Coding\\stock-calc\\src\\App.js":"2","C:\\Users\\narut\\Documents\\Coding\\stock-calc\\src\\Component\\Navbar.js":"3","C:\\Users\\narut\\Documents\\Coding\\stock-calc\\src\\API\\yahooFinApi.js":"4","C:\\Users\\narut\\Documents\\Coding\\stock-calc\\src\\Component\\Overview.js":"5","C:\\Users\\narut\\Documents\\Coding\\stock-calc\\src\\Component\\Table.js":"6","C:\\Users\\narut\\Documents\\Coding\\stock-calc\\src\\Component\\Chart.js":"7","C:\\Users\\narut\\Documents\\Coding\\stock-calc\\src\\assets\\StockList.js":"8","C:\\Users\\narut\\Documents\\Coding\\stock-calc\\src\\tools\\Spinner\\SpinnerTool.js":"9","C:\\Users\\narut\\Documents\\Coding\\stock-calc\\src\\Hooks\\useKeyPress.js":"10","C:\\Users\\narut\\Documents\\Coding\\stock-calc\\src\\Component\\LightChart.js":"11","C:\\Users\\narut\\Documents\\Coding\\stock-calc\\src\\Component\\News.js":"12"},{"size":581,"mtime":1634751726610,"results":"13","hashOfConfig":"14"},{"size":3004,"mtime":1638092564665,"results":"15","hashOfConfig":"14"},{"size":5141,"mtime":1636992096420,"results":"16","hashOfConfig":"14"},{"size":291,"mtime":1637088350219,"results":"17","hashOfConfig":"14"},{"size":2878,"mtime":1635953817660,"results":"18","hashOfConfig":"14"},{"size":13718,"mtime":1637087444564,"results":"19","hashOfConfig":"14"},{"size":7120,"mtime":1636447854704,"results":"20","hashOfConfig":"14"},{"size":74915,"mtime":1634755075134,"results":"21","hashOfConfig":"14"},{"size":529,"mtime":1630259203148,"results":"22","hashOfConfig":"14"},{"size":992,"mtime":1635761324305,"results":"23","hashOfConfig":"14"},{"size":6882,"mtime":1637088791388,"results":"24","hashOfConfig":"14"},{"size":708,"mtime":1638202891565,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},"62bm8r",{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"29"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"29"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"29"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"29"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"29"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"29"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\narut\\Documents\\Coding\\stock-calc\\src\\index.js",["58"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { ToastProvider, useToasts } from \"react-toast-notifications\";\nimport Modal from \"react-modal\";\n\nimport { Chart } from \"chart.js\";\nimport zoomPlugin from \"chartjs-plugin-zoom\";\nimport annotationPlugin from \"chartjs-plugin-annotation\";\n\nChart.register(zoomPlugin, annotationPlugin);\nModal.setAppElement(\"#root\");\n\nReactDOM.render(\n  <React.StrictMode>\n    <ToastProvider>\n      <App />\n    </ToastProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n",["59","60"],"C:\\Users\\narut\\Documents\\Coding\\stock-calc\\src\\App.js",["61","62","63"],"import React, { useState, useEffect } from \"react\";\nimport { yahooFinApi } from \"./API/yahooFinApi\";\nimport Chart from \"./Component/Chart\";\nimport Navbar from \"./Component/Navbar\";\nimport Overview from \"./Component/Overview\";\nimport Table from \"./Component/Table\";\nimport { AiOutlineLineChart } from \"react-icons/ai\";\nimport SpinnerTool from \"./tools/Spinner/SpinnerTool\";\nimport LightChart from \"./Component/LightChart\";\nimport News from \"./Component/News\";\n\nconst App = () => {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [quoteSummary, setQuoteSummary] = useState(\"\");\n  const [quoteSpark, setQuoteSpark] = useState(\"\");\n  const [initQuoteSpark, setInitQuoteSpark] = useState(\"\");\n  const [rangeChart, setRangeChart] = useState(\"3y\");\n  const [fairValue, setFairValue] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  const styles = {\n    exampleImg: {\n      paddingTop: \"20px\",\n      filter: \"blur(2px)\",\n      maxHeight: \"95vh\",\n    },\n  };\n\n  const fetchChartData = () => {\n    setIsLoading(true);\n    yahooFinApi\n      .get(\n        `/v8/finance/spark?interval=1d&range=${rangeChart}&symbols=${searchTerm.toLowerCase()}.BK`\n      )\n      .then((res) => {\n        const firstObj = res.data[Object.keys(res.data)[0]];\n        setQuoteSpark(firstObj);\n      })\n      .catch((err) => {\n        console.log(\"err\", err.message);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  };\n\n  useEffect(() => {\n    if (searchTerm) fetchChartData();\n  }, [rangeChart, quoteSummary]);\n\n  const displayBlank = (\n    <div className=\"text-center border py-5 \" style={{ height: \"500px\" }}>\n      <AiOutlineLineChart size=\"20em\" style={{ color: \"rgba(0,0,0,0.5)\" }} />\n      <h2 style={{ color: \"rgba(0,0,0,0.5)\" }}>กรุณาเลือกหุ้น</h2>\n    </div>\n  );\n\n  const displayExample = (\n    <div>\n      <img\n        src=\"/assets/img/overview2.png\"\n        alt=\"overview\"\n        className=\"w-100\"\n        style={styles.exampleImg}\n      />\n    </div>\n  );\n\n  return (\n    <div className=\"\">\n      {isLoading && <SpinnerTool />}\n      <div className=\"container position-relative\" style={{ height: \"97vh\" }}>\n        <Navbar\n          setQuoteSummary={setQuoteSummary}\n          searchTerm={searchTerm}\n          setSearchTerm={setSearchTerm}\n          setIsLoading={setIsLoading}\n          setInitQuoteSpark={setInitQuoteSpark}\n        />\n        <News />\n\n        {quoteSummary && quoteSpark ? (\n          <div>\n            <Overview quoteSummary={quoteSummary} fairValue={fairValue} />\n            <LightChart\n              quoteSpark={quoteSpark}\n              setRangeChart={setRangeChart}\n              quoteSummary={quoteSummary}\n            />\n\n            <Table\n              quoteSummary={quoteSummary}\n              initQuoteSpark={initQuoteSpark}\n              setFairValue={setFairValue}\n            />\n          </div>\n        ) : (\n          displayExample\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","C:\\Users\\narut\\Documents\\Coding\\stock-calc\\src\\Component\\Navbar.js",["64"],"import React, { useState, useEffect } from \"react\";\r\nimport { yahooFinApi } from \"../API/yahooFinApi\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\nimport Modal from \"react-modal\";\r\nimport { FaTimesCircle, FaSearch } from \"react-icons/fa\";\r\nimport { stockList } from \"../assets/StockList\";\r\n\r\nconst Navbar = ({\r\n  setQuoteSummary,\r\n  setInitQuoteSpark,\r\n  searchTerm,\r\n  setSearchTerm,\r\n  setIsLoading,\r\n}) => {\r\n  const { addToast } = useToasts();\r\n  const [modalIsOpen, setModalIsOpen] = useState(false);\r\n\r\n  const customStyles = {\r\n    content: {\r\n      top: \"45%\",\r\n      left: \"50%\",\r\n      right: \"auto\",\r\n      bottom: \"auto\",\r\n      marginRight: \"-50%\",\r\n      width: \"30vw\",\r\n      maxWidth: \"710px\",\r\n      transform: \"translate(-50%, -50%)\",\r\n    },\r\n    overlay: {\r\n      zIndex: 1000,\r\n    },\r\n  };\r\n\r\n  const styles = {\r\n    textBrand: {\r\n      color: \"rgba(21, 101, 192, 1)\",\r\n      fontWeight: \"600\",\r\n      fontSize: \"32px\",\r\n    },\r\n    fakeInput: {\r\n      border: \"1px solid rgba(230, 230, 230, 0.8)\",\r\n      paddingInline: \"10px\",\r\n      paddingBlock: \"5px\",\r\n      minWidth: \"200px\",\r\n      width: \"100%\",\r\n      maxWidth: \"400px\",\r\n      backgroundColor: \"white\",\r\n      marginInline: \"10px\",\r\n    },\r\n  };\r\n\r\n  const openModal = () => {\r\n    setModalIsOpen(true);\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setModalIsOpen(false);\r\n    // setSearchTerm(\"\");\r\n  };\r\n\r\n  const fetchSparkMonth = () => {\r\n    setIsLoading(true);\r\n    yahooFinApi\r\n      .get(\r\n        `/v8/finance/spark?interval=1mo&range=5y&symbols=${searchTerm.toLowerCase()}.BK`\r\n      )\r\n      .then((res) => {\r\n        const firstObj = res.data[Object.keys(res.data)[0]];\r\n        setInitQuoteSpark(firstObj);\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"err\", err.message);\r\n      })\r\n      .finally(() => {\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n\r\n  const onHandleSubmit = async (ev) => {\r\n    ev.preventDefault();\r\n    await yahooFinApi\r\n      .get(\r\n        `/v11/finance/quoteSummary/${searchTerm.toLowerCase()}.BK?lang=en&region=US&modules=defaultKeyStatistics%2CassetProfile%2CfinancialData%2CquoteType%2CsummaryDetail%2CbalanceSheetHistory%2CincomeStatementHistory%2CincomeStatementHistoryQuarterly`\r\n      )\r\n      .then((res) => {\r\n        if (res.data.quoteSummary.result) {\r\n          setQuoteSummary(res.data.quoteSummary.result[0]);\r\n        } else {\r\n          addToast(res.data.quoteSummary.error.code, {\r\n            appearance: \"error\",\r\n            autoDismiss: true,\r\n          });\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"err\", err.message);\r\n      })\r\n      .finally(() => {\r\n        closeModal();\r\n      });\r\n\r\n    fetchSparkMonth();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <nav className=\"navbar navbar-light bg-light border\">\r\n        <div className=\"container-fluid\">\r\n          <div className=\"d-flex align-items-center \">\r\n            <div style={styles.textBrand}>VALUATE</div>\r\n\r\n            <div onClick={openModal} style={styles.fakeInput}>\r\n              <FaSearch className=\"ms-1 me-3\" />\r\n              <span className=\"text-secondary\">ค้นหารายชื่อหุ้น</span>\r\n            </div>\r\n\r\n            <Modal\r\n              isOpen={modalIsOpen}\r\n              onRequestClose={closeModal}\r\n              style={customStyles}\r\n            >\r\n              <form onSubmit={onHandleSubmit}>\r\n                <div className=\"d-flex justify-content-between align-items-center  mb-2\">\r\n                  <div className=\"fw-bold\">ค้นหาข้อมูลหุ้น</div>\r\n                  <div style={{ cursor: \"pointer\" }} onClick={closeModal}>\r\n                    <FaTimesCircle />\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"input-group \">\r\n                  <span\r\n                    className=\"input-group-text bg-white\"\r\n                    style={{ borderRight: \"none\" }}\r\n                  >\r\n                    <FaSearch />\r\n                  </span>\r\n                  <input\r\n                    id=\"searchField\"\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    placeholder=\"ค้นหารายชื่อหุ้น\"\r\n                    // onClick={openModal}\r\n                    onChange={(ev) => setSearchTerm(ev.target.value)}\r\n                    value={searchTerm}\r\n                    list=\"stock-list\"\r\n                    style={{\r\n                      borderLeft: \"none\",\r\n                    }}\r\n                  />\r\n                  <datalist id=\"stock-list\">\r\n                    {stockList.map((item) => {\r\n                      return (\r\n                        <option value={item.Symbol}>{item.Company}</option>\r\n                      );\r\n                    })}\r\n                  </datalist>\r\n                  <button class=\"btn btn-primary\" type=\"submit\">\r\n                    ค้นหา\r\n                  </button>\r\n                </div>\r\n              </form>\r\n            </Modal>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","C:\\Users\\narut\\Documents\\Coding\\stock-calc\\src\\API\\yahooFinApi.js",[],"C:\\Users\\narut\\Documents\\Coding\\stock-calc\\src\\Component\\Overview.js",[],"C:\\Users\\narut\\Documents\\Coding\\stock-calc\\src\\Component\\Table.js",["65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82"],"import React, { useState, useEffect } from \"react\";\r\nimport { useForm, useFieldArray, Controller, useWatch } from \"react-hook-form\";\r\nimport { FaTimesCircle, FaPlus } from \"react-icons/fa\";\r\n\r\nconst Table = ({ quoteSummary, initQuoteSpark, setFairValue }) => {\r\n  const [growth, setGrowth] = useState(0);\r\n  const [npm, setNpm] = useState(0);\r\n  const [totalShares, setTotalShares] = useState(0);\r\n  const incomeStatementHistory = quoteSummary\r\n    ? [\r\n        ...quoteSummary?.incomeStatementHistory?.incomeStatementHistory,\r\n      ]?.reverse()\r\n    : [];\r\n\r\n  const balanceSheetStatements = quoteSummary\r\n    ? [...quoteSummary?.balanceSheetHistory?.balanceSheetStatements]?.reverse()\r\n    : [];\r\n\r\n  const revenue =\r\n    quoteSummary?.incomeStatementHistory?.incomeStatementHistory[0]\r\n      ?.totalRevenue.raw +\r\n    quoteSummary?.incomeStatementHistory?.incomeStatementHistory[0]\r\n      ?.totalRevenue.raw *\r\n      (growth / 100);\r\n\r\n  const styles = {\r\n    tableHeader: {\r\n      backgroundColor: \"rgba(227, 242, 253, 1)\",\r\n    },\r\n  };\r\n\r\n  const defaultValues = {\r\n    predict: [\r\n      {\r\n        revenueEl: revenue,\r\n        growthRevEl: 0,\r\n        pNpmEl: 0,\r\n        npmEl: 0,\r\n        totalSharesEl: 0,\r\n        epsEl: 0,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const { register, control, handleSubmit, reset, watch, setValue, getValues } =\r\n    useForm();\r\n\r\n  const { fields, append, prepend, remove, swap, move, insert, replace } =\r\n    useFieldArray({\r\n      control,\r\n      name: \"predict\",\r\n    });\r\n\r\n  const formatNumber = (data) => {\r\n    return (Math.round((data / 1000000) * 100) / 100)\r\n      .toString()\r\n      .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n  };\r\n\r\n  const convertDate = (value) => {\r\n    const result = new Date(value * 1000);\r\n\r\n    let date = result.getDate();\r\n    let month = result.getMonth() + 1;\r\n    let year = result.getFullYear();\r\n\r\n    if (date < 10) {\r\n      date = \"0\" + date;\r\n    }\r\n    if (month < 10) {\r\n      month = \"0\" + month;\r\n    }\r\n\r\n    return `${date}/${month}/${year}`;\r\n  };\r\n\r\n  const getYear = (value) => {\r\n    const result = new Date(value * 1000);\r\n\r\n    let year = result.getFullYear();\r\n\r\n    return year;\r\n  };\r\n\r\n  const lastRev = watch(`predict.${fields.length - 1}.revenueEl`);\r\n  const lastGrowth = watch(`predict.${fields.length - 1}.growthRevEl`);\r\n  const lastPNpm = watch(`predict.${fields.length - 1}.pNpmEl`);\r\n  const lastShares = watch(`predict.${fields.length - 1}.totalSharesEl`);\r\n  const lastPe = watch(`predict.${fields.length - 1}.peEl`);\r\n  const lastEps = formatNumber(\r\n    ((lastRev + lastRev * (lastGrowth / 100)) * (lastPNpm / 100)) / lastShares\r\n  );\r\n\r\n  const lastPrice = lastPe * lastEps;\r\n\r\n  useEffect(() => {\r\n    setFairValue(lastPrice);\r\n  }, [lastPrice]);\r\n\r\n  useEffect(() => {\r\n    if (quoteSummary) reset(defaultValues);\r\n  }, [quoteSummary]);\r\n\r\n  const getPrice = initQuoteSpark?.timestamp\r\n    ?.map((item, index) => {\r\n      return {\r\n        date: convertDate(item),\r\n        year: getYear(item),\r\n        price: initQuoteSpark.close[index],\r\n      };\r\n    })\r\n    .filter(\r\n      (item) =>\r\n        item.date.startsWith(\"01/12\") &&\r\n        item.year >= new Date().getFullYear() - 4\r\n    );\r\n\r\n  const displayTable2 = (\r\n    <div\r\n      className=\"table-scroll  \"\r\n      style={{\r\n        width: \"100%\",\r\n        overflow: \"scroll\",\r\n        position: \"absolute\",\r\n        top: \"550px\",\r\n        bottom: \"0px\",\r\n      }}\r\n    >\r\n      <table className=\"table table-sm border\">\r\n        <thead className=\"text-center\" style={styles.tableHeader}>\r\n          <tr>\r\n            <td></td>\r\n            {quoteSummary\r\n              ? incomeStatementHistory.map((item) => {\r\n                  return (\r\n                    <td key={item.endDate.raw}>\r\n                      {new Date(item.endDate.raw * 1000).getFullYear()}\r\n                    </td>\r\n                  );\r\n                })\r\n              : \"-\"}\r\n\r\n            {fields.map((item, index) => {\r\n              return (\r\n                <td>\r\n                  {new Date().getFullYear() + index}{\" \"}\r\n                  {index !== 0 ? (\r\n                    <span\r\n                      className=\"float-end\"\r\n                      style={{ cursor: \"pointer\" }}\r\n                      onClick={() => remove(index)}\r\n                    >\r\n                      <FaTimesCircle />\r\n                    </span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </td>\r\n              );\r\n            })}\r\n            <td>\r\n              <div\r\n                type=\"button\"\r\n                className=\"btn btn-outline-primary btn-sm\"\r\n                onClick={() => {\r\n                  append({\r\n                    revenueEl: lastRev + lastRev * (lastGrowth / 100),\r\n                    growthRevEl: 0,\r\n                    pNpmEl: 0,\r\n                    npmEl: 0,\r\n                    totalSharesEl: 0,\r\n                    epsEl: 0,\r\n                  });\r\n                }}\r\n              >\r\n                <FaPlus />\r\n              </div>\r\n            </td>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td>รายได้ (ลบ.)</td>\r\n            {quoteSummary\r\n              ? incomeStatementHistory.map((item) => {\r\n                  return (\r\n                    <td className=\"text-center\">\r\n                      {formatNumber(item.totalRevenue.raw)}\r\n                    </td>\r\n                  );\r\n                })\r\n              : \"\"}\r\n\r\n            {fields.map((item, index) => {\r\n              const rev = watch(`predict.${index}.revenueEl`);\r\n              const growth = watch(`predict.${index}.growthRevEl`);\r\n\r\n              return (\r\n                <td className=\"text-center\">\r\n                  <div>{formatNumber(rev + rev * (growth / 100))}</div>\r\n                </td>\r\n              );\r\n            })}\r\n          </tr>\r\n          <tr>\r\n            <td>การเติบโตของรายได้ (%)</td>\r\n\r\n            {quoteSummary\r\n              ? incomeStatementHistory.map((item, index) => {\r\n                  let revGrowth;\r\n                  if (index !== 0) {\r\n                    revGrowth = `\r\n                        ${\r\n                          Math.round(\r\n                            (item?.totalRevenue.raw /\r\n                              incomeStatementHistory[index - 1]?.totalRevenue\r\n                                .raw -\r\n                              1) *\r\n                              100 *\r\n                              100\r\n                          ) / 100\r\n                        }`;\r\n                  } else {\r\n                    revGrowth = \"-\";\r\n                  }\r\n\r\n                  return <td className=\"text-center\">{revGrowth}</td>;\r\n                })\r\n              : \"\"}\r\n\r\n            {fields.map((item, index) => {\r\n              return (\r\n                <td className=\"text-center\">\r\n                  <input\r\n                    style={{ width: \"100px\" }}\r\n                    type=\"number\"\r\n                    {...register(`predict.${index}.growthRevEl`)}\r\n                    className=\"text-center form-control m-auto py-0\"\r\n                  />\r\n                </td>\r\n              );\r\n            })}\r\n          </tr>\r\n\r\n          <tr>\r\n            <td>อัตรากำไรสุทธิ (%)</td>\r\n            {quoteSummary\r\n              ? incomeStatementHistory.map((item) => {\r\n                  return (\r\n                    <td className=\"text-center\">\r\n                      {Math.round(\r\n                        (item.netIncome.raw / item.totalRevenue.raw) * 100 * 100\r\n                      ) / 100}\r\n                    </td>\r\n                  );\r\n                })\r\n              : \"\"}\r\n\r\n            {fields.map((item, index) => {\r\n              return (\r\n                <td className=\"text-center\">\r\n                  <input\r\n                    style={{ width: \"100px\" }}\r\n                    type=\"number\"\r\n                    {...register(`predict.${index}.pNpmEl`)}\r\n                    className=\"text-center form-control m-auto py-0\"\r\n                  />\r\n                </td>\r\n              );\r\n            })}\r\n          </tr>\r\n          <tr>\r\n            <td>กำไรสุทธิ (ลบ.)</td>\r\n            {quoteSummary\r\n              ? incomeStatementHistory.map((item) => {\r\n                  return (\r\n                    <td className=\"text-center\">\r\n                      {formatNumber(item.netIncome.raw)}\r\n                    </td>\r\n                  );\r\n                })\r\n              : \"\"}\r\n\r\n            {fields.map((item, index) => {\r\n              const rev = watch(`predict.${index}.revenueEl`);\r\n              const growth = watch(`predict.${index}.growthRevEl`);\r\n              const pNpm = watch(`predict.${index}.pNpmEl`);\r\n              return (\r\n                <td className=\"text-center\">\r\n                  <div>\r\n                    {pNpm\r\n                      ? formatNumber(\r\n                          (rev + rev * (growth / 100)) * (pNpm / 100)\r\n                        )\r\n                      : \"\"}\r\n                  </div>\r\n                </td>\r\n              );\r\n            })}\r\n          </tr>\r\n          <tr>\r\n            <td className=\"text-nowrap\">จำนวนหุ้นที่จดทะเบียน (ล้านหุ้น)</td>\r\n            {quoteSummary\r\n              ? incomeStatementHistory.map((item, index) => {\r\n                  return (\r\n                    <td className=\"text-center\">\r\n                      {formatNumber(\r\n                        quoteSummary.defaultKeyStatistics.sharesOutstanding.raw\r\n                      )}\r\n                    </td>\r\n                  );\r\n                })\r\n              : \"\"}\r\n\r\n            {fields.map((item, index) => {\r\n              return (\r\n                <td className=\"text-center\">\r\n                  <input\r\n                    style={{ width: \"100px\" }}\r\n                    type=\"number\"\r\n                    {...register(`predict.${index}.totalSharesEl`)}\r\n                    className=\"text-center form-control m-auto py-0\"\r\n                  />\r\n                </td>\r\n              );\r\n            })}\r\n          </tr>\r\n          <tr>\r\n            <td>กำไรต่อหุ้น (บาท)</td>\r\n\r\n            {quoteSummary\r\n              ? incomeStatementHistory.map((item, index) => {\r\n                  return (\r\n                    <td className=\"text-center\">\r\n                      {(\r\n                        +item.netIncome.raw /\r\n                        +quoteSummary.defaultKeyStatistics.sharesOutstanding.raw\r\n                      ).toFixed(2)}\r\n                    </td>\r\n                  );\r\n                })\r\n              : \"\"}\r\n\r\n            {fields.map((item, index) => {\r\n              const rev = watch(`predict.${index}.revenueEl`);\r\n              const growth = watch(`predict.${index}.growthRevEl`);\r\n              const pNpm = watch(`predict.${index}.pNpmEl`);\r\n              const shares = watch(`predict.${index}.totalSharesEl`);\r\n              return (\r\n                <td className=\"text-center\">\r\n                  <div>\r\n                    {shares\r\n                      ? formatNumber(\r\n                          ((rev + rev * (growth / 100)) * (pNpm / 100)) / shares\r\n                        )\r\n                      : \"\"}\r\n                  </div>\r\n                </td>\r\n              );\r\n            })}\r\n          </tr>\r\n          <tr>\r\n            <td>P/E</td>\r\n\r\n            {quoteSummary\r\n              ? incomeStatementHistory.map((item, index) => {\r\n                  const eps =\r\n                    +item.netIncome.raw /\r\n                    +quoteSummary.defaultKeyStatistics.sharesOutstanding.raw;\r\n\r\n                  const price = getPrice ? getPrice[index]?.price : 0;\r\n                  return (\r\n                    <td className=\"text-center\">{(price / eps).toFixed(2)}</td>\r\n                  );\r\n                })\r\n              : \"\"}\r\n\r\n            {fields.map((item, index) => {\r\n              return (\r\n                <td className=\"text-center\">\r\n                  <input\r\n                    style={{ width: \"100px\" }}\r\n                    type=\"number\"\r\n                    {...register(`predict.${index}.peEl`)}\r\n                    className=\"text-center form-control m-auto py-0\"\r\n                  />\r\n                </td>\r\n              );\r\n            })}\r\n          </tr>\r\n          <tr>\r\n            <td>ราคาหุ้น (บาท)</td>\r\n\r\n            {initQuoteSpark\r\n              ? getPrice.map((item, index) => {\r\n                  return (\r\n                    <td className=\"text-center\">{item.price.toFixed(2)}</td>\r\n                  );\r\n                })\r\n              : \"\"}\r\n\r\n            {fields.map((item, index) => {\r\n              const rev = watch(`predict.${index}.revenueEl`);\r\n              const growth = watch(`predict.${index}.growthRevEl`);\r\n              const pNpm = watch(`predict.${index}.pNpmEl`);\r\n              const shares = watch(`predict.${index}.totalSharesEl`);\r\n              const pe = watch(`predict.${index}.peEl`);\r\n              const eps = formatNumber(\r\n                ((rev + rev * (growth / 100)) * (pNpm / 100)) / shares\r\n              );\r\n              return (\r\n                <td className=\"text-center\">\r\n                  <div>{shares ? (pe * eps).toFixed(2) : \"\"}</div>\r\n                </td>\r\n              );\r\n            })}\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"container-fluid mt-2 p-0 \">\r\n      {quoteSummary ? displayTable2 : \"\"}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","C:\\Users\\narut\\Documents\\Coding\\stock-calc\\src\\Component\\Chart.js",["83"],"import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport useKeyPress from \"../Hooks/useKeyPress\";\r\n\r\nconst Chart = ({ quoteSpark, setRangeChart, quoteSummary }) => {\r\n  const [chartData, setChartData] = useState(\"\");\r\n  const controlPressed = useKeyPress(\"Control\");\r\n\r\n  const convertDate = (value) => {\r\n    const result = new Date(value * 1000);\r\n\r\n    let date = result.getDate();\r\n    let month = result.getMonth() + 1;\r\n    let year = result.getFullYear();\r\n\r\n    if (date < 10) {\r\n      date = \"0\" + date;\r\n    }\r\n    if (month < 10) {\r\n      month = \"0\" + month;\r\n    }\r\n\r\n    return `${date}/${month}/${year}`;\r\n  };\r\n\r\n  const convertNumberRound = (value) => {\r\n    return Math.round(value * 100) / 100;\r\n  };\r\n\r\n  const getStandardDeviation = (dataArray) => {\r\n    const n = dataArray?.length;\r\n    const mean = dataArray?.reduce((a, b) => a + b) / n;\r\n    return +Math.sqrt(\r\n      dataArray?.map((x) => Math.pow(x - mean, 2)).reduce((a, b) => a + b) / n\r\n    );\r\n  };\r\n\r\n  const getPrice = quoteSpark?.close?.map((item, index) => {\r\n    return {\r\n      price: item,\r\n      year: new Date(quoteSpark.timestamp[index] * 1000).getFullYear(),\r\n    };\r\n  });\r\n\r\n  const getEPS =\r\n    quoteSummary?.incomeStatementHistory?.incomeStatementHistory?.map(\r\n      (item, index) => {\r\n        return {\r\n          eps:\r\n            item.netIncome.raw /\r\n            quoteSummary?.balanceSheetHistory.balanceSheetStatements[index]\r\n              .commonStock.raw,\r\n          year: new Date(item.endDate.raw * 1000).getFullYear(),\r\n        };\r\n      }\r\n    );\r\n\r\n  const getPE = getPrice?.map((item, index) => {\r\n    const resEps = getEPS?.find((data) => data.year === item.year);\r\n    const resPe = resEps ? +item.price / +resEps.eps : null;\r\n\r\n    return {\r\n      ...item,\r\n      eps: resEps ? resEps.eps : null,\r\n      pe: resPe ? convertNumberRound(resPe) : resPe,\r\n    };\r\n  });\r\n\r\n  const purePE = getPE?.filter((item) => item.pe);\r\n\r\n  const getSD = getPE?.map((item) => {\r\n    const n = purePE?.length;\r\n    const meanPE =\r\n      purePE?.map((item) => item.pe).reduce((a, b) => +a + +b) / +n;\r\n\r\n    const pe = purePE.map((item) => item.pe);\r\n\r\n    return {\r\n      ...item,\r\n      sd: convertNumberRound(meanPE),\r\n      sd1p: convertNumberRound(meanPE + getStandardDeviation(pe)),\r\n      sd2p: convertNumberRound(meanPE + getStandardDeviation(pe) * 2),\r\n      sd1m: convertNumberRound(meanPE - getStandardDeviation(pe)),\r\n      sd2m: convertNumberRound(meanPE - getStandardDeviation(pe) * 2),\r\n    };\r\n  });\r\n\r\n  const chartGenerate = () => {\r\n    const labels = quoteSpark?.timestamp?.map((item) => convertDate(item));\r\n\r\n    const datas = {\r\n      labels: labels,\r\n      datasets: [\r\n        {\r\n          label: quoteSpark?.symbol?.replace(\".BK\", \"\"),\r\n          backgroundColor: \"rgba(21, 101, 192, 1)\",\r\n          borderColor: \"rgba(21, 101, 192, 1)\",\r\n          pointRadius: \"0\",\r\n          borderWidth: 2,\r\n          data: getSD.map((item) => item.pe),\r\n        },\r\n        {\r\n          label: \"+2SD\",\r\n\r\n          borderColor: \"gray\",\r\n          borderDash: [10, 5],\r\n          pointRadius: \"0\",\r\n          borderWidth: 2,\r\n          data: getSD ? getSD.map((item) => item.sd2p) : \"\",\r\n        },\r\n\r\n        {\r\n          label: \"+1SD\",\r\n\r\n          borderColor: \"gray\",\r\n          borderDash: [10, 5],\r\n          pointRadius: \"0\",\r\n          borderWidth: 2,\r\n          data: getSD ? getSD.map((item) => item.sd1p) : \"\",\r\n        },\r\n\r\n        {\r\n          label: \"Average\",\r\n\r\n          borderColor: \"gray\",\r\n          borderDash: [10, 5],\r\n          pointRadius: \"0\",\r\n          borderWidth: 2,\r\n          data: getSD ? getSD.map((item) => item.sd) : \"\",\r\n        },\r\n\r\n        {\r\n          label: \"-1SD\",\r\n\r\n          borderColor: \"gray\",\r\n          borderDash: [10, 5],\r\n          pointRadius: \"0\",\r\n          borderWidth: 2,\r\n          data: getSD ? getSD.map((item) => item.sd1m) : \"\",\r\n        },\r\n        {\r\n          label: \"-2SD\",\r\n\r\n          borderColor: \"gray\",\r\n          borderDash: [10, 5],\r\n          pointRadius: \"0\",\r\n          borderWidth: 2,\r\n          data: getSD ? getSD.map((item) => item.sd2m) : \"\",\r\n        },\r\n      ],\r\n    };\r\n\r\n    setChartData(datas);\r\n  };\r\n\r\n  let options = {\r\n    scales: {\r\n      x: {\r\n        ticks: {\r\n          maxTicksLimit: 5,\r\n          maxRotation: 0,\r\n          minRotation: 0,\r\n        },\r\n      },\r\n    },\r\n\r\n    plugins: {\r\n      zoom: {\r\n        zoom: {\r\n          wheel: {\r\n            enabled: true,\r\n            // modifierKey: \"ctrl\",\r\n          },\r\n          pinch: {\r\n            enabled: true,\r\n          },\r\n          mode: controlPressed ? \"xy\" : \"x\",\r\n        },\r\n\r\n        pan: {\r\n          enabled: true,\r\n          mode: \"xy\",\r\n          speed: 1,\r\n          threshold: 1,\r\n        },\r\n      },\r\n    },\r\n\r\n    interaction: {\r\n      intersect: false,\r\n      mode: \"index\",\r\n    },\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (quoteSpark) chartGenerate();\r\n  }, [quoteSpark]);\r\n\r\n  const displayRange = (\r\n    <div className=\"d-flex justify-content-around align-items-center my-1\">\r\n      <div>\r\n        <input\r\n          onChange={(ev) => setRangeChart(ev.target.value)}\r\n          name=\"range-chart\"\r\n          type=\"radio\"\r\n          className=\"btn-check\"\r\n          id=\"range-1y\"\r\n          value=\"1y\"\r\n        />\r\n        <label\r\n          className=\"btn btn-outline-primary btn-sm px-5\"\r\n          htmlFor=\"range-1y\"\r\n        >\r\n          1Y\r\n        </label>\r\n      </div>\r\n      <div>\r\n        <input\r\n          onChange={(ev) => setRangeChart(ev.target.value)}\r\n          name=\"range-chart\"\r\n          type=\"radio\"\r\n          className=\"btn-check\"\r\n          id=\"range-3y\"\r\n          value=\"3y\"\r\n          defaultChecked\r\n        />\r\n        <label\r\n          className=\"btn btn-outline-primary btn-sm px-5\"\r\n          htmlFor=\"range-3y\"\r\n        >\r\n          3Y\r\n        </label>\r\n      </div>\r\n      <div>\r\n        <input\r\n          onChange={(ev) => setRangeChart(ev.target.value)}\r\n          name=\"range-chart\"\r\n          type=\"radio\"\r\n          className=\"btn-check\"\r\n          id=\"range-5y\"\r\n          value=\"5y\"\r\n          defaultChecked\r\n        />\r\n        <label\r\n          className=\"btn btn-outline-primary btn-sm px-5\"\r\n          htmlFor=\"range-5y\"\r\n        >\r\n          5Y\r\n        </label>\r\n      </div>\r\n      <div>\r\n        <input\r\n          onChange={(ev) => setRangeChart(ev.target.value)}\r\n          name=\"range-chart\"\r\n          type=\"radio\"\r\n          className=\"btn-check\"\r\n          id=\"range-max\"\r\n          value=\"max\"\r\n        />\r\n        <label\r\n          className=\"btn btn-outline-primary btn-sm px-5\"\r\n          htmlFor=\"range-max\"\r\n        >\r\n          Max\r\n        </label>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {quoteSpark ? (\r\n        <>\r\n          {displayRange}\r\n          <div id=\"stock-chart\" className=\"shadow my-1 px-4 py-2\">\r\n            <Line data={chartData} options={options} width={30} height={10} />\r\n          </div>\r\n        </>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","C:\\Users\\narut\\Documents\\Coding\\stock-calc\\src\\assets\\StockList.js",[],"C:\\Users\\narut\\Documents\\Coding\\stock-calc\\src\\tools\\Spinner\\SpinnerTool.js",[],"C:\\Users\\narut\\Documents\\Coding\\stock-calc\\src\\Hooks\\useKeyPress.js",["84"],"import { useState, useEffect } from \"react\";\r\n\r\nfunction useKeyPress(targetKey) {\r\n  // State for keeping track of whether key is pressed\r\n  const [keyPressed, setKeyPressed] = useState(false);\r\n  // If pressed key is our target key then set to true\r\n  function downHandler({ key }) {\r\n    if (key === targetKey) {\r\n      setKeyPressed(true);\r\n    }\r\n  }\r\n  // If released key is our target key then set to false\r\n  const upHandler = ({ key }) => {\r\n    if (key === targetKey) {\r\n      setKeyPressed(false);\r\n    }\r\n  };\r\n  // Add event listeners\r\n  useEffect(() => {\r\n    window.addEventListener(\"keydown\", downHandler);\r\n    window.addEventListener(\"keyup\", upHandler);\r\n    // Remove event listeners on cleanup\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", downHandler);\r\n      window.removeEventListener(\"keyup\", upHandler);\r\n    };\r\n  }, []); // Empty array ensures that effect is only run on mount and unmount\r\n  return keyPressed;\r\n}\r\n\r\nexport default useKeyPress;\r\n","C:\\Users\\narut\\Documents\\Coding\\stock-calc\\src\\Component\\LightChart.js",["85","86"],"import React, { useState, useEffect } from \"react\";\r\nimport Chart from \"kaktana-react-lightweight-charts\";\r\nimport { createChart, LineStyle } from \"lightweight-charts\";\r\n\r\nconst LightChart = ({ quoteSpark, setRangeChart, quoteSummary }) => {\r\n  const [chartData, setChartData] = useState([]);\r\n\r\n  const convertDate = (value) => {\r\n    const result = new Date(value * 1000);\r\n\r\n    let date = result.getDate();\r\n    let month = result.getMonth() + 1;\r\n    let year = result.getFullYear();\r\n\r\n    if (date < 10) {\r\n      date = \"0\" + date;\r\n    }\r\n    if (month < 10) {\r\n      month = \"0\" + month;\r\n    }\r\n\r\n    return `${year}-${month}-${date}`;\r\n  };\r\n\r\n  const convertNumberRound = (value) => {\r\n    return Math.round(value * 100) / 100;\r\n  };\r\n\r\n  const getStandardDeviation = (dataArray) => {\r\n    const n = dataArray?.length;\r\n    const mean = dataArray?.reduce((a, b) => a + b) / n;\r\n    return +Math.sqrt(\r\n      dataArray?.map((x) => Math.pow(x - mean, 2)).reduce((a, b) => a + b) / n\r\n    );\r\n  };\r\n\r\n  const getPrice = quoteSpark?.close?.map((item, index) => {\r\n    return {\r\n      price: item,\r\n      date: convertDate(quoteSpark.timestamp[index]),\r\n      year: new Date(quoteSpark.timestamp[index] * 1000).getFullYear(),\r\n    };\r\n  });\r\n\r\n  const getEPS = quoteSummary?.incomeStatementHistory?.incomeStatementHistory\r\n    ?.map((item, index) => {\r\n      return {\r\n        eps:\r\n          item.netIncome.raw /\r\n          quoteSummary?.defaultKeyStatistics.sharesOutstanding.raw,\r\n        year: new Date(item.endDate.raw * 1000).getFullYear(),\r\n      };\r\n    })\r\n    .concat({\r\n      eps: quoteSummary?.defaultKeyStatistics.trailingEps.raw,\r\n      year: new Date().getFullYear(),\r\n    })\r\n    .sort((a, b) => a.year - b.year);\r\n\r\n  const getPE = getPrice?.map((item, index) => {\r\n    const resEps = getEPS?.find((data) => data.year === item.year);\r\n    const resPe = resEps ? +item.price / +resEps.eps : null;\r\n\r\n    return {\r\n      ...item,\r\n      eps: resEps ? resEps.eps : null,\r\n      pe: resPe ? convertNumberRound(resPe) : resPe,\r\n    };\r\n  });\r\n\r\n  const purePE = getPE?.filter((item) => item.pe);\r\n\r\n  const getSD = getPE?.map((item) => {\r\n    const n = purePE?.length;\r\n    const meanPE =\r\n      purePE?.map((item) => item.pe)?.reduce((a, b) => +a + +b) / +n;\r\n\r\n    const pe = purePE.map((item) => item.pe);\r\n\r\n    return {\r\n      ...item,\r\n      sd: convertNumberRound(meanPE),\r\n      sd1p: convertNumberRound(meanPE + getStandardDeviation(pe)),\r\n      sd2p: convertNumberRound(meanPE + getStandardDeviation(pe) * 2),\r\n      sd1m: convertNumberRound(meanPE - getStandardDeviation(pe)),\r\n      sd2m: convertNumberRound(meanPE - getStandardDeviation(pe) * 2),\r\n    };\r\n  });\r\n\r\n  const generateChart = () => {\r\n    const datas = getSD.map((item) => {\r\n      return {\r\n        time: item.date,\r\n        value: item.pe,\r\n      };\r\n    });\r\n    setChartData([\r\n      {\r\n        legend: \"P/E\",\r\n        data: datas,\r\n        priceLines: [\r\n          {\r\n            title: \"+2SD\",\r\n            price: getSD[0].sd2p,\r\n            color: \"gray\",\r\n            lineWidth: 2,\r\n            lineStyle: LineStyle.Dotted,\r\n            axisLabelVisible: true,\r\n          },\r\n          {\r\n            price: getSD[0].sd1p,\r\n            color: \"gray\",\r\n            lineWidth: 2,\r\n            lineStyle: LineStyle.Dotted,\r\n            axisLabelVisible: true,\r\n            title: \"+1SD\",\r\n          },\r\n          {\r\n            price: getSD[0].sd,\r\n            color: \"gray\",\r\n            lineWidth: 2,\r\n            lineStyle: LineStyle.Dotted,\r\n            axisLabelVisible: true,\r\n            title: \"Average\",\r\n          },\r\n          {\r\n            price: getSD[0].sd1m,\r\n            color: \"gray\",\r\n            lineWidth: 2,\r\n            lineStyle: LineStyle.Dotted,\r\n            axisLabelVisible: true,\r\n            title: \"-1SD\",\r\n          },\r\n          {\r\n            price: getSD[0].sd2m,\r\n            color: \"gray\",\r\n            lineWidth: 2,\r\n            lineStyle: LineStyle.Dotted,\r\n            axisLabelVisible: true,\r\n            title: \"-2SD\",\r\n          },\r\n        ],\r\n      },\r\n    ]);\r\n  };\r\n\r\n  const options = {\r\n    alignLabels: true,\r\n    timeScale: {\r\n      rightOffset: 12,\r\n      barSpacing: 3,\r\n      fixLeftEdge: false,\r\n      lockVisibleTimeRangeOnResize: true,\r\n      rightBarStaysOnScroll: true,\r\n      borderVisible: false,\r\n      borderColor: \"#fff000\",\r\n      visible: true,\r\n      timeVisible: true,\r\n      secondsVisible: false,\r\n    },\r\n    priceScale: {\r\n      autoScale: true,\r\n    },\r\n  };\r\n\r\n  useEffect(() => {\r\n    generateChart();\r\n  }, [quoteSpark]);\r\n\r\n  const displayRange = (\r\n    <div className=\"d-flex justify-content-around align-items-center my-1\">\r\n      <div>\r\n        <input\r\n          onChange={(ev) => setRangeChart(ev.target.value)}\r\n          name=\"range-chart\"\r\n          type=\"radio\"\r\n          className=\"btn-check\"\r\n          id=\"range-1y\"\r\n          value=\"1y\"\r\n        />\r\n        <label\r\n          className=\"btn btn-outline-primary btn-sm px-5\"\r\n          htmlFor=\"range-1y\"\r\n        >\r\n          1Y\r\n        </label>\r\n      </div>\r\n      <div>\r\n        <input\r\n          onChange={(ev) => setRangeChart(ev.target.value)}\r\n          name=\"range-chart\"\r\n          type=\"radio\"\r\n          className=\"btn-check\"\r\n          id=\"range-3y\"\r\n          value=\"3y\"\r\n          defaultChecked\r\n        />\r\n        <label\r\n          className=\"btn btn-outline-primary btn-sm px-5\"\r\n          htmlFor=\"range-3y\"\r\n        >\r\n          3Y\r\n        </label>\r\n      </div>\r\n      <div>\r\n        <input\r\n          onChange={(ev) => setRangeChart(ev.target.value)}\r\n          name=\"range-chart\"\r\n          type=\"radio\"\r\n          className=\"btn-check\"\r\n          id=\"range-5y\"\r\n          value=\"5y\"\r\n        />\r\n        <label\r\n          className=\"btn btn-outline-primary btn-sm px-5\"\r\n          htmlFor=\"range-5y\"\r\n        >\r\n          5Y\r\n        </label>\r\n      </div>\r\n      <div>\r\n        <input\r\n          onChange={(ev) => setRangeChart(ev.target.value)}\r\n          name=\"range-chart\"\r\n          type=\"radio\"\r\n          className=\"btn-check\"\r\n          id=\"range-max\"\r\n          value=\"max\"\r\n        />\r\n        <label\r\n          className=\"btn btn-outline-primary btn-sm px-5\"\r\n          htmlFor=\"range-max\"\r\n        >\r\n          Max\r\n        </label>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {quoteSpark ? (\r\n        <>\r\n          {displayRange}\r\n          <div id=\"stock-chart\" className=\"shadow my-1 px-4 py-2\">\r\n            <Chart\r\n              options={options}\r\n              lineSeries={chartData}\r\n              autoWidth\r\n              height={300}\r\n              from={`${new Date().getFullYear() - 4}-01-01`}\r\n              to={convertDate(new Date())}\r\n            />\r\n          </div>\r\n        </>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LightChart;\r\n","C:\\Users\\narut\\Documents\\Coding\\stock-calc\\src\\Component\\News.js",[],{"ruleId":"87","severity":1,"message":"88","line":5,"column":25,"nodeType":"89","messageId":"90","endLine":5,"endColumn":34},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"87","severity":1,"message":"95","line":3,"column":8,"nodeType":"89","messageId":"90","endLine":3,"endColumn":13},{"ruleId":"96","severity":1,"message":"97","line":49,"column":6,"nodeType":"98","endLine":49,"endColumn":32,"suggestions":"99"},{"ruleId":"87","severity":1,"message":"100","line":51,"column":9,"nodeType":"89","messageId":"90","endLine":51,"endColumn":21},{"ruleId":"87","severity":1,"message":"101","line":1,"column":27,"nodeType":"89","messageId":"90","endLine":1,"endColumn":36},{"ruleId":"87","severity":1,"message":"102","line":2,"column":34,"nodeType":"89","messageId":"90","endLine":2,"endColumn":44},{"ruleId":"87","severity":1,"message":"103","line":2,"column":46,"nodeType":"89","messageId":"90","endLine":2,"endColumn":54},{"ruleId":"87","severity":1,"message":"104","line":6,"column":18,"nodeType":"89","messageId":"90","endLine":6,"endColumn":27},{"ruleId":"87","severity":1,"message":"105","line":7,"column":10,"nodeType":"89","messageId":"90","endLine":7,"endColumn":13},{"ruleId":"87","severity":1,"message":"106","line":7,"column":15,"nodeType":"89","messageId":"90","endLine":7,"endColumn":21},{"ruleId":"87","severity":1,"message":"107","line":8,"column":10,"nodeType":"89","messageId":"90","endLine":8,"endColumn":21},{"ruleId":"87","severity":1,"message":"108","line":8,"column":23,"nodeType":"89","messageId":"90","endLine":8,"endColumn":37},{"ruleId":"87","severity":1,"message":"109","line":15,"column":9,"nodeType":"89","messageId":"90","endLine":15,"endColumn":31},{"ruleId":"87","severity":1,"message":"110","line":45,"column":30,"nodeType":"89","messageId":"90","endLine":45,"endColumn":42},{"ruleId":"87","severity":1,"message":"111","line":45,"column":58,"nodeType":"89","messageId":"90","endLine":45,"endColumn":66},{"ruleId":"87","severity":1,"message":"112","line":45,"column":68,"nodeType":"89","messageId":"90","endLine":45,"endColumn":77},{"ruleId":"87","severity":1,"message":"113","line":48,"column":27,"nodeType":"89","messageId":"90","endLine":48,"endColumn":34},{"ruleId":"87","severity":1,"message":"114","line":48,"column":44,"nodeType":"89","messageId":"90","endLine":48,"endColumn":48},{"ruleId":"87","severity":1,"message":"115","line":48,"column":50,"nodeType":"89","messageId":"90","endLine":48,"endColumn":54},{"ruleId":"87","severity":1,"message":"116","line":48,"column":56,"nodeType":"89","messageId":"90","endLine":48,"endColumn":62},{"ruleId":"87","severity":1,"message":"117","line":48,"column":64,"nodeType":"89","messageId":"90","endLine":48,"endColumn":71},{"ruleId":"96","severity":1,"message":"118","line":98,"column":6,"nodeType":"98","endLine":98,"endColumn":17,"suggestions":"119"},{"ruleId":"96","severity":1,"message":"120","line":102,"column":6,"nodeType":"98","endLine":102,"endColumn":20,"suggestions":"121"},{"ruleId":"96","severity":1,"message":"122","line":197,"column":6,"nodeType":"98","endLine":197,"endColumn":18,"suggestions":"123"},{"ruleId":"96","severity":1,"message":"124","line":27,"column":6,"nodeType":"98","endLine":27,"endColumn":8,"suggestions":"125"},{"ruleId":"87","severity":1,"message":"126","line":3,"column":10,"nodeType":"89","messageId":"90","endLine":3,"endColumn":21},{"ruleId":"96","severity":1,"message":"127","line":168,"column":6,"nodeType":"98","endLine":168,"endColumn":18,"suggestions":"128"},"no-unused-vars","'useToasts' is defined but never used.","Identifier","unusedVar","no-native-reassign",["129"],"no-negated-in-lhs",["130"],"'Chart' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchChartData' and 'searchTerm'. Either include them or remove the dependency array.","ArrayExpression",["131"],"'displayBlank' is assigned a value but never used.","'useEffect' is defined but never used.","'Controller' is defined but never used.","'useWatch' is defined but never used.","'setGrowth' is assigned a value but never used.","'npm' is assigned a value but never used.","'setNpm' is assigned a value but never used.","'totalShares' is assigned a value but never used.","'setTotalShares' is assigned a value but never used.","'balanceSheetStatements' is assigned a value but never used.","'handleSubmit' is assigned a value but never used.","'setValue' is assigned a value but never used.","'getValues' is assigned a value but never used.","'prepend' is assigned a value but never used.","'swap' is assigned a value but never used.","'move' is assigned a value but never used.","'insert' is assigned a value but never used.","'replace' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setFairValue'. Either include it or remove the dependency array. If 'setFairValue' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["132"],"React Hook useEffect has missing dependencies: 'defaultValues' and 'reset'. Either include them or remove the dependency array.",["133"],"React Hook useEffect has a missing dependency: 'chartGenerate'. Either include it or remove the dependency array.",["134"],"React Hook useEffect has missing dependencies: 'downHandler' and 'upHandler'. Either include them or remove the dependency array.",["135"],"'createChart' is defined but never used.","React Hook useEffect has a missing dependency: 'generateChart'. Either include it or remove the dependency array.",["136"],"no-global-assign","no-unsafe-negation",{"desc":"137","fix":"138"},{"desc":"139","fix":"140"},{"desc":"141","fix":"142"},{"desc":"143","fix":"144"},{"desc":"145","fix":"146"},{"desc":"147","fix":"148"},"Update the dependencies array to be: [rangeChart, quoteSummary, searchTerm, fetchChartData]",{"range":"149","text":"150"},"Update the dependencies array to be: [lastPrice, setFairValue]",{"range":"151","text":"152"},"Update the dependencies array to be: [defaultValues, quoteSummary, reset]",{"range":"153","text":"154"},"Update the dependencies array to be: [chartGenerate, quoteSpark]",{"range":"155","text":"156"},"Update the dependencies array to be: [downHandler, upHandler]",{"range":"157","text":"158"},"Update the dependencies array to be: [generateChart, quoteSpark]",{"range":"159","text":"160"},[1509,1535],"[rangeChart, quoteSummary, searchTerm, fetchChartData]",[2741,2752],"[lastPrice, setFairValue]",[2829,2843],"[defaultValues, quoteSummary, reset]",[4986,4998],"[chartGenerate, quoteSpark]",[862,864],"[downHandler, upHandler]",[4583,4595],"[generateChart, quoteSpark]"]